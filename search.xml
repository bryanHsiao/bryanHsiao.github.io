<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS30-01-JavaScript-Drum-Kit</title>
    <url>/2019/04/25/JS30-01-JavaScript-Drum-Kit/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p><img src="/2019/04/25/JS30-01-JavaScript-Drum-Kit/drum-kit.jpg"></p>
<font style="font-size:20px;">使用鍵盤事件，觸發聲音及特效</font>
</blockquote>
<hr>
<a id="more"></a>
<h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><ul>
<li>按下鍵盤時，播放聲音並顯示 CSS 效果。</li>
<li>播放完畢後，移除 CSS 效果。</li>
</ul>
<h2 id="實作要點"><a href="#實作要點" class="headerlink" title="實作要點"></a>實作要點</h2><ol>
<li><p>利用 JS <code>addEventListener</code> 監聽鍵盤的<code>keydown</code> Event</p>
<ul>
<li>由按下鍵盤的 <code>keyCode</code> 選取出相對應的的 <code>audio</code>標籤 和 <code>div</code>標籤</li>
<li>audio 標籤 → 取得音效資源播放聲音</li>
<li>div 標籤 → 套用 CSS 效果</li>
</ul>
</li>
<li><p>監聽 CSS 的 <code>transitionend</code> Event (transitionend 事件會在 transition 结束之後觸發)</p>
<ul>
<li><code>e.propertyName !== &quot;transform&quot;</code> 僅針對 transform 繼續做事，不是則停止</li>
<li>若為 transform，則移除 CSS 效果</li>
</ul>
</li>
</ol>
<h2 id="成品展示"><a href="#成品展示" class="headerlink" title="成品展示"></a>成品展示</h2><blockquote>
<p><a href="https://codepen.io/bryan-hsaio/pen/GaKyEE" target="_blank" rel="noopener">[CodePen]</a></p>
</blockquote>
<hr>
<h2 id="JS-學習紀錄"><a href="#JS-學習紀錄" class="headerlink" title="JS 學習紀錄"></a>JS 學習紀錄</h2><h3 id="HTML5-標籤-HTMLMediaElement"><a href="#HTML5-標籤-HTMLMediaElement" class="headerlink" title="HTML5 標籤 HTMLMediaElement"></a>HTML5 標籤 HTMLMediaElement</h3><p>透過 js 取得 HTMLMediaElement 元素，來進行影音的播放。</p>
<figure class="highlight html"><figcaption><span>HTML</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">"65"</span> <span class="attr">src</span>=<span class="string">"sounds/clap.wav"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>JS</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//取得 HTMLMediaElement 元素</span></span><br><span class="line"><span class="keyword">const</span> audio = <span class="built_in">document</span>.querySelector(<span class="string">`audio[data-key="<span class="subst">$&#123;e.keyCode&#125;</span>"]`</span>); <span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">if</span> (audio) &#123;</span><br><span class="line">  audio.currentTime = <span class="number">0</span>; <span class="comment">//持續撥放，設置或返回媒體中的當前播放位置（以秒 Seconds 為單位）</span></span><br><span class="line">  audio.play(); <span class="comment">// 播放音效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/HTMLMediaElement" target="_blank" rel="noopener">MDN-HTMLMediaElement</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/Events/play" target="_blank" rel="noopener">HTMLMediaElement.play</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime" target="_blank" rel="noopener">HTMLMediaElement.currentTime</a></div>

<hr>
<h3 id="DOM-元素-Element-classList"><a href="#DOM-元素-Element-classList" class="headerlink" title="DOM 元素 Element.classList"></a>DOM 元素 Element.classList</h3><p>透過 <code>classList</code> 新增、移除、切換 CSS 屬性，同等於 jQuery 的 <code>addClass</code>、<code>removeClass</code>。</p>
<figure class="highlight html"><figcaption><span>HTML</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">"65"</span> <span class="attr">class</span>=<span class="string">"key"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>A<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sound"</span>&gt;</span>clap<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>JS</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//取得 DOM 元素</span></span><br><span class="line"><span class="keyword">const</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">`div[data-key="<span class="subst">$&#123;e.keyCode&#125;</span>"]`</span>); <span class="comment">//ES6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dom) key.classList.add(<span class="string">'playing'</span>); <span class="comment">//新增CSS屬性</span></span><br><span class="line">key.classList.remove(<span class="string">'playing'</span>); <span class="comment">//移除CSS屬性</span></span><br><span class="line">key.classList.toggle(<span class="string">'playing'</span>); <span class="comment">//切換CSS屬性</span></span><br></pre></td></tr></table></figure>
<div class="note info"><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList" target="_blank" rel="noopener">Element.classList</a></div>

<hr>
<h3 id="DOM-元素-NodeList"><a href="#DOM-元素-NodeList" class="headerlink" title="DOM 元素 NodeList"></a>DOM 元素 NodeList</h3><p>使用 <code>querySelectorAll</code> 取得的 DOM 是 <code>NodeList</code> 型態，非 Array 型態，<br>雖然 也可以使用 NodeList.prototype.forEach() 的 method，但有可能會遇到部份瀏覽器不支援，所以一般來說為了相容性，會先轉換成 Array 型態再拿來做使用。</p>
<figure class="highlight html"><figcaption><span>HTML</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">"65"</span> <span class="attr">class</span>=<span class="string">"key"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>A<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sound"</span>&gt;</span>clap<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-key</span>=<span class="string">"83"</span> <span class="attr">class</span>=<span class="string">"key"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>S<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sound"</span>&gt;</span>hihat<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>JS</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// querySelectorAll 取得 DOM 元素 → NodeList 型態</span></span><br><span class="line"><span class="keyword">const</span> keys = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.key'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// NodeList.prototype.forEach() → IE不支援</span></span><br><span class="line">keys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> key.addEventListener(<span class="string">'transitionend'</span>, transitionEndHandler));</span><br></pre></td></tr></table></figure>
<img src="/2019/04/25/JS30-01-JavaScript-Drum-Kit/NodeList_foreachIEnoSupport.jpg">
<p>可藉由下列方法，將 NodeList 轉換 Array 型態，支援度較高。</p>
<figure class="highlight js"><figcaption><span>NodeList 轉換 Array</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Array.from() 轉Array型態</span></span><br><span class="line"><span class="keyword">const</span> keys = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.key'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轉換成 Array型態 後，就可以使用 forEach()、map(), concat() …等method</span></span><br><span class="line">keys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> key.addEventListener(<span class="string">'transitionend'</span>, transitionEndHandler));</span><br></pre></td></tr></table></figure>
<div class="note info"><a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach" target="_blank" rel="noopener">NodeList.prototype.forEach()</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener">Array.from()</a><br></div>

<p>也可以使用 ES6 … 展開運算子(Spread Operator)</p>
<figure class="highlight js"><figcaption><span>JS 展開運算子</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...展開運算子</span></span><br><span class="line"><span class="keyword">const</span> keys = [...document.querySelectorAll(<span class="string">'.key'</span>))];</span><br><span class="line">keys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> key.addEventListener(<span class="string">'transitionend'</span>,transitionEndHandler))</span><br></pre></td></tr></table></figure>
<div class="note info"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener">… 展開運算子(Spread Operator)</a><br></div>

<hr>
<h3 id="監聽-CSS-transitionend-事件"><a href="#監聽-CSS-transitionend-事件" class="headerlink" title="監聽 CSS transitionend 事件"></a>監聽 CSS transitionend 事件</h3><p><code>transitionend</code> 事件會在 CSS <code>transition</code> 結束後觸發</p>
<figure class="highlight js"><figcaption><span>JS</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transitionEndHandler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//因為CSS class [.key]做了transition: all，會使多個CSS效果同時執行。</span></span><br><span class="line">  <span class="comment">//監聽transitionend時會發現觸發了很多次，ex:border-left-color、border-right-color、transform...</span></span><br><span class="line">  <span class="comment">//我們只需要對transform事件做處理</span></span><br><span class="line">  <span class="keyword">if</span> (e.propertyName == <span class="string">'transform'</span>) &#123;</span><br><span class="line">    e.currentTarget.classList.remove(<span class="string">'playing'</span>); <span class="comment">//currentTarget ==&gt; 事件綁定的對象 或用Target也行。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2019/04/25/JS30-01-JavaScript-Drum-Kit/transitionend_transform.jpg">
<div class="note info"><a href="https://developer.mozilla.org/en-US/docs/Web/Events/transitionend" target="_blank" rel="noopener">transitionend</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank" rel="noopener">MDN-Event reference</a><br></div>

<div class="note primary"><a href="http://keycode.info/" target="_blank" rel="noopener">查詢鍵盤的代碼</a></div>
]]></content>
      <categories>
        <category>JS</category>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>JS30-05-Flex Panel Gallery</title>
    <url>/2019/04/30/JS30-05-Flex-Panel-Gallery/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p><img src="/2019/04/30/JS30-05-Flex-Panel-Gallery/Gallery.png"></p>
</blockquote>
<a id="more"></a>
<hr>
]]></content>
      <categories>
        <category>JS</category>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>JS30-07-Array Cardio Day 2</title>
    <url>/2019/05/09/JS30-07-Array%20Cardio%20Day%202/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p><img src="/2019/05/09/JS30-07-Array%20Cardio%20Day%202/arraymethod.jpg"></p>
<font style="font-size:20px;">陣列的操作</font><br><font style="font-size:20px;">some()、every()、find()、findIndex()、slice()、splice()</font></blockquote>
<a id="more"></a>
<hr>
<h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><ul>
<li>由二組資料中，根據不同需求條件篩選出正確的資料</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">const</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Wes'</span>, <span class="attr">year</span>: <span class="number">1988</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Kait'</span>, <span class="attr">year</span>: <span class="number">1986</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Irv'</span>, <span class="attr">year</span>: <span class="number">1970</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Lux'</span>, <span class="attr">year</span>: <span class="number">2015</span> &#125;</span><br><span class="line">  ];</span><br><span class="line">- <span class="keyword">const</span> comments = [</span><br><span class="line">  &#123; <span class="attr">text</span>: <span class="string">'Love this!'</span>, <span class="attr">id</span>: <span class="number">523423</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">text</span>: <span class="string">'Super good'</span>, <span class="attr">id</span>: <span class="number">823423</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">text</span>: <span class="string">'You are the best'</span>, <span class="attr">id</span>: <span class="number">2039842</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">text</span>: <span class="string">'Ramen is my fav food ever'</span>, <span class="attr">id</span>: <span class="number">123523</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">text</span>: <span class="string">'Nice Nice Nice!'</span>, <span class="attr">id</span>: <span class="number">542328</span> &#125;</span><br><span class="line">  ];</span><br></pre></td></tr></table></figure>
<h2 id="實作要點"><a href="#實作要點" class="headerlink" title="實作要點"></a>實作要點</h2><ol>
<li>利用 some()，判斷 people 中是否有 19 歲以上的人。</li>
<li>利用 every()，判斷 people 中是否都 19 歲以上。</li>
<li>利用 find()，找到 comments 中 id 是 823423 的資料。</li>
<li>利用 findIndex()，找出 comments 中 id 是 823423 的索引值。</li>
<li>利用 splice()、slice 刪除 comments 中 id 是 823423 的資料。</li>
</ol>
<h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><h3 id="判斷-people-中是否有-19-歲以上的人"><a href="#判斷-people-中是否有-19-歲以上的人" class="headerlink" title="判斷 people 中是否有 19 歲以上的人"></a>判斷 people 中是否有 19 歲以上的人</h3><h4 id="→-some"><a href="#→-some" class="headerlink" title="→ some()"></a>→ some()</h4><figure class="highlight js"><figcaption><span>Array.prototype.some()</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ans0 = people.some(<span class="function"><span class="params">p</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getUTCFullYear() - p.year &gt;= <span class="number">19</span>);</span><br><span class="line"><span class="comment">//some() 方法會測試陣列中是否[至少有一個]元素通過由給定之函式所實作的測試。</span></span><br><span class="line"><span class="comment">//若回呼函式在處理任何一個陣列元素時得到 truthy 值，則回傳 true。否則，回傳值為 false。</span></span><br><span class="line"><span class="built_in">console</span>.log(ans0);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'↑↑ is at least one person 19 or older? ↑↑'</span>);</span><br></pre></td></tr></table></figure>
<img src="/2019/05/09/JS30-07-Array%20Cardio%20Day%202/some.jpg">
<div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">MDN-Array​.prototype​.some()</a></div>

<h3 id="判斷-people-中是否都-19-歲以上"><a href="#判斷-people-中是否都-19-歲以上" class="headerlink" title="判斷 people 中是否都 19 歲以上"></a>判斷 people 中是否都 19 歲以上</h3><h4 id="→-every"><a href="#→-every" class="headerlink" title="→ every()"></a>→ every()</h4><figure class="highlight js"><figcaption><span>Array.prototype.every()</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ans1 = people.every(<span class="function"><span class="params">p</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getUTCFullYear - p.year &gt;= <span class="number">19</span>);</span><br><span class="line"><span class="comment">//every() 方法會測試陣列中的[所有]元素是否都通過了由給定之函式所實作的測試。</span></span><br><span class="line"><span class="comment">//若回呼函式在處理每一個陣列元素時皆得到 truthy 值，則回傳 true。否則，回傳值為 false。</span></span><br><span class="line"><span class="built_in">console</span>.log(ans1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'↑↑ is everyone 19 or older? ↑↑'</span>);</span><br></pre></td></tr></table></figure>
<img src="/2019/05/09/JS30-07-Array%20Cardio%20Day%202/every.jpg">
<div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank" rel="noopener">MDN-Array​.prototype​.every()</a></div>

<h3 id="找到-comments-中-id-是-823423-的資料"><a href="#找到-comments-中-id-是-823423-的資料" class="headerlink" title="找到 comments 中 id 是 823423 的資料"></a>找到 comments 中 id 是 823423 的資料</h3><h4 id="→-find"><a href="#→-find" class="headerlink" title="→ find()"></a>→ find()</h4><figure class="highlight js"><figcaption><span>Array.prototype.find()</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//find() 方法會回傳第一個滿足所提供之測試函式的元素值。否則回傳 undefined。</span></span><br><span class="line"><span class="comment">//若元素通過測試則為其值；否則為 undefined。</span></span><br><span class="line"><span class="keyword">const</span> ans2 = comments.find(<span class="function"><span class="params">comment</span> =&gt;</span> comment.id === <span class="number">823423</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ans2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'↑↑ find the comment with the ID of 823423 ↑↑'</span>);</span><br></pre></td></tr></table></figure>
<img src="/2019/05/09/JS30-07-Array%20Cardio%20Day%202/find.jpg">
<div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/find" target="_blank" rel="noopener">MDN-Array​.prototype​.find()</a></div>

<h3 id="找出-comments-中-id-是-823423-的索引值"><a href="#找出-comments-中-id-是-823423-的索引值" class="headerlink" title="找出 comments 中 id 是 823423 的索引值"></a>找出 comments 中 id 是 823423 的索引值</h3><h4 id="→-findIndex"><a href="#→-findIndex" class="headerlink" title="→ findIndex()"></a>→ findIndex()</h4><figure class="highlight js"><figcaption><span>Array.prototype.findIndex()</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ans3 = comments.findIndex(<span class="function"><span class="params">comment</span> =&gt;</span> comment.id === <span class="number">823423</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ans3);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'↑↑ Find the comment 位置 with this ID of 823423 ↑↑'</span>);</span><br></pre></td></tr></table></figure>
<img src="/2019/05/09/JS30-07-Array%20Cardio%20Day%202/findindex.jpg">
<div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/find​Index" target="_blank" rel="noopener">MDN-Array​.prototype​.find​Index()</a></div>

<h3 id="刪除-comments-中-id-是-823423-的資料"><a href="#刪除-comments-中-id-是-823423-的資料" class="headerlink" title="刪除 comments 中 id 是 823423 的資料"></a>刪除 comments 中 id 是 823423 的資料</h3><h4 id="→-slice"><a href="#→-slice" class="headerlink" title="→ slice()"></a>→ slice()</h4><ul>
<li>slice 為 淺拷貝（shallow copy），不影響原陣列資料(取得新的陣列資料)。</li>
</ul>
<figure class="highlight js"><figcaption><span>Array.prototype.slice()</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ans4 = comments.slice(<span class="number">0</span>, ans3); <span class="comment">//切ans3之前的</span></span><br><span class="line"><span class="keyword">const</span> ans5 = comments.slice(ans3 + <span class="number">1</span>); <span class="comment">//切ans3之後的</span></span><br><span class="line"><span class="keyword">const</span> ans6 = [...ans4, ...ans5]; <span class="comment">//然後再合併  [Spread syntax(展開語法)]</span></span><br><span class="line"><span class="built_in">console</span>.log(ans6, comments);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'↑↑ delete the comment with the ID of 823423 (用slice做)   ↑↑'</span>);</span><br></pre></td></tr></table></figure>
<img src="/2019/05/09/JS30-07-Array%20Cardio%20Day%202/slice.jpg">
<div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">MDN-Array​.prototype​.slice()</a></div>

<h4 id="→-splice"><a href="#→-splice" class="headerlink" title="→ splice()"></a>→ splice()</h4><ul>
<li>splice 為 直接處理現有的陣列資料</li>
</ul>
<figure class="highlight js"><figcaption><span>Array.prototype.splice()</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ans8 = comments.splice(ans3, <span class="number">1</span>); <span class="comment">//ans8就是刪掉的東西，沒留就不見了。</span></span><br><span class="line"><span class="built_in">console</span>.log(comments);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'↑↑ delete the comment with the ID of 823423 (用splice做) ↑↑'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ans8);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'↑↑ 被刪掉的東西 ↑↑'</span>);</span><br></pre></td></tr></table></figure>
<img src="/2019/05/09/JS30-07-Array%20Cardio%20Day%202/splice.jpg">
<img src="/2019/05/09/JS30-07-Array%20Cardio%20Day%202/delete.jpg">
<div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">MDN-Array​.prototype​.splice()</a></div>
]]></content>
      <categories>
        <category>JS</category>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - 從零開始 Day2</title>
    <url>/2019/07/21/JS-Starting%20from%20scratch%20D2/</url>
    <content><![CDATA[<h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><a id="more"></a>
<h3 id="範例-9"><a href="#範例-9" class="headerlink" title="範例 9"></a>範例 9</h3><ol>
<li>流程<br>(1) 捲動 =&gt; 那一塊 =&gt; addClass<br>(2) 按鈕 =&gt; 那一塊 =&gt; 捲動(1)<br>(3) 回到頂端 =&gt; 捲最上(1)</li>
<li>卷軸往下 1px 內容往上 1px</li>
<li>offset(全域座標) vs position(區塊座標)</li>
<li>寬高比較<br>(1) width(),height() DOM 內容寬高<br>(2) innerWidth(),innerHeight() DOM 內容寬高+padding 寬高<br>(3) outerWidth(),outerHeight() DOM 內容寬高+padding 寬高+border 寬高<br>(4) outerWidth(true),outerHeight(true) DOM 內容寬高+padding 寬高+border 寬高+margin 寬高</li>
<li>function 中斷不能用 break 要用 return false</li>
</ol>
<h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 點goTop一下</span></span><br><span class="line">$(<span class="string">"#goTop"</span>).click();</span><br><span class="line"><span class="comment">// 做click事件偵聽</span></span><br><span class="line">$(<span class="string">"#goTop"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>
<p>***forEach vs each<br>forEach((obj,index)=&gt;{})<br>each((index,obj)=&gt;{})</p>
<p>eq : 等於</p>
<h3 id="動畫-animate"><a href="#動畫-animate" class="headerlink" title="動畫 : animate"></a>動畫 : animate</h3><ol>
<li>normal: animate(動畫屬性,時間,加減速,完成後的 FUNCTION)</li>
<li>advence: animate(動畫屬性,設定)</li>
</ol>
<p>*建議用第二種用法，需要打到比較多屬性英文，幫助更多了解及記憶</p>
<p>*事件偵聽要先有偵聽，之後才能觸發</p>
<h4 id="JQUERY"><a href="#JQUERY" class="headerlink" title="JQUERY"></a>JQUERY</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 請輸入你的程式</span></span><br><span class="line">  <span class="keyword">let</span> $contents = $(<span class="string">"#container &gt; section"</span>);</span><br><span class="line">  <span class="keyword">let</span> completeHandler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"OK"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 做click事件偵聽</span></span><br><span class="line">  $(<span class="string">"#goTop"</span>)</span><br><span class="line">    .click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 1.normal: animate(動畫屬性,時間,加減速,完成後的FUNCTION)</span></span><br><span class="line">      <span class="comment">// 2.advence: animate(動畫屬性,設定)</span></span><br><span class="line">      <span class="comment">// $("html,body").animate(&#123; scrollTop: 0 &#125;, 1000, "linear", completeHandler);</span></span><br><span class="line">      $(<span class="string">"html,body"</span>).animate(</span><br><span class="line">        &#123; <span class="attr">scrollTop</span>: <span class="number">0</span> &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          duration: <span class="number">1000</span>,</span><br><span class="line">          easing: <span class="string">"linear"</span></span><br><span class="line">          <span class="comment">// complete: completeHandler</span></span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;)</span><br><span class="line">    .click();</span><br><span class="line">  <span class="comment">// 點goTop一下(觸發)</span></span><br><span class="line">  <span class="comment">// $("#goTop").click();</span></span><br><span class="line"></span><br><span class="line">  $(<span class="built_in">window</span>)</span><br><span class="line">    .scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> top = $(<span class="built_in">window</span>).scrollTop() + $(<span class="string">"#nav"</span>).outerHeight(<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">let</span> bottom = $(<span class="built_in">window</span>).scrollTop() + $(<span class="built_in">window</span>).height();</span><br><span class="line">      <span class="keyword">let</span> target = <span class="number">0</span>;</span><br><span class="line">      $contents.each(<span class="function">(<span class="params">index, section</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> sectionTop = $(section).offset().top;</span><br><span class="line">        <span class="keyword">let</span> secBottom = $(section).offset().top + $(section).outerHeight(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// width() ,height() DOM 內容寬高</span></span><br><span class="line">        <span class="comment">// innerWidth() ,innerHeight() DOM 內容寬高 + padding 寬高</span></span><br><span class="line">        <span class="comment">// outerWidth() ,outerHeight() DOM 內容寬高 + padding 寬高 + border 寬高</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// outerWidth(true) ,outerHeight(true)</span></span><br><span class="line">        <span class="comment">// DOM 內容寬高 + padding 寬高 + border 寬高 + margin 寬高</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sectionTop &gt;= top &amp;&amp; secBottom &gt;= top) &#123;</span><br><span class="line">          target = index;</span><br><span class="line">          <span class="comment">// 中斷</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      $(<span class="string">".nav &gt; a"</span>)</span><br><span class="line">        .removeClass(<span class="string">"active"</span>)</span><br><span class="line">        .eq(target)</span><br><span class="line">        .addClass(<span class="string">"active"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .scroll();</span><br><span class="line">  $(<span class="string">".nav &gt; a"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this =&gt; 按到的按鈕 =&gt; js對象</span></span><br><span class="line">    <span class="comment">// $(this) =&gt; jq對象</span></span><br><span class="line">    <span class="keyword">let</span> index = $(<span class="keyword">this</span>).index(); <span class="comment">// 按鈕編號</span></span><br><span class="line">    <span class="keyword">let</span> $target = $(<span class="string">"#container &gt; section"</span>).eq(index);</span><br><span class="line">    <span class="keyword">let</span> position = $target.offset().top - $(<span class="string">"#nav"</span>).outerHeight(<span class="literal">true</span>);</span><br><span class="line">    $(<span class="string">"html,body"</span>).animate(&#123; <span class="attr">scrollTop</span>: position &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// $(".nav a")</span></span><br><span class="line">  <span class="comment">//   .eq(0)</span></span><br><span class="line">  <span class="comment">//   .addClass("active");</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown常用寫法紀錄</title>
    <url>/2021/07/20/MarkDownWrite/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p>將常用的 MarkDown 紀錄在這，</p>
<p><code>Ctrl + C</code> 、 <code>Ctrl + V</code></p>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="文字加顏色"><a href="#文字加顏色" class="headerlink" title="文字加顏色"></a>文字加顏色</h2><font color="blue">藍色字</font>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font color=&quot;blue&quot;&gt;藍色字&lt;/font&gt;</span><br></pre></td></tr></table></figure>
<font color="red">紅色的字</font>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font color=&quot;red&quot;&gt;紅色的字&lt;/font&gt;</span><br></pre></td></tr></table></figure>
<font style="color:#f90;font-size:20px;">20px 的字</font>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;font style=&quot;color:#f90;font-size:20px;&quot;&gt;20px的字&lt;/font&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://xiwan.io/archive/markdown-html-common-syntax-summary.html" target="_blank" rel="noopener">MARKDOWN/HTML 常用語法小結</a></p>
</blockquote>
<hr>
<h2 id="自定義樣式"><a href="#自定義樣式" class="headerlink" title="自定義樣式"></a>自定義樣式</h2><div class="note info">下列 自定義樣式，參考 <a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html#好玩的写作样式" target="_blank" rel="noopener">超深度优化</a><br></div>

<h3 id="文本置中引用"><a href="#文本置中引用" class="headerlink" title="文本置中引用"></a>文本置中引用</h3><blockquote class="blockquote-center"><p>我不是一個偉大的程式設計師,我只是一個具有良好習慣的優秀程式設計師。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;</span><br><span class="line">我不是一個偉大的程式設計師,我只是一個具有良好習慣的優秀程式設計師。</span><br><span class="line">&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数字塊"><a href="#数字塊" class="headerlink" title="数字塊"></a>数字塊</h3><p><span id="inline-toc">1.</span>左邊是效果。<br><span id="inline-toc">2.</span>我是第二行。</p>
<figure class="highlight html"><figcaption><span>客制 CSS 文件位置：~/blog/themes/next/source/css/\_custom/custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-toc"</span>&gt;</span>1.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-toc"</span>&gt;</span>2.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<h3 id="label標籤"><a href="#label標籤" class="headerlink" title="label標籤"></a>label標籤</h3><span class="label default">default</span>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-variable">&#123;% label <span class="keyword">default</span>@<span class="keyword">default</span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">`</span></span><br></pre></td></tr></table></figure>
<span class="label primary">primary</span>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-variable">&#123;% label primary@primary %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<span class="label success">success</span>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-variable">&#123;% label success@success %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<span class="label info">info</span>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-variable">&#123;% label info@info %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<span class="label warning">warning</span>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-variable">&#123;% label warning@warning %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<span class="label danger">danger</span>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-variable">&#123;% label danger@danger %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<h3 id="note-標籤"><a href="#note-標籤" class="headerlink" title="note 標籤"></a>note 標籤</h3><div class="note default no-icon">default no-icon</div>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note default no-icon"</span>&gt;</span>default no-icon<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div class="note default">default</div>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note default"</span>&gt;</span>default<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div class="note primary">primary</div>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note primary"</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div class="note success">success</div>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note success"</span>&gt;</span>success<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div class="note info">info</div>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note info"</span>&gt;</span>info<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div class="note warning">warning</div>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note warning"</span>&gt;</span>warning<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div class="note danger">danger</div>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"note danger"</span>&gt;</span>danger<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote class="question">内容</blockquote>

<figure class="highlight html"><figcaption><span>客制 CSS 文件位置：~/blog/themes/next/source/css/\_custom/custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"question"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><h3 id="行內"><a href="#行內" class="headerlink" title="行內"></a>行內</h3><p><code>height: 50px;</code></p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="code">`height: 50px;`</span></span><br></pre></td></tr></table></figure>
<h3 id="區段"><a href="#區段" class="headerlink" title="區段"></a>區段</h3><figure class="highlight md"><figcaption><span>區段寫法</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="code">```[language] [title] [url] [link-text]</span></span><br><span class="line"><span class="code">- [language] 是代碼語言的名稱，用來設置代碼塊顏色高亮，非必須；</span></span><br><span class="line"><span class="code">- [title] 是頂部左邊的說明，非必須；</span></span><br><span class="line"><span class="code">- [url] 是頂部右邊的超鏈接地址，非必須；</span></span><br><span class="line"><span class="code">- [link text] 如它的字面意思，超鏈接的名稱，非必須。</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>
<p>上述 4 項應該是根據 <span class="label success">空格</span> 來分隔，而不是 <code>[]</code>，故請不要加 <code>[]</code>。<br>除非如果你想寫後面兩個，但不想寫前面兩個，那麼就必須加 <code>[]</code> 了，<br>要這樣寫： <code>[] [] [url] [link text]</code>。</p>
<p>MarkDown 寫法：</p>
<figure class="highlight plain"><figcaption><span>CSS</span></figcaption><table><tr><td class="code"><pre><span class="line">``` CSS</span><br><span class="line">.container &#123;</span><br><span class="line">    max-width: 960px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    /* 起手式 */</span><br><span class="line">    margin-top: 10px;`</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>js</span></figcaption><table><tr><td class="code"><pre><span class="line">``` js</span><br><span class="line">.container &#123;</span><br><span class="line">    function checkList(e) &#123;</span><br><span class="line">        var num = e.target.dataset.num;</span><br><span class="line">        // console.log(e.target.nodeName);</span><br><span class="line">        if (e.target.nodeName !== &apos;LI&apos;) &#123;</span><br><span class="line">            return</span><br><span class="line">        &#125;;</span><br><span class="line">        country.splice(num, 1);</span><br><span class="line">        updateList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<div class="note info">可支援的語法： <a href="https://almostover.ru/2016-07/hexo-highlight-code-styles/" target="_blank" rel="noopener">連結</a></div>

<hr>
<h2 id="插入圖片"><a href="#插入圖片" class="headerlink" title="插入圖片"></a>插入圖片</h2><hr>
<h3 id="內部圖片"><a href="#內部圖片" class="headerlink" title="內部圖片"></a>內部圖片</h3><img src="/2021/07/20/MarkDownWrite/volt.png" title="logo">
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img volt.png logo %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="外部圖片"><a href="#外部圖片" class="headerlink" title="外部圖片"></a>外部圖片</h3><p><img src="https://www.hcltechsw.com/wps/wcm/connect/1c45dcab-d739-443a-a422-43f95305d2d1/HCL_Domino.svg?MOD=AJPERES&amp;CACHEID=ROOTWORKSPACE-1c45dcab-d739-443a-a422-43f95305d2d1-nFYgVVT" alt="HCL Domino"></p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![<span class="string">HCL Domino</span>](<span class="link">https://www.hcltechsw.com/wps/wcm/connect/1c45dcab-d739-443a-a422-43f95305d2d1/HCL_Domino.svg?MOD=AJPERES&amp;CACHEID=ROOTWORKSPACE-1c45dcab-d739-443a-a422-43f95305d2d1-nFYgVVT</span>)</span><br></pre></td></tr></table></figure>
<h2 id="文字超連結"><a href="#文字超連結" class="headerlink" title="文字超連結"></a>文字超連結</h2><hr>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<p>Google 連結：<a href="https://www.google.com.tw/" target="_blank" rel="noopener">Google</a></p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">More info: [<span class="string">Writing</span>](<span class="link">https://hexo.io/docs/writing.html</span>)</span><br><span class="line"></span><br><span class="line">Google 連結：[<span class="string">Google</span>](<span class="link">https://www.google.com.tw/</span>)</span><br></pre></td></tr></table></figure>
<h2 id="項目標籤"><a href="#項目標籤" class="headerlink" title="項目標籤"></a>項目標籤</h2><hr>
<h3 id="符號"><a href="#符號" class="headerlink" title="符號"></a>符號</h3><ul>
<li>序列 1</li>
<li>序列 2</li>
<li>序列 3</li>
</ul>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>序列 1</span><br><span class="line"><span class="bullet">- </span>序列 2</span><br><span class="line"><span class="bullet">- </span>序列 3</span><br></pre></td></tr></table></figure>
<h3 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h3><ul>
<li style="list-style: none"><input type="checkbox"> 序列 1</li>
<li style="list-style: none"><input type="checkbox"> 序列 2</li>
<li style="list-style: none"><input type="checkbox"> 序列 3</li>
<li style="list-style: none"><input type="checkbox"> 序列 4</li>
</ul>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] 序列 1</span><br><span class="line"><span class="bullet">- </span>[ ] 序列 2</span><br><span class="line"><span class="bullet">- </span>[ ] 序列 3</span><br><span class="line"><span class="bullet">- </span>[ ] 序列 4</span><br></pre></td></tr></table></figure>
<h3 id="數字"><a href="#數字" class="headerlink" title="數字"></a>數字</h3><ol>
<li>序列 1</li>
<li>序列 2</li>
<li>序列 3</li>
<li>序列 4</li>
</ol>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.  </span>序列 1</span><br><span class="line"><span class="bullet">2.  </span>序列 2</span><br><span class="line"><span class="bullet">3.  </span>序列 3</span><br><span class="line"><span class="bullet">4.  </span>序列 4</span><br></pre></td></tr></table></figure>
<h2 id="重點標示"><a href="#重點標示" class="headerlink" title="重點標示"></a>重點標示</h2><p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>
<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>
<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Strong emphasis, aka bold, with <span class="strong">**asterisks**</span> or <span class="strong">**underscores**</span>.</span><br><span class="line"></span><br><span class="line">Combined emphasis with <span class="strong">**asterisks and _underscores_*</span>*.</span><br><span class="line"></span><br><span class="line">Strikethrough uses two tildes. ~~Scratch this.~~</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 Start</title>
    <url>/2021/07/20/Vue3-01/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/07/20/Vue3-01/zMu6v6x.png"></p>
<font style="font-size:20px;">資料驅動畫面</font>
</blockquote>
<a id="more"></a>
<p><a href="https://v3.vuejs.org/guide/installation.html#vue-devtools" target="_blank" rel="noopener">CDN 連結</a><br>語法：<code>&lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;</code><br>請務必記下來，以下三個值，在後續開發會一直出現：</p>
<blockquote>
<p>起手式 1：data 資料邏輯<br>起手式 2：methods 方法<br>起手式 3：mounted 生命週期</p>
</blockquote>
<h3 id="關注點分離"><a href="#關注點分離" class="headerlink" title="關注點分離"></a>關注點分離</h3><img src="/2021/07/20/Vue3-01/zMu6v6x.png">
<div class="note primary">重要觀念：先定義資料，才能在 html 中使用</div>

<p>範例程式碼：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 這裡是 html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  &#123;&#123; text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 這裡是 Vue</span></span><br><span class="line">Vue.createApp(&#123;</span><br><span class="line">  <span class="comment">// data 函式</span></span><br><span class="line">  data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 一定是用 return</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      text: <span class="string">"卡斯伯好帥"</span>,</span><br><span class="line">      name: <span class="string">"小明"</span>,</span><br><span class="line">      num: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// methods 方法</span></span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  <span class="comment">// mounted 函式</span></span><br><span class="line">  mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;).mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul>
<li><p>v-model：和 html 雙向綁定 data 資料（會同步兩邊資料）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"num"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>v-bind：在 html 標籤上進行屬性綁定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"person.image"</span> <span class="attr">:alt</span>=<span class="string">"person.name"</span> <span class="attr">width</span>=<span class="string">"100"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>省略語法：直接在屬性前加上 <code>:</code> 省略 <code>v-bind</code></p>
</li>
<li>v-if：將判斷式寫入 <code>&quot;&quot;</code> 中，若是 true 則會顯示，false 則不會顯示</li>
<li>v-else：不用加判斷式，但需要搭配 v-if 一起使用（若要還需要判斷，則使用 v-else-if）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">v-if</span>=<span class="string">"person.gender === 'male'"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">v-else-if</span>=<span class="string">"person.gender === 'female'"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">v-else</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div class="note primary">v-if 和 v-else 要搭配一起使用才會有效果</div><br>- v-for：多筆資料透過迴圈方式將資料迭代出來<br><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in people"</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.image"</span> <span class="attr">:alt</span>=<span class="string">"item.name"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-if</span>=<span class="string">"item.gender === 'male'"</span> <span class="attr">class</span>=<span class="string">"bi bi-gender-male"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">"bi bi-gender-male"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.cash &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>- people Array<br><br>  - people 是 data 中的陣列<br>  - item 代表 people 中，每一個獨立的物件， item 可自定義名稱<br>  - v-for 必須帶 key<br>  - 示意圖：<img src="/2021/07/20/Vue3-01/EHNwlax.png"><br><br>- @click<br><br>  - 在 DOM 元素上加入監聽事件，下方示範 vue 監聽事件以及 jQuery 監聽事件差異<br><br>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 這是 jQuery 的寫法</span></span><br><span class="line">$(<span class="string">`#button`</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><br><br>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  這是 Vue 在 html 上綁定事件的做法  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"item.cash++"</span>&gt;</span></span><br><span class="line">  增加</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>- methods 函式<br><br>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 這是 Vue 透過 methods 給函式</span></span><br><span class="line">methods: &#123;</span><br><span class="line">clickAlert() &#123; <span class="comment">// 建議可以縮寫就縮寫（提升程式碼閱讀性）</span></span><br><span class="line">  alert(<span class="string">'我被觸發了'</span>);</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>- mounted 生命週期<br><br>  - 使用 this 方式取 data 的值<br><br>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted: funtcion() &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">this</span>.text);</span><br><span class="line"> <span class="comment">// this.clickAlert();</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line"> <span class="comment">// this 本身是個很複雜的知識，但在 Vue 中把它簡單化了。</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">this</span>.person.image);</span><br><span class="line"> <span class="comment">// 修改資料範例</span></span><br><span class="line"> <span class="keyword">this</span>.text = <span class="string">'我叫小賀'</span></span><br><span class="line"> <span class="comment">// Ajax 取的的資料放在這邊</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br>  - 網頁載入後只會執行一次，適合做初始化<br><br>### 延伸知識<br><br>- 範例<br><br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line"> &#123;&#123; text &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><br><br>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      text: <span class="string">"我叫卡斯伯"</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  mounted() &#123;&#125;</span><br><span class="line">&#125;).mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure><br><br>  <img src="/2021/07/20/Vue3-01/pzMahpd.png"><br><br>一般：<br><br>- 整包載入<br>  ESModule： vuecli 也是使用 ESM<br>- 單一模組<br>- 是分別獨立的一個一個方法，ex：createApp、ref、reactive<br><br>&gt; 擇一使用，不會同時使用兩種載入方法，建議使用 ESModule 的載入方法。<br><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  imoport &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'url'</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br><div class="note danger">ESM 如果沒有加 type=”module” 使用 import/export 會報錯</div>
]]></content>
      <categories>
        <category>VueJS</category>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-移植步驟紀錄 及 部署指令</title>
    <url>/2021/07/21/HexoBackupSolution/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/07/21/HexoBackupSolution/hexo-cover.png"></p>
<font style="font-size:20px;">換電腦必備</font></blockquote>
<a id="more"></a>
<h2 id="環境檢查"><a href="#環境檢查" class="headerlink" title="環境檢查"></a>環境檢查</h2><blockquote>
<p>是否有安裝 git</p>
</blockquote>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure>
<blockquote>
<p>是否有安裝 node.js</p>
</blockquote>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure>
<blockquote>
<p>是否有安裝 hexo</p>
</blockquote>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure>
<h2 id="在新環境初始化-hexo"><a href="#在新環境初始化-hexo" class="headerlink" title="在新環境初始化 hexo"></a>在新環境初始化 hexo</h2><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ hexo init 資料夾名稱  ＃建立一個資料夾（最好跟你原本hexo的資料夾同名）</span><br><span class="line">$ <span class="built_in">cd</span> 資料夾名稱 ＃進入該資料夾下</span><br></pre></td></tr></table></figure>
<h2 id="將備份檔案複製到新環境"><a href="#將備份檔案複製到新環境" class="headerlink" title="將備份檔案複製到新環境"></a>將備份檔案複製到新環境</h2><p>除了 node_mudules 外，其他檔案都複製過去<br>因為 node_mudules 是存放 library，在執行 npm init 時會裝回來；</p>
<p>複製完畢後，執行以下指令</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ npm init</span><br><span class="line">$ npm install hexo-deploy-git --save</span><br><span class="line">$ npm install hexo-generator-feed --save</span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>
<h2 id="本地端運行"><a href="#本地端運行" class="headerlink" title="本地端運行"></a>本地端運行</h2><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ hexo s --debug <span class="comment">#應可透過本機 http://localhost:4001 看到你的hexo環境</span></span><br></pre></td></tr></table></figure>
<h2 id="編譯出靜態網頁"><a href="#編譯出靜態網頁" class="headerlink" title="編譯出靜態網頁"></a>編譯出靜態網頁</h2><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<h2 id="部署到-github"><a href="#部署到-github" class="headerlink" title="部署到 github"></a>部署到 github</h2><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ hexo d <span class="comment">#注意有時須等待github完成部署，可能須等待1~5分鐘不等</span></span><br></pre></td></tr></table></figure>
<h2 id="若部署遇到問題"><a href="#若部署遇到問題" class="headerlink" title="若部署遇到問題"></a>若部署遇到問題</h2><ul>
<li>升級 git 版本</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ brew upgrade git <span class="comment">#可能會遇到問題，看Ｔerminal訊息排除</span></span><br></pre></td></tr></table></figure>
<ul>
<li>改用 ssh key 部署<br>參考此網頁資訊建立 ssh key =&gt; <a href="https://www.cnblogs.com/xsilence/%5B/6001938.html" target="_blank" rel="noopener">建立步驟</a></li>
</ul>
<h2 id="指令集整理"><a href="#指令集整理" class="headerlink" title="指令集整理"></a>指令集整理</h2><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"postName"</span>  <span class="comment">#新建文章</span></span><br><span class="line">$ hexo clean <span class="comment">#清除快取</span></span><br><span class="line">$ hexo generate <span class="comment">#生成靜態頁面至public目錄</span></span><br><span class="line">$ hexo server <span class="comment">#開啟預覽訪問端口（默認端口4000，'ctrl + c'關閉server）</span></span><br><span class="line">$ hexo deploy  <span class="comment">#將.deploy目錄部署到GitHub</span></span><br><span class="line">$ hexo <span class="built_in">help</span>   <span class="comment">#查看幫助</span></span><br><span class="line">$ hexo version   <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure>
<p>指令簡寫</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>github SSH keys 建立步驟記錄</title>
    <url>/2021/07/22/sshKey-Create/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/07/22/sshKey-Create/sshkeys.jpeg"></p>
<font style="font-size:20px;"></font></blockquote>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>移植Ｈ exo 環境時遇到部署失敗，谷歌了一下也有人遇到太久沒部署出錯，可嘗試設置 SSH Key 做部署，<br>怕以後還會遇到，故將過程記錄下來。<br><a href="https://www.cnblogs.com/xsilence/%5B/6001938.html/" target="_blank" rel="noopener">參考連結</a></p>
<h2 id="新建立-SSH-key"><a href="#新建立-SSH-key" class="headerlink" title="新建立 SSH key"></a>新建立 SSH key</h2><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"github帳號"</span></span><br></pre></td></tr></table></figure>
<p>輸入密碼後便會自動產生，應該會看到類似畫面：<br><img src="/2021/07/22/sshKey-Create/Snipaste_2021-07-22_01-37-15.png"></p>
<h2 id="在-github-上設定-SSH-key"><a href="#在-github-上設定-SSH-key" class="headerlink" title="在 github 上設定 SSH key"></a>在 github 上設定 SSH key</h2><p>使用以下指令可看到 SSH key 內容，複製下來做設定</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<img src="/2021/07/22/sshKey-Create/GitHub.png">
<img src="/2021/07/22/sshKey-Create/Your_Profile.png">
<img src="/2021/07/22/sshKey-Create/SSH_and_GPG_keys.png">
<img src="/2021/07/22/sshKey-Create/Add_new_SSH_keys.png">
<h2 id="測試設定是否成功"><a href="#測試設定是否成功" class="headerlink" title="測試設定是否成功"></a>測試設定是否成功</h2><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>若看到以下訊息代表成功！！<br><img src="/2021/07/22/sshKey-Create/bryanhsiao_BryanHsiao-mac13____bryanhsiao_和_index_html_—_Vue3.png"></p>
<h2 id="設定使用者資訊"><a href="#設定使用者資訊" class="headerlink" title="設定使用者資訊"></a>設定使用者資訊</h2><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"輸入使用者名稱"</span></span><br><span class="line">$ git config --global user.email <span class="string">"輸入email"</span></span><br></pre></td></tr></table></figure>
<h2 id="部署至-github"><a href="#部署至-github" class="headerlink" title="部署至 github"></a>部署至 github</h2><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>
<p>部署成功！！<br><img src="/2021/07/22/sshKey-Create/bryanhsiao_BryanHsiao-mac13____bryanhsiao_和_2021-07-22-sshKey-Create_md_—__posts.png"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 與 指令</title>
    <url>/2021/07/23/vue3-02/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/07/23/vue3-02/vue-02.png"></p>
<font style="font-size:20px;"></font>
</blockquote>
<a id="more"></a>
<h2 id="Vue-常用指令"><a href="#Vue-常用指令" class="headerlink" title="Vue 常用指令"></a>Vue 常用指令</h2><h3 id="v-model-修飾符"><a href="#v-model-修飾符" class="headerlink" title="v-model 修飾符"></a>v-model 修飾符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model.number=&quot;number&quot; &gt;</span><br><span class="line">  &#123;&#123; number &#125;&#125;</span><br><span class="line">  &#123;&#123; typeof number &#125;&#125;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;number2&quot;&gt;</span><br><span class="line">  &#123;&#123; number2 &#125;&#125;</span><br><span class="line">  &#123;&#123; typeof number2 &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>lazy：編輯完成後，會觸發更新資料（離開 focus 的時候）</li>
<li>number：限制只有數值型別的資料才能寫入<br><code>v-model</code> 預設是字串型別</li>
<li>trim：去除字串前後多於的空白</li>
</ul>
<h3 id="v-on：事件觸發器"><a href="#v-on：事件觸發器" class="headerlink" title="v-on：事件觸發器"></a>v-on：事件觸發器</h3><blockquote>
<p>最常用：prevent（去除預設事件）</p>
</blockquote>
<h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><blockquote>
<p>縮寫：<code>：</code></p>
</blockquote>
<h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><blockquote>
<p>key 唯一且必填</p>
</blockquote>
<p>當 input 輸入內容後，按下反轉陣列時：</p>
<ul>
<li>如果沒有 key 時，則 input 位置不會被同時更動</li>
<li>當有加上 key 時，input 位置會與原本的資料內容位置一起變動</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;h4&gt;缺少 key&lt;/h4&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(item, key) in arrayData&quot;&gt;</span><br><span class="line">      &#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲 &lt;input type=&quot;text&quot; /&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h4&gt;加上 key&lt;/h4&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(item, key) in arrayData&quot; :key=&quot;item.age&quot;&gt;</span><br><span class="line">      &#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲 &lt;input type=&quot;text&quot; /&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;button class=&quot;btn btn-outline-primary&quot; @click=&quot;reverseArray&quot;&gt;</span><br><span class="line">    反轉陣列</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      arrayData: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"Bryan"</span>,</span><br><span class="line">          age: <span class="number">35</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"Coco"</span>,</span><br><span class="line">          age: <span class="number">40</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"Den"</span>,</span><br><span class="line">          age: <span class="number">41</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reverseArray: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.arrayData.reverse();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.arrayData);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vue.createApp(app).mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure>
<img src="/2021/07/23/vue3-02/Document-3.png">
<img src="/2021/07/23/vue3-02/Document-2.png">
<h3 id="v-class"><a href="#v-class" class="headerlink" title="v-class"></a>v-class</h3><blockquote>
<p>範例一 按鈕樣式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button</span><br><span class="line">  type=&quot;button&quot;</span><br><span class="line">  class=&quot;btn btn-outline-primary&quot;</span><br><span class="line">  :class=&quot;&#123;active: isActive&#125;&quot;</span><br><span class="line">  @click=&quot;isActive = !isActive&quot;</span><br><span class="line">&gt;</span><br><span class="line">  Primary</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isActive: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vue.createApp(app).mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>範例二 頁籤切換</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;ul class=&quot;nav nav-tabs&quot; id=&quot;myTab&quot; role=&quot;tablist&quot;&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot; role=&quot;presentation&quot;&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        class=&quot;nav-link&quot;</span><br><span class="line">        :class=&quot;&#123;active: isActive === &apos;Home&apos;&#125;&quot;</span><br><span class="line">        @click=&quot;isActive = &apos;Home&apos;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        Home</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot; role=&quot;presentation&quot;&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        class=&quot;nav-link&quot;</span><br><span class="line">        :class=&quot;&#123;active: isActive === &apos;Profile&apos;&#125;&quot;</span><br><span class="line">        @click=&quot;isActive = &apos;Profile&apos;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        Profile</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot; role=&quot;presentation&quot;&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        class=&quot;nav-link&quot;</span><br><span class="line">        :class=&quot;&#123;active: isActive === &apos;Casper&apos;&#125;&quot;</span><br><span class="line">        @click=&quot;isActive = &apos;Casper&apos;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        Casper</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;div class=&quot;tab-content&quot; id=&quot;myTabContent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;tab-pane&quot; :class=&quot;&#123;active: isActive === &apos;Home&apos;&#125;&quot;&gt;Home&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;tab-pane&quot; :class=&quot;&#123;active: isActive === &apos;Profile&apos;&#125;&quot;&gt;</span><br><span class="line">      Profile</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;tab-pane&quot; :class=&quot;&#123;active: isActive === &apos;Casper&apos;&#125;&quot;&gt;</span><br><span class="line">      Casper</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isActive: <span class="string">""</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vue.createApp(app).mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="雙向綁定"><a href="#雙向綁定" class="headerlink" title="雙向綁定"></a>雙向綁定</h2><img src="/2021/07/23/vue3-02/vue-02.png">
<div class="note success">只讀出渲染</div>

<div class="note danger">可讀可寫</div>

<div class="note info">利用事件觸發調整 data，再利用渲染方法渲染到畫面上</div>
]]></content>
      <categories>
        <category>VueJS</category>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>Composition API</title>
    <url>/2021/08/10/vue3-04/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/10/vue3-04/Composition_API.png"></p>
</blockquote>
<a id="more"></a>
<h2 id="Option-API"><a href="#Option-API" class="headerlink" title="Option API"></a>Option API</h2><ul>
<li>所有功能被依據<strong>程式邏輯</strong>區分</li>
<li>對初學者來說相當<strong>易學</strong></li>
<li>==缺點==：商業、功能邏輯被<strong>拆分</strong>到各處<br><img src="https://i.imgur.com/9UUufnj.png" alt="Option API"><br><em>圖片展示 Option 的程式邏輯</em></li>
<li>藍色代表程式邏輯</li>
<li>綠色與紅色分別為同一個功能所需要用的邏輯</li>
</ul>
<h2 id="Option-API-與-Composition-API-的差異"><a href="#Option-API-與-Composition-API-的差異" class="headerlink" title="Option API 與 Composition API 的差異"></a>Option API 與 Composition API 的差異</h2><ul>
<li>而 Composition 改善其缺點，將同一個商業、功能邏輯寫在一起<br><img src="https://i.imgur.com/mfIeYp4.png" alt="比較"><br><em>圖片展示 Composition 與 Option 的差別</em></li>
<li>將分散在各處的功能邏輯集中在一起 (分散在各處的顏色集中在一起)</li>
</ul>
<h2 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h2><ul>
<li>全部整合進<code>setup</code>內</li>
<li>高度的彈性</li>
<li>基於既有的 JS 知識開發</li>
<li>方便引入函式庫<br><img src="https://i.imgur.com/epx27MG.png" alt="Composition API"><br><em>圖片展示 Composition 的寫法</em></li>
<li>所有功能邏輯都各自寫好，不會分散各地</li>
</ul>
<h2 id="Vue-的-this-指向"><a href="#Vue-的-this-指向" class="headerlink" title="Vue 的 this 指向"></a>Vue 的 this 指向</h2><ul>
<li>Proxy 是 Vue 在做雙向綁定的重要結構</li>
<li>在 Option API 可以不知道他</li>
<li>但在 Composition API 他還蠻重要的</li>
<li>資料都會藏在 Target 裡面<br><img src="https://i.imgur.com/ToIog5E.png" alt="this"></li>
</ul>
<h2 id="複習-ESM"><a href="#複習-ESM" class="headerlink" title="複習 ESM"></a>複習 ESM</h2><p><a href="https://cdnjs.com/libraries/vue" target="_blank" rel="noopener">CDN 連結</a><br><code>https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.0-beta.7/vue.esm-browser.min.js</code></p>
<p><img src="https://i.imgur.com/Rc0cV7M.png" alt="ESM"><br><em>ESM 比較能依據自己需求來引入所需的功能</em></p>
<h2 id="Composition-API-起手式"><a href="#Composition-API-起手式" class="headerlink" title="Composition API 起手式"></a>Composition API 起手式</h2><h3 id="通常都是使用-ESModule-來操作"><a href="#通常都是使用-ESModule-來操作" class="headerlink" title="通常都是使用 ESModule 來操作"></a>通常都是使用 ESModule 來操作</h3><p>不轉 ESM 也行，但在 composition API 使用 ESM 更符合模組化概念</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &#123;&#123; text &#125;&#125;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;text&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JS</span></span><br><span class="line">&lt;script type=<span class="string">"module"</span>&gt;</span><br><span class="line">    <span class="comment">// 引入 ESM，script 的 type 記得改成 module</span></span><br><span class="line">    <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.0-beta.7/vue.esm-browser.min.js'</span></span><br><span class="line">    <span class="comment">// 用 ESM 就不用 Vue. 開頭</span></span><br><span class="line">    <span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">        <span class="comment">// Composition API 一定會有 setup</span></span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="keyword">const</span> text = <span class="string">'卡斯伯棒棒'</span>;</span><br><span class="line">            <span class="comment">// 需要回傳值，才能在 HTML 使用</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                text</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    app.mount(<span class="string">'#app'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/DecnIjV.png" alt="卡斯伯棒棒"></p>
<h3 id="Composition-API-裡雙向綁定，需要引入ref"><a href="#Composition-API-裡雙向綁定，需要引入ref" class="headerlink" title="Composition API 裡雙向綁定，需要引入ref"></a>Composition API 裡雙向綁定，需要引入<code>ref</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"module"</span>&gt;</span><br><span class="line">    <span class="comment">// 引入 ref</span></span><br><span class="line">    <span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">'https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.0-beta.7/vue.esm-browser.min.js'</span></span><br><span class="line">    <span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="comment">// 使用 ref() 進行雙向綁定</span></span><br><span class="line">            <span class="keyword">const</span> text = ref(<span class="string">'卡斯伯棒棒'</span>);</span><br><span class="line">            <span class="comment">// 需要回傳值，才能在 HTML 使用</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                text</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    app.mount(<span class="string">'#app'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Composition-API-使用函式"><a href="#Composition-API-使用函式" class="headerlink" title="Composition API 使用函式"></a>Composition API 使用函式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"module"</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">'https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.0-beta.7/vue.esm-browser.min.js'</span></span><br><span class="line">    <span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="keyword">const</span> text = ref(<span class="string">'卡斯伯棒棒'</span>);</span><br><span class="line">            <span class="comment">// 新增你需要的函式</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( text )</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 需要回傳值，才能在 HTML 使用</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                text,</span><br><span class="line">                getText,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    app.mount(<span class="string">'#app'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Composition-API-使用生命週期"><a href="#Composition-API-使用生命週期" class="headerlink" title="Composition API 使用生命週期"></a>Composition API 使用生命週期</h2><h3 id="引入-onMounted"><a href="#引入-onMounted" class="headerlink" title="引入 onMounted"></a>引入 onMounted</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"module"</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; createApp, ref, onMounted &#125; <span class="keyword">from</span> <span class="string">'https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.0-beta.7/vue.esm-browser.min.js'</span></span><br><span class="line">    <span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="keyword">const</span> text = ref(<span class="string">'卡斯伯棒棒'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( text )</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 新增生命週期</span></span><br><span class="line">            onMounted(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                getText()</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 需要回傳值，才能在 HTML 使用</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                text,</span><br><span class="line">                getText,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    app.mount(<span class="string">'#app'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="引入-computed"><a href="#引入-computed" class="headerlink" title="引入 computed"></a>引入 computed</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"module"</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; createApp, ref, onMounted, computed &#125; <span class="keyword">from</span> <span class="string">'https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.0-beta.7/vue.esm-browser.min.js'</span></span><br><span class="line">    <span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="keyword">const</span> num = ref(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 新增生命週期</span></span><br><span class="line">            <span class="keyword">const</span> doubleNum = computed(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> num.value * <span class="number">2</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 需要回傳值，才能在 HTML 使用</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                num,</span><br><span class="line">                doubleNum,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    app.mount(<span class="string">'#app'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/LdFcJrh.gif" alt="computed"><br><em>畫面呈現</em></p>
<h2 id="reative-與-ref-的差別"><a href="#reative-與-ref-的差別" class="headerlink" title="reative 與 ref 的差別"></a>reative 與 ref 的差別</h2><p><img src="https://i.imgur.com/5TW4tz8.png" alt="ref &amp; reative"></p>
<h3 id="reative"><a href="#reative" class="headerlink" title="reative"></a>reative</h3><ul>
<li>非常標準的 Proxy 物件</li>
<li>限制只能放物件</li>
<li>覆蓋後會出現不可預期的錯誤</li>
</ul>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul>
<li>沒有任何型別的限制</li>
<li>會依據放入的型別，而有不同的調整</li>
<li>一定要使用<code>.value</code>取值</li>
</ul>
]]></content>
      <categories>
        <category>VueJS</category>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6-箭頭函式 (Arrow functions)</title>
    <url>/2021/08/18/ES6-Arrowfunctions/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/18/ES6-Arrowfunctions/ES6.jpg"></p>
<font style="font-size:20px;">箭頭函式 () =&gt; {} </font>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="簡短的語法"><a href="#簡短的語法" class="headerlink" title="簡短的語法"></a>簡短的語法</h2><p>一般使用箭頭函式與 function 的用法大致一致，可以傳入參數、也有大括號包起來，<br>除此之外箭頭函式也有更簡短的寫法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正常寫法</span></span><br><span class="line"><span class="keyword">var</span> callSomeone = <span class="function"><span class="params">someone</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> someone + <span class="string">"上工了"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(callSomeone(<span class="string">"伙計"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 縮寫，單一行陳述不需要 &#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> callSomeone = <span class="function"><span class="params">someone</span> =&gt;</span> someone + <span class="string">"上工了"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(callSomeone(<span class="string">"伙計"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有一個參數可以不加括號</span></span><br><span class="line"><span class="keyword">var</span> callSomeone = <span class="function"><span class="params">someone</span> =&gt;</span> someone + <span class="string">"上工了"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(callSomeone(<span class="string">"伙計"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 沒有參數時，一定要有括號</span></span><br><span class="line"><span class="keyword">var</span> callSomeone = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">"伙計"</span> + <span class="string">"上工了"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(callSomeone(<span class="string">"伙計"</span>));</span><br></pre></td></tr></table></figure>
<p><span id="inline-toc">注意</span><br>不過這個上述有個小地方也要注意一下，在大括號內的 <font color="red">{}</font> 是需要自行加入 <font color="red">return</font>，<br>如果沒有傳入值則會出現 <font color="red">undefined</font>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> callSomeone = <span class="function"><span class="params">someone</span> =&gt;</span> &#123;</span><br><span class="line">  someone + <span class="string">"上工了"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(callSomeone(<span class="string">"伙計"</span>)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="綁定的-this-不同"><a href="#綁定的-this-不同" class="headerlink" title="綁定的 this 不同"></a>綁定的 this 不同</h2><span class="label info">口訣：</span>
<p>箭頭函式裡面的 this 等於 外面的 this</p>
<span class="label info">白話文：</span>
<p>箭頭函式裡的 this 主要是依據 <font color="red">外層函式(function)裡的 this</font> 是什麼就跟著是什麼。</p>
<p><span id="inline-yellow">規則</span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span> &lt;= 外層函式的<span class="keyword">this</span>，規則參考「一般函式的<span class="keyword">this</span>」</span><br><span class="line">  <span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span> &lt;= 依據外層函式的<span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span id="inline-purple">範例</span></p>
<p>callName 是使用 一般函式<br>callName2 是使用 箭頭函式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"全域阿婆"</span>;</span><br><span class="line"><span class="keyword">var</span> auntie = &#123;</span><br><span class="line">  name: <span class="string">"漂亮阿姨"</span>,</span><br><span class="line">  callName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 注意，這裡是 function，以此為基準產生一個作用域</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"1"</span>, <span class="keyword">this</span>.name); <span class="comment">// 1 漂亮阿姨(外層函式)</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"2"</span>, <span class="keyword">this</span>.name); <span class="comment">// 2 漂亮阿姨(依據外層函式的this)</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"3"</span>, <span class="keyword">this</span>); <span class="comment">// 3 auntie 這個物件(依據外層函式的this)</span></span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  callName2: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 注意，如果使用箭頭函式，this 依然指向 window</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"4"</span>, <span class="keyword">this</span>.name); <span class="comment">// 4 全域阿婆(依據外層函式的this)</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"5"</span>, <span class="keyword">this</span>.name); <span class="comment">// 5 全域阿婆(依據外層函式的this)</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"6"</span>, <span class="keyword">this</span>); <span class="comment">// 6 window 物件(依據外層函式的this)</span></span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">auntie.callName();</span><br><span class="line">auntie.callName2();</span><br></pre></td></tr></table></figure>
<div class="note primary">補充：<br>因為 <font color="red">callName2</font> 的 <font color="red">4</font> 使用箭頭函式，所以 <font color="red">依據外層函式的this</font> 的規則，就指向最外層window。</div>

<hr>
<h2 id="沒有-arguments-參數"><a href="#沒有-arguments-參數" class="headerlink" title="沒有 arguments 參數"></a>沒有 arguments 參數</h2><p>注意:箭頭函數裡沒有 argument 物件，可使用 <font color="red">其餘參數(Rest Operator)</font> 替代</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> other = <span class="function">(<span class="params">...others</span>) =&gt;</span> others;</span><br><span class="line"><span class="built_in">console</span>.log(other(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>)); <span class="comment">// [10, 20, 30, 40, 50]</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="apply-call-bind-無效"><a href="#apply-call-bind-無效" class="headerlink" title="apply, call, bind 無效"></a>apply, call, bind 無效</h2><p><font color="red">this</font> 在 Arrow function 中是被綁定的，所以套用 <font color="red">apply, call, bind</font> 的方法時是無法修改 <font color="red">this</font>。</p>
<hr>
<h2 id="不能用在建構式"><a href="#不能用在建構式" class="headerlink" title="不能用在建構式"></a>不能用在建構式</h2><p>由於 this 的是在物件下建立，所以箭頭函式不能像 function 一樣作為建構式的函式，<br>如果嘗試使用此方法則會出現錯誤 (<font color="red">… is not a constructor</font>)。</p>
<hr>
<h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><div class="note info"><a href="https://ithelp.ithome.com.tw/users/20083608/ironman/1354" target="_blank" rel="noopener">邁向 JavaScript 勇者之路</a></div>
]]></content>
      <categories>
        <category>JS</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>ES6</tag>
        <tag>箭頭函式</tag>
        <tag>Arrow functions</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - Flex</title>
    <url>/2021/08/20/CSS-Flex/</url>
    <content><![CDATA[<h2 id="常用屬性"><a href="#常用屬性" class="headerlink" title="常用屬性"></a>常用屬性</h2><img src="/2021/08/20/CSS-Flex/flex-property.png">
<a id="more"></a>
<h2 id="概念圖"><a href="#概念圖" class="headerlink" title="概念圖"></a>概念圖</h2><img src="/2021/08/20/CSS-Flex/flex-direction.png">
<img src="/2021/08/20/CSS-Flex/flex-direction2.png">
<h2 id="Flex-外容器屬性："><a href="#Flex-外容器屬性：" class="headerlink" title="Flex 外容器屬性："></a>Flex 外容器屬性：</h2><h3 id="flex-direction：決定-flex-主軸線-方向"><a href="#flex-direction：決定-flex-主軸線-方向" class="headerlink" title="flex-direction：決定 flex 主軸線 方向"></a>flex-direction：決定 flex 主軸線 方向</h3><p>[ row | row-reverse | column | column-reverse ]</p>
<h3 id="justify-content：主要軸線-左右-的對齊"><a href="#justify-content：主要軸線-左右-的對齊" class="headerlink" title="justify-content：主要軸線(左右)的對齊"></a>justify-content：主要軸線(左右)的對齊</h3><p>[ flex-start | flex-end | center | space-between | space-around ]</p>
<img src="/2021/08/20/CSS-Flex/justify-content.png">
<h3 id="align-items：交錯軸線-上下-的對齊"><a href="#align-items：交錯軸線-上下-的對齊" class="headerlink" title="align-items：交錯軸線(上下)的對齊"></a>align-items：交錯軸線(上下)的對齊</h3><p>[ flex-start | flex-end | center | baseline | stretch ]</p>
<img src="/2021/08/20/CSS-Flex/align-items.png">
<h2 id="Flex-內元件屬性："><a href="#Flex-內元件屬性：" class="headerlink" title="Flex 內元件屬性："></a>Flex 內元件屬性：</h2><h3 id="align-self：單一個物件的交錯軸對齊"><a href="#align-self：單一個物件的交錯軸對齊" class="headerlink" title="align-self：單一個物件的交錯軸對齊"></a>align-self：單一個物件的交錯軸對齊</h3><p>[ auto | flex-start | flex-end | center | baseline | stretch ]</p>
<img src="/2021/08/20/CSS-Flex/align-self.png">
<hr>
<h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><p><a href="https://wcc723.github.io/css/2017/07/21/css-flex/" target="_blank" rel="noopener">圖解：CSS Flex 屬性一點也不難</a></p>
<p><a href="http://sweeteason.pixnet.net/blog/post/42781628-css-flexbox-layout-%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97" target="_blank" rel="noopener">CSS Flexbox Layout 學習心得筆記</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Flex</tag>
        <tag>排版</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - Float排版問題</title>
    <url>/2021/08/20/CSS-float/</url>
    <content><![CDATA[<p>紀錄一下 Float 排版問題</p>
<a id="more"></a>
<h2 id="問題："><a href="#問題：" class="headerlink" title="問題："></a>問題：</h2><p>在練習 Bootstrap3 將表單驗證功能加進去，卻遇到畫面「跑版」的問題，<br>目前是查到 「名稱」底下的<br><code>&lt;div class=&quot;help-block with-errors&quot;&gt;&lt;/div&gt;</code><br>所導致。</p>
<p>可能原因為 float？ margin？</p>
<p>問題點： 1.單點 「名稱」欄位，就會造成下方欄位跑版。<br><img src="/2021/08/20/CSS-float/Q1.jpg"> 2.若同時有驗證 左右二邊，欄位又有對齊了。<br><img src="/2021/08/20/CSS-float/Q2.jpg"></p>
<h3 id="codepen：排版偏移程式碼"><a href="#codepen：排版偏移程式碼" class="headerlink" title="codepen：排版偏移程式碼"></a>codepen：<a href="https://codepen.io/bryan-hsaio/pen/NWjQeNy?editors=1000" target="_blank" rel="noopener">排版偏移程式碼</a></h3><h2 id="解決："><a href="#解決：" class="headerlink" title="解決："></a>解決：</h2><img src="/2021/08/20/CSS-float/A1.jpg">
<p><br><br>如上圖所述，第一個「名稱」腳變長，造成第三個「Email」排不進去被往後推，<br>導致第四個「聯絡電話」也被往後推擠，造成排版歪掉。</p>
<img src="/2021/08/20/CSS-float/A2.jpg">
<p><br><br>解法為 外層用 row 包起來，<strong>清除 float 的浮動(clearfix)</strong>。</p>
<h3 id="codepen：修正後程式碼"><a href="#codepen：修正後程式碼" class="headerlink" title="codepen：修正後程式碼"></a>codepen：<a href="https://codepen.io/bryan-hsaio/pen/Vwboqja" target="_blank" rel="noopener">修正後程式碼</a></h3>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>排版</tag>
        <tag>float</tag>
      </tags>
  </entry>
  <entry>
    <title>JS30-04-Array Cardio Day 1</title>
    <url>/2019/04/29/JS30-04-Array-Cardio-Day-1/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p><img src="/2019/04/29/JS30-04-Array-Cardio-Day-1/arraymethod.jpg"></p>
<font style="font-size:20px;">陣列的操作</font><br><font style="font-size:20px;">filter()、map()、reduce()、sort()</font></blockquote>
<a id="more"></a>
<hr>
<h2 id="目標-題目"><a href="#目標-題目" class="headerlink" title="目標 / 題目"></a>目標 / 題目</h2><ul>
<li><p>使用 array.prototype 依據不同需求條件使用不同的 method 篩選出正確的資料。</p>
<ul>
<li><p><span style="color:blue">題目 1~5. </span>對inventors資料做篩選。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inventors = [</span><br><span class="line">&#123; <span class="attr">first</span>: <span class="string">'Albert'</span>, <span class="attr">last</span>: <span class="string">'Einstein'</span>, <span class="attr">year</span>: <span class="number">1879</span>, <span class="attr">passed</span>: <span class="number">1955</span> &#125;,</span><br><span class="line">&#123; <span class="attr">first</span>: <span class="string">'Isaac'</span>, <span class="attr">last</span>: <span class="string">'Newton'</span>, <span class="attr">year</span>: <span class="number">1643</span>, <span class="attr">passed</span>: <span class="number">1727</span> &#125;,</span><br><span class="line">&#123; <span class="attr">first</span>: <span class="string">'Galileo'</span>, <span class="attr">last</span>: <span class="string">'Galilei'</span>, <span class="attr">year</span>: <span class="number">1564</span>, <span class="attr">passed</span>: <span class="number">1642</span> &#125;,</span><br><span class="line">&#123; <span class="attr">first</span>: <span class="string">'Marie'</span>, <span class="attr">last</span>: <span class="string">'Curie'</span>, <span class="attr">year</span>: <span class="number">1867</span>, <span class="attr">passed</span>: <span class="number">1934</span> &#125;,</span><br><span class="line">&#123; <span class="attr">first</span>: <span class="string">'Johannes'</span>, <span class="attr">last</span>: <span class="string">'Kepler'</span>, <span class="attr">year</span>: <span class="number">1571</span>, <span class="attr">passed</span>: <span class="number">1630</span> &#125;,</span><br><span class="line">&#123; <span class="attr">first</span>: <span class="string">'Nicolaus'</span>, <span class="attr">last</span>: <span class="string">'Copernicus'</span>, <span class="attr">year</span>: <span class="number">1473</span>, <span class="attr">passed</span>: <span class="number">1543</span> &#125;,</span><br><span class="line">&#123; <span class="attr">first</span>: <span class="string">'Max'</span>, <span class="attr">last</span>: <span class="string">'Planck'</span>, <span class="attr">year</span>: <span class="number">1858</span>, <span class="attr">passed</span>: <span class="number">1947</span> &#125;,</span><br><span class="line">&#123; <span class="attr">first</span>: <span class="string">'Katherine'</span>, <span class="attr">last</span>: <span class="string">'Blodgett'</span>, <span class="attr">year</span>: <span class="number">1898</span>, <span class="attr">passed</span>: <span class="number">1979</span> &#125;,</span><br><span class="line">&#123; <span class="attr">first</span>: <span class="string">'Ada'</span>, <span class="attr">last</span>: <span class="string">'Lovelace'</span>, <span class="attr">year</span>: <span class="number">1815</span>, <span class="attr">passed</span>: <span class="number">1852</span> &#125;,</span><br><span class="line">&#123; <span class="attr">first</span>: <span class="string">'Sarah E.'</span>, <span class="attr">last</span>: <span class="string">'Goode'</span>, <span class="attr">year</span>: <span class="number">1855</span>, <span class="attr">passed</span>: <span class="number">1905</span> &#125;,</span><br><span class="line">&#123; <span class="attr">first</span>: <span class="string">'Lise'</span>, <span class="attr">last</span>: <span class="string">'Meitner'</span>, <span class="attr">year</span>: <span class="number">1878</span>, <span class="attr">passed</span>: <span class="number">1968</span> &#125;,</span><br><span class="line">&#123; <span class="attr">first</span>: <span class="string">'Hanna'</span>, <span class="attr">last</span>: <span class="string">'Hammarström'</span>, <span class="attr">year</span>: <span class="number">1829</span>, <span class="attr">passed</span>: <span class="number">1909</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
</li>
<li><p><span style="color:blue">題目 6. </span>列出網址中所有包含’de’的路名。<br>網址：<a href="https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris" target="_blank" rel="noopener">連結</a></p>
</li>
<li><p><span style="color:blue">題目 7. </span>依據lastName排序所有people的資料。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [<span class="string">'Beck, Glenn'</span>, <span class="string">'Becker, Carl'</span>, <span class="string">'Beckett, Samuel'</span>, <span class="string">'Beddoes, Mick'</span>, <span class="string">'Beecher, Henry'</span>, <span class="string">'Beethoven, Ludwig'</span>, <span class="string">'Begin, Menachem'</span>, <span class="string">'Belloc, Hilaire'</span>, <span class="string">'Bellow, Saul'</span>, <span class="string">'Benchley, Robert'</span>, <span class="string">'Benenson, Peter'</span>, <span class="string">'Ben-Gurion, David'</span>, <span class="string">'Benjamin, Walter'</span>, <span class="string">'Benn, Tony'</span>, <span class="string">'Bennington, Chester'</span>, <span class="string">'Benson, Leana'</span>, <span class="string">'Bent, Silas'</span>, <span class="string">'Bentsen, Lloyd'</span>, <span class="string">'Berger, Ric'</span>, <span class="string">'Bergman, Ingmar'</span>, <span class="string">'Berio, Luciano'</span>, <span class="string">'Berle, Milton'</span>, <span class="string">'Berlin, Irving'</span>, <span class="string">'Berne, Eric'</span>, <span class="string">'Bernhard, Sandra'</span>, <span class="string">'Berra, Yogi'</span>, <span class="string">'Berry, Halle'</span>, <span class="string">'Berry, Wendell'</span>, <span class="string">'Bethea, Erin'</span>, <span class="string">'Bevan, Aneurin'</span>, <span class="string">'Bevel, Ken'</span>, <span class="string">'Biden, Joseph'</span>, <span class="string">'Bierce, Ambrose'</span>, <span class="string">'Biko, Steve'</span>, <span class="string">'Billings, Josh'</span>, <span class="string">'Biondo, Frank'</span>, <span class="string">'Birrell, Augustine'</span>, <span class="string">'Black, Elk'</span>, <span class="string">'Blair, Robert'</span>, <span class="string">'Blair, Tony'</span>, <span class="string">'Blake, William'</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p><span style="color:blue">題目 8. </span>列出data內每個種類的數量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [<span class="string">'car'</span>, <span class="string">'car'</span>, <span class="string">'truck'</span>, <span class="string">'truck'</span>, <span class="string">'bike'</span>, <span class="string">'walk'</span>, <span class="string">'car'</span>, <span class="string">'van'</span>, <span class="string">'bike'</span>, <span class="string">'walk'</span>, <span class="string">'car'</span>, <span class="string">'van'</span>, <span class="string">'car'</span>, <span class="string">'truck'</span> ];</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="實作要點"><a href="#實作要點" class="headerlink" title="實作要點"></a>實作要點</h2><ol>
<li>利用 filter()，過濾出 1500 年代出生的人。</li>
<li>利用 map()，得到一個陣列(inventors’ first and last names)。</li>
<li>利用 sort()，將陣列的「birthdate」資料由大至小排序(inventors’s birthdate, oldest to youngest)</li>
<li>利用 reduce()，加總所有人的年齡。</li>
<li>利用 sort()，將陣列資料依年齡大小作排序。</li>
<li>利用 filter()，列出 wiki 資料中所有包含’de’的路名</li>
<li>利用 sort()，將 people 的資料依 lastName 做排序。</li>
<li>利用 reduce()，計算 data 內每個種類的數量。</li>
</ol>
<h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><h3 id="1-過濾出-1500-年代出生的人"><a href="#1-過濾出-1500-年代出生的人" class="headerlink" title="1. 過濾出 1500 年代出生的人"></a>1. 過濾出 1500 年代出生的人</h3><h4 id="→-filter"><a href="#→-filter" class="headerlink" title="→ filter()"></a>→ filter()</h4><figure class="highlight js"><figcaption><span>Array.prototype.some()</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ans1 = inventors.filter(<span class="function"><span class="keyword">function</span>(<span class="params">inventor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (inventor.year &gt;= <span class="number">1500</span> &amp;&amp; inventor.year &lt; <span class="number">1600</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 箭頭函數</span></span><br><span class="line"><span class="keyword">const</span> ans11 = inventors.filter(<span class="function"><span class="params">inventor</span> =&gt;</span> inventor.year &gt;= <span class="number">1500</span> &amp;&amp; inventor.year &lt; <span class="number">1600</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table(ans11);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"↑↑ Filter the list of inventors for those who were born in the 1500's ↑↑"</span>);</span><br></pre></td></tr></table></figure>
<img src="/2019/04/29/JS30-04-Array-Cardio-Day-1/filter.jpg">
<div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">MDN-Array​.prototype​.filter()</a></div>

<h3 id="2-將-inventors-的-first-和-last-組成陣列"><a href="#2-將-inventors-的-first-和-last-組成陣列" class="headerlink" title="2. 將 inventors 的 first 和 last 組成陣列"></a>2. 將 inventors 的 first 和 last 組成陣列</h3><h4 id="→-map"><a href="#→-map" class="headerlink" title="→ map()"></a>→ map()</h4><figure class="highlight js"><figcaption><span>Array.prototype.map()</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ans2 = inventors.map(<span class="function"><span class="keyword">function</span>(<span class="params">inventor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> inventor.first + <span class="string">' '</span> + inventor.last;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 箭頭函數</span></span><br><span class="line"><span class="keyword">const</span> ans22 = inventors.map(<span class="function"><span class="params">inventor</span> =&gt;</span> inventor.first + <span class="string">' '</span> + inventor.last);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 樣板字面值（Template literals）</span></span><br><span class="line"><span class="keyword">const</span> ans222 = inventors.map(<span class="function"><span class="params">inventor</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;inventor.first&#125;</span> <span class="subst">$&#123;inventor.last&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table(ans222);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"↑↑ Give us an array of the inventors' first and last names ↑↑"</span>);</span><br></pre></td></tr></table></figure>
<img src="/2019/04/29/JS30-04-Array-Cardio-Day-1/map.jpg">
<h4 id="→-forEach"><a href="#→-forEach" class="headerlink" title="→ forEach()"></a>→ forEach()</h4><figure class="highlight js"><figcaption><span>Array.prototype.forEach()</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//要自己產一個陣列，並將值推進去</span></span><br><span class="line"><span class="keyword">let</span> ans2222 = [];</span><br><span class="line">    inventors.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">inventor</span>) </span>&#123;</span><br><span class="line">    ans2222.push(<span class="string">`<span class="subst">$&#123;inventor.first&#125;</span> <span class="subst">$&#123;inventor.last&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<img src="/2019/04/29/JS30-04-Array-Cardio-Day-1/foreach.jpg">
<div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">MDN-Array​.prototype​.map()</a><br><br><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/foreach" target="_blank" rel="noopener">MDN-Array​.prototype​.foreach()</a><br></div>


<h3 id="3-將-inventors-的-birthdate-由大到小排序"><a href="#3-將-inventors-的-birthdate-由大到小排序" class="headerlink" title="3. 將 inventors 的 birthdate 由大到小排序"></a>3. 將 inventors 的 birthdate 由大到小排序</h3><h4 id="→-sort"><a href="#→-sort" class="headerlink" title="→ sort()"></a>→ sort()</h4><div class="note info">語法：arr.sort([compareFunction])</div><br>- 若 compareFunction(a, b) 的回傳值小於 0，則會把 a 排在小於 b 之索引的位置，即 a 排在 b 前面。<br>- 若 compareFunction(a, b) 回傳 0，則 a 與 b 皆不會改變彼此的順序，但會與其他全部的元素比較來排序。<br>- 若 compareFunction(a, b) 的回傳值大於 0，則會把 b 排在小於 a 之索引的位置，即 b 排在 a 前面。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ans33 = inventors.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.year - b.year;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//簡寫</span></span><br><span class="line"><span class="keyword">const</span> ans333 = inventors.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (a.year &gt;= b.year ? <span class="number">1</span> : <span class="number">-1</span>)); <span class="comment">//三元運算子</span></span><br><span class="line"><span class="built_in">console</span>.table(ans333);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'↑↑ Sort the inventors by birthdate, oldest to youngest ↑↑'</span>);</span><br></pre></td></tr></table></figure><br><br><img src="/2019/04/29/JS30-04-Array-Cardio-Day-1/sort.jpg"><br><div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="noopener">MDN-Array​.prototype​.sort()</a><br></div>

<h3 id="4-加總所有人的年齡"><a href="#4-加總所有人的年齡" class="headerlink" title="4. 加總所有人的年齡"></a>4. 加總所有人的年齡</h3><h4 id="→-reduce"><a href="#→-reduce" class="headerlink" title="→ reduce()"></a>→ reduce()</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ans4 = inventors.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total, inventor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (total += inventor.passed - inventor.year);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ans4);</span><br></pre></td></tr></table></figure>
<img src="/2019/04/29/JS30-04-Array-Cardio-Day-1/reduce2.jpg">
<div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" target="_blank" rel="noopener">MDN-Array​.prototype​.reduce()</a><br></div>


<h3 id="5-將陣列資料inventors依年齡大小作排序"><a href="#5-將陣列資料inventors依年齡大小作排序" class="headerlink" title="5. 將陣列資料inventors依年齡大小作排序"></a>5. 將陣列資料inventors依年齡大小作排序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ans5 = inventors.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.passed - a.year - (b.passed - b.year);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//直接寫一個年齡/yesrs進到物件中比較好看出結果是否正確</span></span><br><span class="line">inventors.forEach(<span class="function"><span class="params">inventor</span> =&gt;</span> &#123;</span><br><span class="line">    inventor.years = inventor.passed - inventor.year;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.table(ans5);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'↑↑ Sort the inventors by years lived ↑↑'</span>);</span><br></pre></td></tr></table></figure>
<img src="/2019/04/29/JS30-04-Array-Cardio-Day-1/sort2.jpg">
<h3 id="6-利用-filter-，列出-wiki-資料中所有包含’de’的路名"><a href="#6-利用-filter-，列出-wiki-資料中所有包含’de’的路名" class="headerlink" title="6. 利用 filter()，列出 wiki 資料中所有包含’de’的路名"></a>6. 利用 filter()，列出 wiki 資料中所有包含’de’的路名</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先取出路名變為陣列</span></span><br><span class="line"><span class="keyword">let</span> Ary = [];</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'.mw-category-group li a'</span>).forEach(<span class="function">(<span class="params">a</span>)=&gt;</span>&#123;</span><br><span class="line">  Ary.push(a.title)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//再利用filter取出符合條件的</span></span><br><span class="line">Ary.filter(<span class="function"><span class="params">title</span>=&gt;</span>title.indexOf(<span class="string">'de'</span>)!=<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
<img src="/2019/04/29/JS30-04-Array-Cardio-Day-1/ans6.jpg">
<h3 id="7-利用-sort-，將-people-依-lastName-字母順序-做排序。"><a href="#7-利用-sort-，將-people-依-lastName-字母順序-做排序。" class="headerlink" title="7. 利用 sort()，將 people 依 lastName [字母順序]做排序。"></a>7. 利用 sort()，將 people 依 lastName [字母順序]做排序。</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ans7 = people.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> [aFirst, alast] = a.split(<span class="string">', '</span>); <span class="comment">//ES6 解構賦值 表示split後的值分別給 aFirst 跟  alast</span></span><br><span class="line">    <span class="keyword">let</span> [bFirst, blast] = b.split(<span class="string">', '</span>); <span class="comment">//ES6 解構賦值 表示split後的值分別給 bFirst 跟  blast</span></span><br><span class="line">    <span class="comment">//alast[0] ==&gt; 僅對第一個字母做排序，其後順序不變 (Aneurin會排在Ambrose前面)</span></span><br><span class="line">    <span class="comment">//return alast[0] &gt; blast[0] ? 1 : blast[0] &gt; alast[0] ? -1 : 0; </span></span><br><span class="line">    <span class="comment">//alast ==&gt; 整個單字做排序 (Ambrose會排在Aneurin前面)</span></span><br><span class="line">    <span class="keyword">return</span> alast &gt; blast ? <span class="number">1</span> : blast &gt; alast ? <span class="number">-1</span> : <span class="number">0</span>; <span class="comment">//三元運算子  [條件?條件成立:條件不成立]</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.table(ans7);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'↑↑ Sort the people alphabetically by last name ↑↑'</span>);</span><br></pre></td></tr></table></figure>
<img src="/2019/04/29/JS30-04-Array-Cardio-Day-1/ans7.jpg">
<h3 id="8-利用-reduce-，計算-data-內每個種類的數量。"><a href="#8-利用-reduce-，計算-data-內每個種類的數量。" class="headerlink" title="8. 利用 reduce()，計算 data 內每個種類的數量。"></a>8. 利用 reduce()，計算 data 內每個種類的數量。</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ans8 = data.reduce(<span class="function">(<span class="params">obj, content</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj[content]) obj[content] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> obj[content] += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.table(ans8);</span><br></pre></td></tr></table></figure>
<img src="/2019/04/29/JS30-04-Array-Cardio-Day-1/ans8.jpg">
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><ul>
<li>filter() ==&gt; 回傳一個陣列</li>
<li>map() ==&gt; 回傳一個陣列</li>
<li>sort() ==&gt; 回傳一個陣列</li>
<li>reduce() ==&gt; 回傳一個值</li>
</ul>
]]></content>
      <categories>
        <category>JS</category>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>Options API</title>
    <url>/2021/08/06/vue3-03/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/06/vue3-03/ogKK8jt.png"></p>
</blockquote>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 是由一堆 function 組成的物件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(<span class="string">"#yourId"</span>);</span><br></pre></td></tr></table></figure>
<p>:::danger<br>:warning: 要記得加 <code>mount()</code> 才會掛載在畫面上！<br>:::</p>
<p>:::warning<br>生命週期函數在發生後就會被釋放<br>:::</p>
<h2 id="雙向綁定"><a href="#雙向綁定" class="headerlink" title="雙向綁定"></a>雙向綁定</h2><p><img src="https://i.imgur.com/ogKK8jt.png" alt></p>
<p>:::success</p>
<ul>
<li>只讀出渲染<br>:::<br>:::danger</li>
<li>可讀可寫<br>:::<br>:::info</li>
<li>利用事件觸發調整 data，再利用渲染方法渲染到畫面上<br>:::</li>
</ul>
<hr>
<h2 id="指令常見三大情境"><a href="#指令常見三大情境" class="headerlink" title="指令常見三大情境"></a>指令常見三大情境</h2><ul>
<li>透過指令，觸發特定事件<ul>
<li><code>@click=&quot;functionName()&quot;</code></li>
</ul>
</li>
<li>透過其他 Option API，觸發特定事件<ul>
<li><code>this.functionName()</code></li>
</ul>
</li>
<li>作為畫面上的資料運算 (俗稱 filter)<ul>
<li>新版的 Vue 沒有 <code>filter</code></li>
</ul>
</li>
</ul>
<h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- html --&gt;</span><br><span class="line">&#123;&#123;toCurrency(cash)&#125;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    toCurrency(num) &#123;</span><br><span class="line">      <span class="comment">// 如何加入千分位</span></span><br><span class="line">      <span class="keyword">const</span> parts = num.toString().split(<span class="string">"."</span>);</span><br><span class="line">      parts[<span class="number">0</span>] = parts[<span class="number">0</span>].replace(<span class="regexp">/\B(?=\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">","</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`$<span class="subst">$&#123;parts.join(<span class="string">"."</span>)&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><ul>
<li>不修改原始數值的情況產生新值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    doubleNum() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.num * <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    filterData() &#123;</span><br><span class="line">      <span class="keyword">const</span> newData = <span class="keyword">this</span>.data.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// data 所選擇的性別 &amp; ajax 所取得的資料性別</span></span><br><span class="line">        <span class="keyword">return</span> item.gender === <span class="keyword">this</span>.genderFilter;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.genderFilter) <span class="keyword">return</span> <span class="keyword">this</span>.data;</span><br><span class="line">      <span class="keyword">return</span> newData;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// #1 如何新增資料</span></span><br><span class="line">    addItem() &#123;&#125;,</span><br><span class="line">    <span class="comment">// #2 如何移除資料</span></span><br><span class="line">    removeItem(item) &#123;</span><br><span class="line">      <span class="comment">// 1 陣列索引</span></span><br><span class="line">      <span class="comment">// 2 id</span></span><br><span class="line">      <span class="keyword">const</span> index = <span class="keyword">this</span>.data.filter(<span class="function"><span class="params">obj</span> =&gt;</span> obj.id === item.id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// #3 如何編輯資料</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// #4 如何避免雙向綁定</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Methods-運用"><a href="#Methods-運用" class="headerlink" title="Methods 運用"></a>Methods 運用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CSS only --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">integrity</span>=<span class="string">"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3 mb-3"</span> <span class="attr">v-for</span>=<span class="string">"item in data"</span> <span class="attr">:key</span>=<span class="string">"item.cell"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.picture.large"</span> <span class="attr">class</span>=<span class="string">"card-img-top"</span> <span class="attr">alt</span>=<span class="string">"..."</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-body"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span>&#123;&#123; item.email &#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- #3 把 age * 100 當作金額吧（套用 toCurrency 的方法） --&gt;</span></span><br><span class="line">                &#123;&#123; toCurrency(item.dob.age * 100) &#125;&#125;</span><br><span class="line">                <span class="comment">&lt;!-- &#123;&#123; cash &#125;&#125; --&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Go somewhere<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">      dollarSign: &#123;&#123; num &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/vue/3.1.4/vue.global.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 當我們在 Vue 的</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 資料集</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            text: <span class="string">"我是卡斯伯"</span>,</span></span><br><span class="line"><span class="undefined">            num: 10000.01,</span></span><br><span class="line"><span class="undefined">            person: &#123;</span></span><br><span class="line"><span class="javascript">              name: <span class="string">"小明"</span>,</span></span><br><span class="line"><span class="undefined">              image:</span></span><br><span class="line"><span class="javascript">                <span class="string">"https://images.unsplash.com/photo-1593052393678-d1c690c76071?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=634&amp;q=80"</span>,</span></span><br><span class="line"><span class="undefined">              cash: 1000,</span></span><br><span class="line"><span class="javascript">              gender: <span class="string">"male"</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            data: []</span></span><br><span class="line"><span class="undefined">          &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">          getRandomUser() &#123;</span></span><br><span class="line"><span class="javascript">            axios.get(<span class="string">"https://randomuser.me/api/?results=10"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// #2 如何把資料加入至 data 內</span></span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(res);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.data = res.data.results;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="comment">// #3 如何加入千分號</span></span></span><br><span class="line"><span class="undefined">          toCurrency(num) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> parts = num.toString().split(<span class="string">"."</span>);</span></span><br><span class="line"><span class="javascript">            parts[<span class="number">0</span>] = parts[<span class="number">0</span>].replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">","</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">`$<span class="subst">$&#123;parts.join(<span class="string">"."</span>)&#125;</span>`</span>;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        mounted() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// #1 觸發取得遠端資料</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.getRandomUser();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="javascript">      app.mount(<span class="string">"#app"</span>);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Computed"><a href="#Computed" class="headerlink" title="Computed"></a>Computed</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">integrity</span>=<span class="string">"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"addNum"</span>&gt;</span>累加數值 &#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      computed: &#123;&#123; doubleNum &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-select mb-3"</span> <span class="attr">v-model</span>=<span class="string">"genderFilter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>請選擇<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3 mb-3"</span> <span class="attr">v-for</span>=<span class="string">"item in filterData"</span> <span class="attr">:key</span>=<span class="string">"item.cell"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.picture.large"</span> <span class="attr">class</span>=<span class="string">"card-img-top"</span> <span class="attr">alt</span>=<span class="string">"..."</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-body"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span>&#123;&#123; item.email &#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- #3 把 age * 100 當作金額吧（套用 toCurrency 的方法） --&gt;</span></span><br><span class="line">                &#123;&#123; item.dob.age * 100 &#125;&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Go somewhere<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/vue/3.1.4/vue.global.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 當我們在 Vue 的</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 資料集</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            text: <span class="string">"我是卡斯伯"</span>,</span></span><br><span class="line"><span class="undefined">            num: 1,</span></span><br><span class="line"><span class="undefined">            person: &#123;</span></span><br><span class="line"><span class="javascript">              name: <span class="string">"小明"</span>,</span></span><br><span class="line"><span class="undefined">              image:</span></span><br><span class="line"><span class="javascript">                <span class="string">"https://images.unsplash.com/photo-1593052393678-d1c690c76071?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=634&amp;q=80"</span>,</span></span><br><span class="line"><span class="undefined">              cash: 1000,</span></span><br><span class="line"><span class="javascript">              gender: <span class="string">"male"</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            data: [],</span></span><br><span class="line"><span class="javascript">            genderFilter: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">          &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">          addNum() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.num++;</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          getRandomUser() &#123;</span></span><br><span class="line"><span class="javascript">            axios.get(<span class="string">"https://randomuser.me/api/?results=10"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.data = res.data.results;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="keyword">this</span>.data);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        computed: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// computed 不會改動原始值</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// watch 類似 methods, 會更動原始值</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// “不修改原始數值” 的情況產生 “新值” （此值只為了渲染使用）</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// #1 雙倍運算 num</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// #2 過濾性別</span></span></span><br><span class="line"><span class="undefined">          doubleNum() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">this</span>.num * <span class="number">2</span>;</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 過濾列表</span></span></span><br><span class="line"><span class="undefined">          filterData() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> newData = <span class="keyword">this</span>.data.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// data 所選擇的性別 vs Ajax 所取得的資料性別</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> item.gender === <span class="keyword">this</span>.genderFilter; <span class="comment">// 判斷</span></span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (!<span class="keyword">this</span>.genderFilter) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> <span class="keyword">this</span>.data; <span class="comment">// 是否有被變更</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> newData;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        mounted() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.getRandomUser();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="javascript">      app.mount(<span class="string">"#app"</span>);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Todos"><a href="#Todos" class="headerlink" title="Todos"></a>Todos</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CSS only --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">integrity</span>=<span class="string">"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"addItem"</span>&gt;</span>增加文字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in data"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">          &#123;&#123; item.text &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"editItem(item)"</span>&gt;</span>編輯品項<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"removeItem(item)"</span>&gt;</span>移除品項<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"temp.text"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"doneEdit"</span>&gt;</span>編輯完成<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/vue/3.1.4/vue.global.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 當我們在 Vue 的</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 資料集</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            text: <span class="string">"我是卡斯伯"</span>,</span></span><br><span class="line"><span class="undefined">            data: [],</span></span><br><span class="line"><span class="undefined">            temp: &#123;&#125;</span></span><br><span class="line"><span class="undefined">          &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// #1 如何新增資料</span></span></span><br><span class="line"><span class="undefined">          addItem() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.data.push(&#123;</span></span><br><span class="line"><span class="javascript">              id: <span class="keyword">this</span>.data.length + <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">              text: <span class="keyword">this</span>.text</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.text = <span class="string">""</span>;</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="comment">// #2 如何移除資料</span></span></span><br><span class="line"><span class="undefined">          removeItem(item) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1 陣列索引</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2 id</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> index = <span class="keyword">this</span>.data.findIndex(<span class="function"><span class="params">obj</span> =&gt;</span> obj.id === item.id);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(index);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.data.splice(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="comment">// #3 如何編輯資料</span></span></span><br><span class="line"><span class="undefined">          editItem(item) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.temp = &#123; ...item &#125;; <span class="comment">// ES6</span></span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="comment">// #4 把資料寫回</span></span></span><br><span class="line"><span class="undefined">          doneEdit() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> index = <span class="keyword">this</span>.data.findIndex(<span class="function"><span class="params">obj</span> =&gt;</span> obj.id === <span class="keyword">this</span>.temp.id);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 把資料寫回索引</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.data[index] = <span class="keyword">this</span>.temp;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// this.temp 清空</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.temp = &#123;&#125;;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="javascript">      app.mount(<span class="string">"#app"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// Vue 2</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>VueJS</category>
        <category>Vue3</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6-Promise-asnyc-await</title>
    <url>/2021/08/17/ES6-Promise-asnyc-await/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/17/ES6-Promise-asnyc-await/Async.png"></p>
<font style="font-size:20px;">Promise 與 asnyc-await 的運用</font>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="Promise-Chain"><a href="#Promise-Chain" class="headerlink" title="Promise Chain"></a>Promise Chain</h2><p>下列為連續執行任務時，全部成功執行完畢的情況</p>
<figure class="highlight js"><figcaption><span>Promise Chain</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> task01 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"OK"</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> task02 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"OK"</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> task03 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"OK"</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">task01()</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task01=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> task02();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task02=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> task03();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task03=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"done！！"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出訊息</span></span><br><span class="line"><span class="comment">// task01=&gt;OK</span></span><br><span class="line"><span class="comment">// task02=&gt;OK</span></span><br><span class="line"><span class="comment">// task03=&gt;OK</span></span><br><span class="line"><span class="comment">// done！！</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://jsbin.com/netepopema/1/edit?js,console" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<hr>
<h2 id="Promise-Chain-如何截取錯誤"><a href="#Promise-Chain-如何截取錯誤" class="headerlink" title="Promise Chain 如何截取錯誤"></a>Promise Chain 如何截取錯誤</h2><p>若執行任務過程中有 <font color="red">失敗</font> 的話，就會統一使用 <code>catch</code> 截取錯誤的訊息。</p>
<figure class="highlight js"><figcaption><span>截取錯誤</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> task01 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"01 OK"</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> task02 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="string">"02 failed"</span>); <span class="comment">// 這裡出錯了...</span></span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> task03 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"01 OK"</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">task01()</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task01=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(task02)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task02=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(task03)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task03=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 統一截取錯誤</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`error=&gt;<span class="subst">$&#123;e&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出訊息</span></span><br><span class="line"><span class="comment">// task01=&gt;01 OK</span></span><br><span class="line"><span class="comment">// error=&gt;02 failed</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://jsbin.com/xazupow/edit?js,console" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<hr>
<h2 id="asnyc-await"><a href="#asnyc-await" class="headerlink" title="asnyc-await"></a>asnyc-await</h2><p>下列為連續執行任務時，全部成功執行完畢的情況</p>
<figure class="highlight js"><figcaption><span>asnyc-await chain</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">await</span> fn1();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn1：<span class="subst">$&#123;a&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn1做完...才往下`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">await</span> fn2();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn2：<span class="subst">$&#123;b&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn2做完...才往下`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> c = <span class="keyword">await</span> fn3();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn3：<span class="subst">$&#123;c&#125;</span>`</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出訊息</span></span><br><span class="line"><span class="comment">// fn1：ok</span></span><br><span class="line"><span class="comment">// fn1做完...才往下</span></span><br><span class="line"><span class="comment">// fn2：ok</span></span><br><span class="line"><span class="comment">// fn2做完...才往下</span></span><br><span class="line"><span class="comment">// fn3：ok</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://jsbin.com/nilivaxali/1/edit?js,console" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<hr>
<h2 id="asnyc-await-如何截取錯誤"><a href="#asnyc-await-如何截取錯誤" class="headerlink" title="asnyc-await 如何截取錯誤"></a>asnyc-await 如何截取錯誤</h2><p>在 Promise 中，我們知道是通過 <code>catch</code> 的方式來捕獲異常，<br>而當我們使用 <code>async</code> 時，則通過 <code>try/catch</code> 來截取錯誤。</p>
<figure class="highlight js"><figcaption><span>截取錯誤</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"fn1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"error：fn2"</span>; <span class="comment">//送出錯誤</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"fn3"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">await</span> fn1();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 截取錯誤</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="keyword">await</span> fn2();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> c = <span class="keyword">await</span> fn3();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出訊息</span></span><br><span class="line"><span class="comment">// error：fn2</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://jsbin.com/yiyazunusi/1/edit?js,console" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<p>但是依上列情況來說，當有多個 <code>await</code> 時，包太多 <code>try/catch</code> 的話，就會顯示程式碼不好看也不好閱讀</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"error：fn1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"error：fn2"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"error：fn3"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="keyword">await</span> fn1();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="keyword">await</span> fn2();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> c = <span class="keyword">await</span> fn3();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出訊息</span></span><br><span class="line"><span class="comment">// error：fn1</span></span><br><span class="line"><span class="comment">// error：fn2</span></span><br><span class="line"><span class="comment">// error：fn3</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://jsbin.com/zoroyuyuje/1/edit?js,console" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<p>這時我們可以換個寫法，將 <code>try/catch</code> 移位至 <code>function</code> 裡，而不是包在 <code>await</code> 外層</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 方式1：分別在 try 和 catch 裡，return不同的結果</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"fail"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 方式2：用一個變數紀錄，最後再return結果</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    result = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result; <span class="comment">//回傳結果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"error"</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">await</span> fn1();</span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">await</span> fn2();</span><br><span class="line">  <span class="keyword">let</span> c = <span class="keyword">await</span> fn3();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn1：<span class="subst">$&#123;a&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn2：<span class="subst">$&#123;b&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn3：<span class="subst">$&#123;c&#125;</span>`</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出訊息</span></span><br><span class="line"><span class="comment">// fn1：ok</span></span><br><span class="line"><span class="comment">// fn2：true</span></span><br><span class="line"><span class="comment">// fn3：false</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://jsbin.com/zarupuduzo/1/edit?js,console" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<hr>
<h2 id="何時要用-Promise-還是-asnyc-await-呢？"><a href="#何時要用-Promise-還是-asnyc-await-呢？" class="headerlink" title="何時要用 Promise 還是 asnyc-await 呢？"></a>何時要用 Promise 還是 asnyc-await 呢？</h2><p>先說結論(個人看法)：</p>
<ul>
<li>任務<font color="red">有</font>前後關係的話，使用 <code>Promise Chain</code> 寫法</li>
<li>任務<font color="red">無</font>前後關係的話，使用 <code>asnyc-await</code> 寫法</li>
</ul>
<p>下面用不同情況來說明</p>
<p><span id="inline-blue">情境 1</span></p>
<p>因 task01、task02、task03 <font color="red">有前後關係</font>的話，<br>執行的順序需要先完成 task01 → task02 → task03，<br>當執行任務過程中，有錯的話，就不必再繼續往下執行。</p>
<figure class="highlight js"><figcaption><span>Promise Chain 寫法</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> task01 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"01 OK"</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> task02 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="string">"02 failed"</span>); <span class="comment">// 這裡出錯了</span></span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> task03 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"01 OK"</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">task01()</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task01=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(task02)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task02=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(task03)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task03=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`error=&gt;<span class="subst">$&#123;e&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出訊息</span></span><br><span class="line"><span class="comment">// task01=&gt;01 OK</span></span><br><span class="line"><span class="comment">// error=&gt;02 failed</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://jsbin.com/xazupow/edit?js,console" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<p>若是我們改用 <code>asnyc-await</code> 寫的話，如下</p>
<figure class="highlight js"><figcaption><span>asnyc-await 寫法</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    result = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"error"</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">await</span> fn1();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判斷 fn1 是否成功</span></span><br><span class="line">  <span class="keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`fn1：<span class="subst">$&#123;a&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`fn1：out.....`</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"out..."</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">await</span> fn2();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判斷 fn2 是否成功</span></span><br><span class="line">  <span class="keyword">if</span> (b) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`fn2：<span class="subst">$&#123;b&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`fn2：out.....`</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"out..."</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> c = <span class="keyword">await</span> fn3();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判斷 fn3 是否成功</span></span><br><span class="line">  <span class="keyword">if</span> (c) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`fn3：<span class="subst">$&#123;c&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`fn3：out.....`</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"out..."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出訊息</span></span><br><span class="line"><span class="comment">// fn1：true</span></span><br><span class="line"><span class="comment">// fn2：out.....</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://jsbin.com/cuseroc/edit?js,console" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<p>雖然<code>asnyc-await</code>一樣可以完成同樣的事情，<br>不過程式碼與<code>Promise</code>的寫法來看，就稍微雜亂了一點，<br>主要是因為執行每個任務時，需要在任務之間，穿插 <code>if</code> 的判斷來確認上個任務是否完成，<br>才能繼續往下執行，不像<code>Promise</code>統一使用一個 <code>catch</code> 截取錯誤的訊息。</p>
<p><span id="inline-blue">情境 2</span></p>
<p>若任務<font color="red">沒有</font>相依關係的話，使用 <code>asnyc-await</code> 的寫法，這樣程式碼看起來就簡潔一點。</p>
<figure class="highlight js"><figcaption><span>asnyc-await</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"fail"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    result = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"error"</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">await</span> fn1();</span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">await</span> fn2();</span><br><span class="line">  <span class="keyword">let</span> c = <span class="keyword">await</span> fn3();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn1：<span class="subst">$&#123;a&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn2：<span class="subst">$&#123;b&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn3：<span class="subst">$&#123;c&#125;</span>`</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line"><span class="comment">// fn1：ok</span></span><br><span class="line"><span class="comment">// fn2：true</span></span><br><span class="line"><span class="comment">// fn3：false</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://jsbin.com/badaqenomu/edit?js,console" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<hr>
<h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><div class="note info"><a href="https://youtu.be/TNTIKEWoD_Q" target="_blank" rel="noopener">Alex 宅幹嘛-這些年經歷過的同步非同步 with Tommy</a><br><a href="https://juejin.im/post/5ae57d8d6fb9a07aa6318a20" target="_blank" rel="noopener">帮助你开始理解async/await</a></div>
]]></content>
      <categories>
        <category>JS</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>ES6</tag>
        <tag>Promise</tag>
        <tag>asnyc-await</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - 從零開始 Day1</title>
    <url>/2019/07/20/JS-Starting%20from%20scratch%20D1/</url>
    <content><![CDATA[<h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><a id="more"></a>
<h2 id="你不可不知的那些小事情-生態現況與基本常識"><a href="#你不可不知的那些小事情-生態現況與基本常識" class="headerlink" title="你不可不知的那些小事情 - 生態現況與基本常識"></a>你不可不知的那些小事情 - 生態現況與基本常識</h2><h2 id="敘事與程式的關係"><a href="#敘事與程式的關係" class="headerlink" title="敘事與程式的關係"></a>敘事與程式的關係</h2><p>故事 1:<br>角色:<br>Alex =&gt; father<br>Howard =&gt; son<br>故事:<br>Howard =&gt; 肚子餓 =&gt; 叫爸爸 =&gt; Alex 煮飯</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Howard.addEventListener(肚子餓,叫爸爸)</span><br><span class="line"></span><br><span class="line">叫爸爸() &#123;</span><br><span class="line">  Alex.煮飯</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ECMAScript-vs-JavaScript"><a href="#ECMAScript-vs-JavaScript" class="headerlink" title="ECMAScript vs JavaScript"></a>ECMAScript vs JavaScript</h2><p>LiveScript 跟風 Java 改名 JavaScript</p>
<p>ECMAScript 是規範版本的名稱 Ex : ECMAScript 6</p>
<h2 id="網頁三腳督"><a href="#網頁三腳督" class="headerlink" title="網頁三腳督"></a>網頁三腳督</h2><p>HTML + CSS + JavaScript</p>
<p>Javascript 負責事情 1.功能操作 2.動畫 (能用 Css 做就用 Css 做)css 效能比較好用 3.資料處理</p>
<p><img src="https://i.imgur.com/MJxvBKq.jpg" alt></p>
<h2 id="BOM-vs-DOM"><a href="#BOM-vs-DOM" class="headerlink" title="BOM vs DOM"></a>BOM vs DOM</h2><p>BOM(Browser Object Model):操作瀏覽器<br>Ex: window.navigator , window.location … 等</p>
<p>DOM(Document Object Model):操作網頁內容(大部分是標籤)<br>Ex: div, style … 等 tag<br>資料處理<br>一般在撰寫上要考量要操作哪部分</p>
<h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例 1"></a>範例 1</h3><p>JavaScript 寫在哪裡? 都可以?<br>位置:</p>
<ol>
<li>HTML 外面</li>
<li>HTML 裡面</li>
<li>HTML 裡面 HEAD 裡面</li>
<li>HTML 裡面 BODY 裡面</li>
</ol>
<p>瀏覽器會將上面全都拉近 BODY 裡面 =&gt; 建議放在 BODY 結束前</p>
<p>script 包出一個區域做撰寫程式地方<br>依照順序由上到下的方式去依序執行</p>
<p>最基本類型</p>
<ol>
<li>文字 String</li>
<li>數字 Number</li>
<li>布林 Boolean</li>
<li>空值 Null</li>
<li>未定義 Undefined</li>
</ol>
<p>如果 HTML 畫面完成再執行 document.write,會把整個畫面清掉從 write</p>
<h3 id="範例-2"><a href="#範例-2" class="headerlink" title="範例 2"></a>範例 2</h3><p>1.宣告:新增(取名字) 2.先宣告後使用！ （重要<br>3.var(可改變) let(可改變) const(常數不會變) 4.資料轉換 5.作用域</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>; <span class="comment">// 宣告 a 變數 等於 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 宣告 a 變數，將 123 設定到 a 變數 //</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//在console 面板印出內容</span></span><br></pre></td></tr></table></figure>
<p>a += 2;(簡寫) =&gt; a = a + 2;(完整) //在不熟的狀態下不要用簡寫</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//作用域範圍</span></span><br><span class="line"><span class="comment">//建議使用let方式去宣告 (因為會鎖作用域)</span></span><br><span class="line"><span class="comment">//function作用區塊</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">example_var</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"===== var start ====="</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">    a += <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"===== var end ====="</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">example_let</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"===== let start ====="</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// Error 不往下做 註解後可以往下做</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    a += <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"===== let end ====="</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//常數</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">example_const</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"===== const start ====="</span>);</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">    a += <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// Error 常數不可改</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"===== const end ====="</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> a =&gt; <span class="literal">undefined</span> <span class="comment">//不建議去這樣使用</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> a =<span class="string">''</span> <span class="comment">// 預設文字 String</span></span><br><span class="line">  <span class="keyword">let</span> b =<span class="literal">null</span> <span class="comment">// 預設物件 Object</span></span><br><span class="line">  <span class="keyword">let</span> c =<span class="number">0</span> <span class="comment">// 預設數字 Number</span></span><br><span class="line">  <span class="keyword">let</span> d = <span class="literal">false</span> <span class="comment">// 預設布林值 Boolean</span></span><br><span class="line">  <span class="keyword">let</span> e = [] <span class="comment">// 預設陣列 Array (有時設 null)</span></span><br></pre></td></tr></table></figure>
<h3 id="作用域使用"><a href="#作用域使用" class="headerlink" title="作用域使用"></a>作用域使用</h3><p>Why 使用作用域 : 因為網頁內容若能被調整, 容易造成網頁內容不安全</p>
<ol>
<li>block<br>es6 使用一對大括號{} =&gt;裡面只能用 let 跟 const</li>
<li>IIFE<br>(function(){…})();</li>
</ol>
<h2 id="function-函式"><a href="#function-函式" class="headerlink" title="function 函式"></a>function 函式</h2><h3 id="宣告方式"><a href="#宣告方式" class="headerlink" title="宣告方式"></a>宣告方式</h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函式名稱(<span class="params">...參數</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//執行內容..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它會有提升 (hoisting) 現象，，像這樣：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">greet();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//執行內容..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><ul>
<li>優點<ul>
<li>函式在宣告時,才產生出來</li>
<li>較符合<strong>先宣告後使用</strong>的習慣</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xxx = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 宣告一個名稱設定一個function</span></span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Chrome-amp-Vscode-Tips"><a href="#Chrome-amp-Vscode-Tips" class="headerlink" title="Chrome &amp; Vscode Tips"></a>Chrome &amp; Vscode Tips</h2><h3 id="Chrome-下斷點"><a href="#Chrome-下斷點" class="headerlink" title="Chrome 下斷點"></a>Chrome 下斷點</h3><p>記得要重新整理</p>
<p><img src="https://i.imgur.com/Pqofn77.gif" alt></p>
<h3 id="vscode-快捷鍵"><a href="#vscode-快捷鍵" class="headerlink" title="vscode 快捷鍵"></a>vscode 快捷鍵</h3><p>左方小齒輪 -&gt; 中文 : 使用者程式碼片段 , 英文 : User Snippets</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"IIFE": &#123;</span><br><span class="line">  "prefix": "iife",</span><br><span class="line">  "body": [</span><br><span class="line">      "(function() &#123;",</span><br><span class="line">      "  $1",</span><br><span class="line">      <span class="string">"&#125;)();"</span></span><br><span class="line">  ],</span><br><span class="line">  "description": "IIFE"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="vscode-顯示設定-專案"><a href="#vscode-顯示設定-專案" class="headerlink" title="vscode 顯示設定 (專案)"></a>vscode 顯示設定 (專案)</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.fontFamily"</span>: <span class="string">"Fira Code,Microsoft JhengHei"</span>,</span><br><span class="line">  <span class="attr">"editor.fontLigatures"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  "editor.fontSize": 14,  //字體大小</span><br><span class="line">  "window.zoomLevel": 3, // 字體縮放大小</span><br><span class="line"></span><br><span class="line">  "editor.rulers" : [80,120]</span><br><span class="line">  "prettier.printWidth": 120 // prettier 換行設定 (幾個字換行)</span><br><span class="line"></span><br><span class="line">  "explorer.openEditors.visible": 0, // 旁邊檔案開的資料夾數</span><br><span class="line"></span><br><span class="line">  "files.autoSave": "afterDelay",</span><br><span class="line">  "editor.formatOnSave": true,</span><br><span class="line"></span><br><span class="line">  "editor.tabSize": 2,</span><br><span class="line">  "editor.insertSpaces": true,</span><br><span class="line"></span><br><span class="line">  "emmet.triggerExpansionOnTab": true, //觸發emmet</span><br><span class="line"></span><br><span class="line">  "liveServer.settings.donotShowInfoMsg": true,</span><br><span class="line">  "liveServer.settings.ignoreFiles": [".vscode/**", ".data/**"],</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://codepen.io/" target="_blank" rel="noopener">CodePen</a></li>
<li><a href="https://codesandbox.io/" target="_blank" rel="noopener">CodeSandbox - 線上編碼協作</a></li>
<li><a href="https://caniuse.com/" target="_blank" rel="noopener">Can I Use - 查詢相容性</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="noopener">優先性參考</a></li>
</ul>
<h2 id="那些該死的運算與轉換-資料類型與操作"><a href="#那些該死的運算與轉換-資料類型與操作" class="headerlink" title="那些該死的運算與轉換 - 資料類型與操作"></a>那些該死的運算與轉換 - 資料類型與操作</h2><h3 id="數學運算與回傳"><a href="#數學運算與回傳" class="headerlink" title="數學運算與回傳"></a>數學運算與回傳</h3><p><img src="https://i.imgur.com/TH0JSlq.gif" alt></p>
<p>運算式<br>運算元(運算的值 ex:數字<br>運算子(怎麼算 ex:+-=</p>
<ol>
<li>賦值運算子 (一般都會改變內容)</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span> <span class="comment">// 將1賦予a</span></span><br><span class="line">a += <span class="number">1</span> <span class="comment">// a = a + 1 =&gt; 2</span></span><br><span class="line">a -= <span class="number">1</span> <span class="comment">// a = a - 1 =&gt; 1</span></span><br><span class="line">a *= <span class="number">10</span> <span class="comment">// a = a * 10 =&gt; 10</span></span><br><span class="line">a /= <span class="number">5</span> <span class="comment">// a = a/5 =&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a++ =&gt; a +=1 =&gt; a = a+1</span></span><br><span class="line"><span class="keyword">let</span> b = a++ <span class="comment">// 先做b=a (a賦值於b) 後做 a=a+1 a,b = 3,2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = --a <span class="comment">// 先做 a=a-1 後做 c=(a-1) 此時a-1已先算完，帶入C即可</span></span><br><span class="line"><span class="comment">//a,b,c = 2,2,2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d1 = b+=<span class="number">1</span> <span class="comment">// b,d1 = 3,3</span></span><br><span class="line"><span class="comment">// 逗號 : 接著做</span></span><br><span class="line"><span class="keyword">let</span> d2 = ( b+=<span class="number">1</span> , c+=<span class="number">2</span> , a+b+c) <span class="comment">// a,b,c,d2 = 2,3,4,9</span></span><br><span class="line"><span class="keyword">let</span> d =b+<span class="number">1</span>,c+<span class="number">2</span>,a+b+c <span class="comment">// error 這部分切為 let d =b+1 (賦值) / c+2,a+b+c</span></span><br><span class="line"><span class="comment">//除了a++ 這種剩下都是先算完再拿 += 跟++是不相等的</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>算術運算子</p>
</li>
<li><p>字串運算子</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">如果有字串會字串優先;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span> + <span class="string">"1"</span>; <span class="comment">// =&gt;"1"="1"=&gt;"11"</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">1</span> + <span class="literal">true</span>; <span class="comment">// =&gt; 1+1=&gt;2</span></span><br><span class="line"><span class="keyword">let</span> z = <span class="number">1</span> + !<span class="string">"3"</span>; <span class="comment">//=&gt; 1+!true =&gt; 1+false=&gt;1+0=&gt;1</span></span><br><span class="line"><span class="comment">//上面會優先做驚嘆號部分 (反轉)</span></span><br><span class="line"><span class="number">3</span> + <span class="number">1</span> + <span class="string">"2"</span>; <span class="comment">//=&gt; 4 + "2" =&gt; "42"</span></span><br><span class="line"><span class="number">3</span> + <span class="function">(<span class="params"><span class="number">1</span> + <span class="string">"2"</span></span>); // =&gt;</span> <span class="number">3</span> + <span class="function">(<span class="params"><span class="string">"1"</span> + <span class="string">"2"</span></span>) =&gt;</span> <span class="number">3</span> + <span class="string">"12"</span> =&gt; <span class="string">"3"</span> + <span class="string">"12"</span> =&gt; <span class="string">"312"</span></span><br></pre></td></tr></table></figure>
<h4 id="轉換表"><a href="#轉換表" class="headerlink" title="轉換表"></a><strong>轉換表</strong></h4><p><img src="https://i.imgur.com/hdWhJDE.jpg" alt></p>
<h3 id="if-條件判斷式"><a href="#if-條件判斷式" class="headerlink" title="if 條件判斷式"></a>if 條件判斷式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 肚子餓</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// No.1 =&gt; 做事情或不做</span></span><br><span class="line">如果 肚子餓 =&gt; 吃</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>（肚子餓）&#123;</span><br><span class="line">  吃</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// No.2 =&gt; 做a or 做b</span></span><br><span class="line">如果 肚子餓 =&gt; 吃</span><br><span class="line">不然 =&gt; 不吃</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( 肚子餓 ) &#123;</span><br><span class="line"> 吃</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> 不吃</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// No.3 =&gt; 條件1 做A / 條件2 做B / 做C</span></span><br><span class="line">如果 肚子很餓 =&gt; 吃多一點</span><br><span class="line">不然如果 普通餓 =&gt; 吃一點點</span><br><span class="line">不然 不吃</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( 肚子很餓 ) &#123;</span><br><span class="line"> 吃多一點</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( 普通餓 )&#123;</span><br><span class="line"> 吃一點點</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> 不吃</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 肚子 = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">let</span> 吃 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  肚子 += <span class="number">20</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (肚子 &lt; <span class="number">60</span>) &#123;</span><br><span class="line">  吃();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(肚子); <span class="comment">// 60</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (肚子 &lt; <span class="number">60</span>) &#123;</span><br><span class="line">  吃();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(肚子); <span class="comment">// 60</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 肚子 = <span class="number">60</span>;</span><br><span class="line"><span class="keyword">let</span> 吃 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  肚子 += <span class="number">20</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (肚子 &lt; <span class="number">60</span>) &#123;</span><br><span class="line">  吃();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  不吃(); <span class="comment">// 當肚子40不會進來 如果60 會抱錯</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 肚子 = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 客製吃 = <span class="function"><span class="keyword">function</span>(<span class="params">食物量</span>) </span>&#123;</span><br><span class="line">  肚子 += 食物量;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (肚子 &lt;= <span class="number">40</span>) &#123;</span><br><span class="line">  客製吃(<span class="number">40</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (肚子 &lt;= <span class="number">60</span>) &#123;</span><br><span class="line">  客製吃(<span class="number">20</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  客製吃(<span class="number">-10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="完整-Code-Alex-版"><a href="#完整-Code-Alex-版" class="headerlink" title="完整 Code (Alex 版)"></a>完整 Code (Alex 版)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 肚子餓</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 肚子 = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">let</span> 吃 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  肚子 += <span class="number">20</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> 不吃 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  肚子 -= <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// No.1 =&gt; 做事情 OR 不做</span></span><br><span class="line"><span class="comment">//如果 肚子 &lt; 60 =&gt; 吃</span></span><br><span class="line"><span class="comment">// if (肚子 &lt; 60) &#123;</span></span><br><span class="line"><span class="comment">//   吃();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(肚子); // 60</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if (肚子 &lt; 60) &#123;</span></span><br><span class="line"><span class="comment">//   吃();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(肚子); // 60</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// No.2 =&gt; 做A OR 做B</span></span><br><span class="line"><span class="comment">//如果 肚子餓 =&gt; 吃</span></span><br><span class="line"><span class="comment">//不然 =&gt; 不吃</span></span><br><span class="line"><span class="comment">// 肚子 = 60;</span></span><br><span class="line"><span class="comment">// if (肚子 &lt;= 60) &#123;</span></span><br><span class="line"><span class="comment">//   吃();</span></span><br><span class="line"><span class="comment">// &#125; else &#123;</span></span><br><span class="line"><span class="comment">//   不吃();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(肚子); // 80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// No.3 =&gt; 條件1 做A 條件2 做B 做C</span></span><br><span class="line"><span class="comment">//如果 肚子很餓 =&gt; 吃多一點</span></span><br><span class="line"><span class="comment">//不然如果 普通餓 =&gt; 吃一點點</span></span><br><span class="line"><span class="comment">//不然 不吃</span></span><br><span class="line"></span><br><span class="line">肚子 = <span class="number">70</span>;</span><br><span class="line"><span class="keyword">let</span> 客製吃 = <span class="function"><span class="keyword">function</span>(<span class="params">食物量</span>) </span>&#123;</span><br><span class="line">  肚子 += 食物量;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (肚子 &lt;= <span class="number">40</span>) &#123;</span><br><span class="line">  客製吃(<span class="number">40</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (肚子 &lt;= <span class="number">60</span>) &#123;</span><br><span class="line">  客製吃(<span class="number">20</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  客製吃(<span class="number">-10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(肚子); <span class="comment">// 60</span></span><br></pre></td></tr></table></figure>
<h3 id="switch-條件判斷式（進入點）"><a href="#switch-條件判斷式（進入點）" class="headerlink" title="switch 條件判斷式（進入點）"></a>switch 條件判斷式（進入點）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 肚子飢餓程度 = <span class="number">4</span>; <span class="comment">// 4,3,2,1</span></span><br><span class="line"><span class="comment">// 沒有break 會一路吃到底</span></span><br><span class="line"><span class="keyword">switch</span> (肚子飢餓程度) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"20顆水餃"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"三片披薩"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"一個便當"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"喝杯飲料"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 刷牙洗臉 =&gt; 換衣服 =&gt; 穿鞋 =&gt; 出門</span></span><br></pre></td></tr></table></figure>
<h2 id="補充-二進位-與-Bitwise"><a href="#補充-二進位-與-Bitwise" class="headerlink" title="補充 (二進位 與 Bitwise)"></a>補充 (二進位 與 Bitwise)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二進位</span></span><br><span class="line"><span class="comment">// 1:1</span></span><br><span class="line"><span class="comment">// 2:10</span></span><br><span class="line"><span class="comment">// 3:11</span></span><br><span class="line"><span class="comment">// 4:100</span></span><br><span class="line"><span class="comment">// 5:101</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.toString(<span class="number">2</span>), b.toString(<span class="number">2</span>)); <span class="comment">// 10,101</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toString(2) -&gt; 2進位的意思</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Bitwise</span></span><br><span class="line"><span class="number">10</span> &gt;&gt; <span class="number">1</span>; <span class="comment">// 5 (去小數點除2)  // 01010 的全部位元向右移動一位數變成 00101</span></span><br><span class="line"><span class="number">13</span> &lt;&lt; <span class="number">1</span>; <span class="comment">// 26    //01101的全部位元向左移動一位數變成 11010</span></span><br><span class="line"><span class="number">13.9</span> &lt;&lt; <span class="number">1</span>; <span class="comment">// 26 (去小數點乘2)</span></span><br><span class="line"><span class="number">20.8</span> &gt;&gt; <span class="number">0</span>; <span class="comment">// 20</span></span><br><span class="line"><span class="number">20.3</span> &lt;&lt; <span class="number">0</span>; <span class="comment">// 20</span></span><br><span class="line"><span class="comment">// &gt;&gt;0 與 &lt;&lt;0 會無條件捨去小數點後面</span></span><br></pre></td></tr></table></figure>
<h3 id="寫程式建議步驟"><a href="#寫程式建議步驟" class="headerlink" title="寫程式建議步驟"></a>寫程式建議步驟</h3><p>1.思考 2.畫圖 3.寫程式</p>
<p><img src="https://i.imgur.com/6grzsUo.jpg" alt></p>
<h3 id="範例-3-window"><a href="#範例-3-window" class="headerlink" title="範例 3 window"></a>範例 3 window</h3><ol>
<li>window.alert ( 跳訊息 )</li>
<li>window.confirm ( 跳確認，回傳布林值 )</li>
<li>window.prompt ( 跳輸入框，回傳輸入內容 )</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 請輸入你的程式</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> checkName = <span class="built_in">window</span>.confirm(<span class="string">"願意告訴我名字嗎?"</span>); <span class="comment">// true / false</span></span><br><span class="line">  <span class="keyword">if</span> (checkName) &#123;</span><br><span class="line">    <span class="comment">// 給</span></span><br><span class="line">    <span class="keyword">let</span> input = <span class="built_in">window</span>.prompt(<span class="string">"請輸入名字"</span>); <span class="comment">// 輸入的內容</span></span><br><span class="line">    customHi(input);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不給</span></span><br><span class="line">    customHi(<span class="string">"No Name"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">customHi</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// window.alert("Hi!!! " + message);</span></span><br><span class="line">    <span class="built_in">window</span>.alert(<span class="string">`Hi!!! <span class="subst">$&#123;message&#125;</span>`</span>); <span class="comment">// ES6 寫法</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// customHi("Alex");</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h2 id="來人阿-開工吧-DOM-與事件操作"><a href="#來人阿-開工吧-DOM-與事件操作" class="headerlink" title="來人阿!開工吧 - DOM 與事件操作"></a>來人阿!開工吧 - DOM 與事件操作</h2><h3 id="三劍客"><a href="#三劍客" class="headerlink" title="三劍客"></a>三劍客</h3><p>1.Who<br>2.What<br>3.When</p>
<h3 id="認識-function-做點事"><a href="#認識-function-做點事" class="headerlink" title="認識 function 做點事"></a>認識 function 做點事</h3><p>加上小括號會馬上做<br>所以在監聽後面不需要加括號<br>ex: <code>addEventListener(&quot;click&quot;, greeting);</code></p>
<h3 id="getElement-與-query"><a href="#getElement-與-query" class="headerlink" title="getElement 與 query"></a>getElement 與 query</h3><p>getElement:<br>1.getElementById (效能較佳，但須考量效率)<br>2.getElementByClassName =&gt; collection (動態更新/無法跑迴圈)<br>3.getElementByTagName</p>
<p>query:<br>1.querySelector<br>2.querySelectorAll =&gt; list (靜態不變/有 forEach)</p>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h3 id="範例-4"><a href="#範例-4" class="headerlink" title="範例 4"></a>範例 4</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeting</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">"無名氏"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.confirm(<span class="string">"願意告訴我你的稱呼嗎？"</span>)) &#123;</span><br><span class="line">    <span class="comment">// name = window.prompt("請輸入姓名：", "").trim() || name;</span></span><br><span class="line">    <span class="comment">// null.trim() =&gt; ERROR</span></span><br><span class="line">    <span class="keyword">let</span> input = <span class="built_in">window</span>.prompt(<span class="string">"請輸入姓名："</span>, <span class="string">""</span>); <span class="comment">// null,"","   ","ALEX","  ALEX  "</span></span><br><span class="line">    name = (input &amp;&amp; input.trim()) || name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.alert(<span class="string">`嗨，<span class="subst">$&#123;name&#125;</span>！`</span>);</span><br><span class="line">&#125;</span><br><span class="line">trim =&gt; 可以使用這個來去頭尾;</span><br></pre></td></tr></table></figure>
<h3 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp; / ||"></a>&amp;&amp; / ||</h3><p>可以拿來做判斷式 , 也能拿來流程控管</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有不做就不做</span></span><br><span class="line">case1 <span class="literal">true</span> &amp;&amp; case2 <span class="literal">true</span>  <span class="comment">// case1 與 case2 都會做 -&gt; 回傳case2 做</span></span><br><span class="line">case1 <span class="literal">true</span> &amp;&amp; case2 <span class="literal">false</span> <span class="comment">// case1做 但 case2 不做 -&gt; 回傳case2 不做</span></span><br><span class="line">case1 <span class="literal">false</span> &amp;&amp; case2 <span class="literal">true</span> <span class="comment">// case1不做 ,case2 做 -&gt; 回傳case1 不做</span></span><br><span class="line">case1 <span class="literal">false</span> &amp;&amp; case2 <span class="literal">false</span> <span class="comment">// case1 與 case2 都不做 -&gt; 回傳case1 不做</span></span><br><span class="line"><span class="comment">// 有中即離開</span></span><br><span class="line">case1 <span class="literal">true</span> || case2 <span class="literal">true</span>  <span class="comment">// case1中即離開 -&gt; 回傳case1 中</span></span><br><span class="line">case1 <span class="literal">true</span> || case2 <span class="literal">false</span> <span class="comment">// case1中即離開 -&gt; 回傳case1 中</span></span><br><span class="line">case1 <span class="literal">false</span> || case2 <span class="literal">true</span>  <span class="comment">// case1沒中 ,但case2中 -&gt; 回傳case2 中</span></span><br><span class="line">case1 <span class="literal">false</span> || case2 <span class="literal">false</span> <span class="comment">// case1 與 case2 都沒做 -&gt; 回傳false</span></span><br><span class="line"><span class="comment">// 範例</span></span><br><span class="line"><span class="number">1</span>&amp;&amp;<span class="number">2</span>&amp;&amp;<span class="number">3</span> <span class="comment">// =&gt; 3</span></span><br><span class="line"><span class="number">1</span>&amp;&amp;<span class="number">2</span>||<span class="number">3</span> <span class="comment">// =&gt; 2  // 2 中  且 後面為or運算子 ,即跳開</span></span><br><span class="line"><span class="number">1</span>&amp;&amp;<span class="number">0</span>||<span class="number">3</span> <span class="comment">// =&gt; 3  // 數字0 Boolean為false</span></span><br><span class="line"><span class="number">1</span>||<span class="number">2</span>&amp;&amp;<span class="number">0</span>  <span class="comment">//  =&gt; 1 後面為or運算子 ,即跳開</span></span><br><span class="line"><span class="number">3</span> &amp;&amp; <span class="number">5</span> <span class="comment">//=&gt; 5</span></span><br><span class="line"><span class="number">3</span> || <span class="number">5</span> <span class="comment">//=&gt; 3</span></span><br></pre></td></tr></table></figure>
<h3 id="範例-5"><a href="#範例-5" class="headerlink" title="範例 5"></a>範例 5</h3><ol>
<li>程式盡量不要有大量相同的 Code =&gt; 整理</li>
<li>快速大量選取快捷鍵 =&gt; ctrl+d (選) ctrl+k(不選)</li>
<li>怎麼選東西很重要</li>
<li>forEach 參數名稱是自己取的</li>
<li>capture =&gt; target =&gt; bubble<br>滑鼠進入/離開事件<br>1.mouseover/mouseout =&gt;<br>(1) 在乎的是 Taget (會產生畫面一直跳)<br>(2) 會冒泡 (bubble)<br>(3) addEventListener 把 useCapture 設 true 就會反向</li>
</ol>
<p>Target : <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Event/target" target="_blank" rel="noopener">https://developer.mozilla.org/zh-TW/docs/Web/API/Event/target</a></p>
<p>2.mouseenter/mouseleave =&gt;<br>(1) 在乎的是 currentTarget (綁定事件的東西)<br>(2) 不會冒泡 (bubble)</p>
<p>***根據需要針對對象選擇</p>
<p>字串運算 =&gt; 先挖洞在左右補+</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// querySelectorAll 迴圈處理</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">"img"</span>).forEach(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</span><br><span class="line">  img.addEventListener(<span class="string">"mouseover"</span>, inHandler);</span><br><span class="line">  img.addEventListener(<span class="string">"mouseout"</span>, outHandler);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getElementsByTagName 迴圈處理</span></span><br><span class="line"><span class="keyword">let</span> imgs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span><br><span class="line">  imgs[<span class="number">0</span>].addEventListener(<span class="string">"mouseover"</span>, inHandler);</span><br><span class="line">  imgs[<span class="number">0</span>].addEventListener(<span class="string">"mouseout"</span>, outHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><ol>
<li>事件偵聽的 this<br>who =&gt; when =&gt;what<br>呼叫事件的人(currentTarget)</li>
</ol>
<p><img src="https://i.imgur.com/DSIyJy0.gif" alt><br>圖片的範例<br>this =&gt; bronze currentTarget<br>(e.currentTarget =&gt; 事件綁定的對象)</p>
<ol start="2">
<li><p>箭頭函式沒有 this</p>
</li>
<li><p>this =&gt; js 對象</p>
</li>
<li>\$(this) =&gt; jq 對象</li>
</ol>
<h3 id="三元運算"><a href="#三元運算" class="headerlink" title="三元運算"></a>三元運算</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">check ? a : b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (check) &#123;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>current 綁定事件那一個<br>target 最深那一層的 DOM<br><img src="https://i.imgur.com/3Sjp1Dp.gif" alt></p>
<p>mouseenter 不會有 bubble(不會有冒泡)<br><img src="https://i.imgur.com/GSAc1ac.gif" alt></p>
<p><a href="https://codepen.io/achen224/pen/jgPZrw" target="_blank" rel="noopener">alex example</a><br>***使用 div.id.length 做判斷<br>=&gt; 思考兩組需要綁定的差異，設定 id 長度不同，所以用這個來做區分</p>
<h3 id="範例-6"><a href="#範例-6" class="headerlink" title="範例 6"></a>範例 6</h3><ol>
<li>要畫有幫助思考的流程圖(不同事件差異要出來</li>
<li>迴圈中寫 function 會產生多組重複 function</li>
<li>substr : 切西瓜 (第一刀位置,切多少字)</li>
<li>NodList 沒有 indexOf 要用 […NodeList] 轉成 List</li>
<li>轉數字 : *1 -0 /1 parseInt()</li>
</ol>
<p><img src="https://i.imgur.com/IBigYax.gif" alt><br>藍色是正確方式<br>按(找人) =&gt; 換號(依照不同人用不同方式) =&gt; 換圖</p>
<p>substr(重哪裡切,切多寬)</p>
<p>當數字超過(過大或過小時)有兩種選擇:下面寫法為第一種選擇<br>(1) 過大回到 0，過小回到最後 (一種迴圈)<br>(2) 過大停在最後，過小停在 0 (前後不動)</p>
<p>1.改在 changeView() (改變選圖時)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> imgLength = imges.length;</span><br><span class="line"><span class="comment">// 判斷如果imgNumber超過圖片數量就歸0</span></span><br><span class="line"><span class="comment">// 如果沒有再判斷是否有 &lt; 0 則改成圖片長度-1</span></span><br><span class="line"><span class="comment">// 其他就維持不變</span></span><br><span class="line">imgNumber =</span><br><span class="line">  imgNumber &gt;= imgLength ? <span class="number">0</span> : imgNumber &lt; <span class="number">0</span> ? imgLength - <span class="number">1</span> : imgNumber;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (imgNumber &gt;= imgLength) &#123;</span><br><span class="line">  imgNumber = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (imgNumber &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  imgNumber = imgLength - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  imgNumber = imgNumber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.改在產生 imgNumber 時(改計算時)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// imges.length = 5</span></span><br><span class="line"><span class="comment">// prev</span></span><br><span class="line"><span class="comment">// 4 =&gt; 3 =&gt; 2 =&gt; 1 =&gt; 0 =&gt; -1(x)</span></span><br><span class="line"><span class="comment">// // 當過少時有兩種選擇</span></span><br><span class="line"><span class="comment">// (1) 回到最後 (4 = imges.length-1)</span></span><br><span class="line"><span class="comment">// (2) 回到開頭 (0)</span></span><br><span class="line">imgNumber = imgNumber - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (imgNumber &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  imgNumber = imges.length - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// next</span></span><br><span class="line"><span class="comment">// 0 =&gt; 1 =&gt; 2 =&gt; 3 =&gt; 4 =&gt; 5(x)</span></span><br><span class="line"><span class="comment">// 當過多時有兩種選擇</span></span><br><span class="line"><span class="comment">// (1) 回到開頭 (0)</span></span><br><span class="line"><span class="comment">// (2) 回到最後 (4 = imges.length-1)</span></span><br><span class="line">imgNumber = imgNumber + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (imgNumber &gt;= imges.length) &#123;</span><br><span class="line">  imgNumber = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改成取餘數，餘數可以產生數量範圍內的編號</span></span><br><span class="line"><span class="comment">// Ex: 所有數字 / 3 會產生的餘數 = 0,1,2</span></span><br><span class="line"><span class="comment">// Ex: 所有數字 / 5 會產生的餘數 = 0,1,2,3,4</span></span><br><span class="line"><span class="comment">// prev</span></span><br><span class="line">imgNumber = (imgNumber - <span class="number">1</span> + imges.length) % imges.length;</span><br><span class="line"><span class="comment">// (0 - 1 + 5) % 5 = 4</span></span><br><span class="line"><span class="comment">// (1 - 1 + 5) % 5 = 0</span></span><br><span class="line"><span class="comment">// (2 - 1 + 5) % 5 = 1</span></span><br><span class="line"><span class="comment">// (3 - 1 + 5) % 5 = 2</span></span><br><span class="line"><span class="comment">// (4 - 1 + 5) % 5 = 3</span></span><br><span class="line"><span class="comment">// next</span></span><br><span class="line">imgNumber = (imgNumber + <span class="number">1</span> + imges.length) % imges.length;</span><br><span class="line"><span class="comment">// (0 + 1 + 5) % 5 = 1</span></span><br><span class="line"><span class="comment">// (1 + 1 + 5) % 5 = 2</span></span><br><span class="line"><span class="comment">// (2 + 1 + 5) % 5 = 3</span></span><br><span class="line"><span class="comment">// (3 + 1 + 5) % 5 = 4</span></span><br><span class="line"><span class="comment">// (4 + 1 + 5) % 5 = 0</span></span><br></pre></td></tr></table></figure>
<p>// 結合 prev 跟 next</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"prev"</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">"next"</span>:</span><br><span class="line">	imgNumber = ( imgNumber + (<span class="keyword">this</span>.id === <span class="string">"prev"</span> ? <span class="number">-1</span> : <span class="number">1</span>) + imges.length ) % imges.length ;</span><br><span class="line">	<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = &#123;</span><br><span class="line">  prev: <span class="number">-1</span>,</span><br><span class="line">  next: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">this</span>.id) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"prev"</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"next"</span>:</span><br><span class="line">    imgNumber = (imgNumber + map[<span class="keyword">this</span>.id] + images.length) % images.length;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="與"><a href="#與" class="headerlink" title="== 與 ==="></a>== 與 ===</h3><p>== : 等於<br>=== : 完全等於</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">a == b; <span class="comment">// true</span></span><br><span class="line">a === b; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> a; <span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> b; <span class="comment">// object</span></span><br></pre></td></tr></table></figure>
<h3 id="箭頭函式"><a href="#箭頭函式" class="headerlink" title="箭頭函式"></a>箭頭函式</h3><p>() =&gt; {} // 一行時{}可以省略</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">msg</span> =&gt;</span> <span class="built_in">console</span>.log(msg))(<span class="number">123</span>);</span><br><span class="line"><span class="comment">//((msg) =&gt; &#123;console.log(msg);&#125;)(123);</span></span><br><span class="line"><span class="comment">// 相當於下面寫法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="number">123</span>);</span><br></pre></td></tr></table></figure>
<h2 id="這包東西不簡單-陣列與物件的管理應用"><a href="#這包東西不簡單-陣列與物件的管理應用" class="headerlink" title="這包東西不簡單 - 陣列與物件的管理應用"></a>這包東西不簡單 - 陣列與物件的管理應用</h2><h2 id="一坨與一串東西的特性"><a href="#一坨與一串東西的特性" class="headerlink" title="一坨與一串東西的特性"></a>一坨與一串東西的特性</h2><h3 id="資料紀錄"><a href="#資料紀錄" class="headerlink" title="資料紀錄"></a>資料紀錄</h3><p>通常無法確認多語系要用哪個語言顯示，盡量使用中性資料 EX:數字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 物件 管理一個對象 (可以指向特定Key Key Value)</span></span><br><span class="line"><span class="keyword">let</span> alex = &#123;</span><br><span class="line">  name: <span class="string">"alex"</span>,</span><br><span class="line">  age: <span class="number">36</span>,</span><br><span class="line">  merry: <span class="literal">true</span>,</span><br><span class="line">  sex: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sara = &#123;</span><br><span class="line">  name: <span class="string">"sara"</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  merry: <span class="literal">true</span>,</span><br><span class="line">  sex: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 陣列 管理一串資料 (只能知道先後順序 Index Value)</span></span><br><span class="line"><span class="keyword">let</span> family = [alex, sara][</span><br><span class="line">  <span class="comment">//             0    1</span></span><br><span class="line"></span><br><span class="line">  (alex, sara)</span><br><span class="line">].forEach(<span class="function">(<span class="params">people, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(people, index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="範例-7"><a href="#範例-7" class="headerlink" title="範例 7"></a>範例 7</h3><ol>
<li>CSR(Client Side Rendom) VS SSR(Server Side Rendom)<br>SSR:網頁檢視原始碼看到的(程式產資料)<br>CSR:網頁檢視原始碼不一定看得到(資料產程式)</li>
<li>物件(一根香蕉) VS 陣列(一串香蕉)</li>
<li>陣列操作</li>
<li>計時器 setTimeout(做一次) / setInterval(一直做)</li>
</ol>
<p>資料塞入 DOM =&gt; 初始化畫面</p>
<p>麥當勞點餐<br>現在:點完去旁邊點餐 (非同步<br>以前：點完好了再下一位（同步</p>
<p>遞迴 =&gt; 自己呼叫自己</p>
<h3 id="範例-9"><a href="#範例-9" class="headerlink" title="範例 9"></a>範例 9</h3><ol>
<li>輸入 =&gt; 送出(button) =&gt; 抽籤</li>
<li>click(要自己檢查資料) / submit(form 送出)</li>
<li>slice 切出新的陣列 / splice 切原始陣列 (處理陣列)<br><strong>slice 不改變原本陣列</strong><br><strong>splice 會改變</strong>12</li>
<li>split 針對 string 處理切割</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.slice(<span class="number">1</span>, <span class="number">2</span>), a); <span class="comment">// [2],[1,2,3,4,5]</span></span><br><span class="line"><span class="comment">// slice 回傳陣列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 刪除index=1 刪除1個 再index=1插入alex</span></span><br><span class="line"><span class="comment">// (刪除或插入位置,刪除個數,插入資料)</span></span><br><span class="line">a.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">"alex"</span>); <span class="comment">// [1,'alex',3,4,5]</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//split 針對字串</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">"1,2,3,4,5"</span>;</span><br><span class="line"><span class="keyword">let</span> ary = b.split(<span class="string">","</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ary); <span class="comment">// ['1','2','3','4','5']</span></span><br><span class="line"><span class="keyword">let</span> ary2 = b.split(<span class="string">"3"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ary2); <span class="comment">// ["'1,2,'","',4,5'"]</span></span><br></pre></td></tr></table></figure>
<h2 id="你怎麼說我怎麼做-條件判斷與流程控制"><a href="#你怎麼說我怎麼做-條件判斷與流程控制" class="headerlink" title="你怎麼說我怎麼做 - 條件判斷與流程控制"></a>你怎麼說我怎麼做 - 條件判斷與流程控制</h2><h3 id="for-迴圈-vs-while-迴圈"><a href="#for-迴圈-vs-while-迴圈" class="headerlink" title="for 迴圈 vs while 迴圈"></a>for 迴圈 vs while 迴圈</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// For迴圈</span></span><br><span class="line"><span class="keyword">let</span> forCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ary.length; i++) &#123;</span><br><span class="line">  forCount = forCount + ary[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(forCount);</span><br><span class="line"></span><br><span class="line"><span class="comment">// While迴圈</span></span><br><span class="line"><span class="keyword">let</span> whileCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> temp = [...ary];</span><br><span class="line"><span class="keyword">while</span> (temp.length) &#123;</span><br><span class="line">  whileCount += temp.shift();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(whileCount);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ForEach</span></span><br><span class="line"><span class="keyword">let</span> foreachCount = <span class="number">0</span>;</span><br><span class="line">ary.forEach(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  foreachCount += num;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(foreachCount);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面都需要宣告一個值才能開始</span></span><br><span class="line"><span class="comment">// Reduce preVal:上次值 ,currentVal:這次值 ,逗號後面是預設值(0)</span></span><br><span class="line"><span class="keyword">let</span> reduceCount = ary.reduce(<span class="function">(<span class="params">preVal, currentVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(preVal, currentVal);</span><br><span class="line">  <span class="keyword">return</span> preVal + currentVal;</span><br><span class="line">&#125;, <span class="number">0</span>); <span class="comment">// 這個0就是初始值</span></span><br><span class="line"><span class="built_in">console</span>.log(reduceCount);</span><br></pre></td></tr></table></figure>
<h3 id="遞迴"><a href="#遞迴" class="headerlink" title="遞迴"></a>遞迴</h3><p>1.往前走(呼叫自己) 2.有 return 條件 3.邊界條件</p>
<h3 id="範例-10"><a href="#範例-10" class="headerlink" title="範例 10"></a>範例 10</h3><ol>
<li>階乘 輸入 5 拿到(5!) 5 _ 4 _ 3 _ 2 _ 1</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example1</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = num; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">    <span class="comment">// 5 5 &gt; 1 5--</span></span><br><span class="line">    <span class="comment">// 4 4 &gt; 1 4--</span></span><br><span class="line">    <span class="comment">// 3 3 &gt; 1 3--</span></span><br><span class="line">    n *= i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(example1(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// recursion</span></span><br><span class="line"><span class="comment">// 遞迴不會有for複雜的邏輯，取而代之是更複雜的邏輯</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.往前走(呼叫自己) : example1_re(num - 1)</span></span><br><span class="line"><span class="comment">// 2.有return條件</span></span><br><span class="line"><span class="comment">// 3.邊界條件 :  num &lt;= 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example1_re</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 邊界條件</span></span><br><span class="line">  <span class="keyword">return</span> num * example1_re(num - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(example1_re(<span class="number">5</span>));</span><br><span class="line"><span class="comment">// 5 * example1_re(4)</span></span><br><span class="line"><span class="comment">// 5 * 4 * example1_re(3)</span></span><br><span class="line"><span class="comment">// 5 * 4 * 3 * example1_re(2)</span></span><br><span class="line"><span class="comment">// 5 * 4 * 3 * 2 * example1_re(1)</span></span><br><span class="line"><span class="comment">// 5 * 4 * 3 * 2 * 1</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>fibonacci : 前兩個是 1，第三個開始為前兩個和</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用while迴圈取出fibonacci</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 前兩位是1</span></span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> n1 = <span class="number">1</span>; <span class="comment">// 第一位</span></span><br><span class="line">  <span class="keyword">let</span> n2 = <span class="number">1</span>; <span class="comment">// 第二位</span></span><br><span class="line">  <span class="keyword">let</span> temp = n1 + n2; <span class="comment">// 第三位</span></span><br><span class="line">  <span class="comment">// 因為有三位所以只要算到n-2位</span></span><br><span class="line">  <span class="comment">// 1-&gt;n-2,2-&gt;n-1,3-&gt;n</span></span><br><span class="line">  <span class="comment">// 為了要算到第n-2位，一直--到剩下2</span></span><br><span class="line">  <span class="keyword">while</span> (num &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    temp = n1 + n2; <span class="comment">// 算出下一位(前兩位和)</span></span><br><span class="line">    n1 = n2; <span class="comment">// 將第二位當成第一位</span></span><br><span class="line">    n2 = temp; <span class="comment">// 將第三位當成第二位</span></span><br><span class="line">    <span class="comment">// 一直往後平移</span></span><br><span class="line">    num--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EX: fibonacci(5)</span></span><br><span class="line"><span class="comment">//fibonacci(5) =&gt; 1   1   2   3   [5]</span></span><br><span class="line"><span class="comment">//               n1  n2  temp          (迴圈第一次)</span></span><br><span class="line"><span class="comment">//                   n1  n2   temp     (迴圈第二次)</span></span><br><span class="line"><span class="comment">//                       n1  n2   temp (迴圈第三次)</span></span><br><span class="line"><span class="comment">// 第一段判斷</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">5</span> &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 5不小於等於2繼續往下</span></span><br><span class="line"><span class="comment">// 初始化資料</span></span><br><span class="line"><span class="keyword">let</span> n1 = <span class="number">1</span>; <span class="comment">// 第一位</span></span><br><span class="line"><span class="keyword">let</span> n2 = <span class="number">1</span>; <span class="comment">// 第二位</span></span><br><span class="line"><span class="keyword">let</span> temp = n1 + n2; <span class="comment">// 第三位</span></span><br><span class="line"><span class="comment">//進入迴圈時</span></span><br><span class="line"><span class="comment">//第一次</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">5</span> &gt; <span class="number">2</span>) &#123;</span><br><span class="line">  temp = n1 + n2; <span class="comment">// (1+1 = 2)</span></span><br><span class="line">  n1 = n2; <span class="comment">//(1)</span></span><br><span class="line">  n2 = temp; <span class="comment">// (2)</span></span><br><span class="line">  num--; <span class="comment">// num = 5-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二次</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">4</span> &gt; <span class="number">2</span>) &#123;</span><br><span class="line">  temp = temp + n1; <span class="comment">// (1+2=3)</span></span><br><span class="line">  n1 = n2; <span class="comment">//(2)</span></span><br><span class="line">  n2 = temp; <span class="comment">// (3)</span></span><br><span class="line">  num--; <span class="comment">// num = 4-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第三次</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">3</span> &gt; <span class="number">2</span>) &#123;</span><br><span class="line">  temp = temp + n1; <span class="comment">// (2+3=5)</span></span><br><span class="line">  n1 = n2; <span class="comment">//(3)</span></span><br><span class="line">  n2 = temp; <span class="comment">// (5)</span></span><br><span class="line">  num--; <span class="comment">// num = 3-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第四次</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">2</span> &gt; <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="comment">// 條件不成立跳出迴圈</span></span><br><span class="line">  temp = temp + n1;</span><br><span class="line">  n1 = n2;</span><br><span class="line">  n2 = temp;</span><br><span class="line">  num--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> temp; <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - 更進一步</title>
    <url>/2019/08/03/JS-JS_Next/</url>
    <content><![CDATA[<h2 id="Pmroise-async-await-…"><a href="#Pmroise-async-await-…" class="headerlink" title="Pmroise , async_await …"></a>Pmroise , async_await …</h2><a id="more"></a>
<ol>
<li>call back<br>補充:<a href="https://cythilya.github.io/2018/10/30/callback/" target="_blank" rel="noopener">https://cythilya.github.io/2018/10/30/callback/</a></li>
<li>Synchronous vs Asynchronous<br>顧客：阻塞(憨厚) vs 非阻塞(變通) polling<br>老闆：同步(臭跩) vs 非同步(親切)<br>ex:公司報到+銀行開戶<br><strong><em>避免過度阻塞</em></strong></li>
</ol>
<p>polling<br>longpolling<br>streaming (websocket)<br>補充：<br><a href="https://blog.niclin.tw/2017/10/28/%E7%8D%B2%E5%BE%97%E5%AF%A6%E6%99%82%E6%9B%B4%E6%96%B0%E7%9A%84%E6%96%B9%E6%B3%95polling-comet-long-polling-websocket/" target="_blank" rel="noopener">https://blog.niclin.tw/2017/10/28/%E7%8D%B2%E5%BE%97%E5%AF%A6%E6%99%82%E6%9B%B4%E6%96%B0%E7%9A%84%E6%96%B9%E6%B3%95polling-comet-long-polling-websocket/</a></p>
<p><a href="https://blog.gtwang.org/web-development/websocket-protocol/" target="_blank" rel="noopener">https://blog.gtwang.org/web-development/websocket-protocol/</a></p>
<p>補充：<br><a href="https://johlmike.wordpress.com/2016/07/08/%E5%90%8C%E6%AD%A5synchronous%E3%80%81%E7%95%B0%E6%AD%A5asynchronous%E3%80%81%E9%98%BB%E5%A1%9Eblock%E3%80%81%E9%9D%9E%E9%98%BB%E5%A1%9Enon-block/" target="_blank" rel="noopener">https://johlmike.wordpress.com/2016/07/08/%E5%90%8C%E6%AD%A5synchronous%E3%80%81%E7%95%B0%E6%AD%A5asynchronous%E3%80%81%E9%98%BB%E5%A1%9Eblock%E3%80%81%E9%9D%9E%E9%98%BB%E5%A1%9Enon-block/</a><br>阻塞與非阻塞主要是描述請求在等待結果時的狀態<br>同步與異步主要是描述回傳的聯絡方式</p>
<p>非同步有<br>1.setInterval setTimeout 2.一般的 eventhandler<br>3.server 的呼叫</p>
<ol start="3">
<li>佇列、堆疊、事件循環<br>佇列(Queue)：先進先出 ex：排隊、jQuery 動畫<br>堆疊(Stack)：後進先出 ex：河內塔<br>事件循環(Event Loop):從佇列提取到堆疊執行<br>補充:<br><a href="https://pjchender.blogspot.com/2017/08/javascript-learn-event-loop-stack-queue.html" target="_blank" rel="noopener">https://pjchender.blogspot.com/2017/08/javascript-learn-event-loop-stack-queue.html</a></li>
</ol>
<p>非同步處理:主流程處理完後處理<br>Stack 不清空，Queue 是無法往下做的<br>補充：<br><a href="https://ithelp.ithome.com.tw/articles/10200054?sc=iThelpR" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10200054?sc=iThelpR</a><br>loupe：<br><a href="http://latentflip.com/loupe/" target="_blank" rel="noopener">http://latentflip.com/loupe/</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'A'</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(B<span class="string">')</span></span><br><span class="line"><span class="string">    &#125;, 500)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function C()&#123;</span></span><br><span class="line"><span class="string">    setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="string">        console.log('</span>C<span class="string">')</span></span><br><span class="line"><span class="string">    &#125;, 2000)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// B A C</span></span><br><span class="line"><span class="string">A()</span></span><br><span class="line"><span class="string">B()</span></span><br><span class="line"><span class="string">C()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 不好的寫法</span></span><br><span class="line"><span class="string">A()</span></span><br><span class="line"><span class="string">setTimeout(B,1000)</span></span><br><span class="line"><span class="string">setTimeout(C,1500)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">log(<span class="string">'=====start====='</span>)</span><br><span class="line">log(<span class="string">'a'</span>);</span><br><span class="line">log(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">while</span> (pass() &lt; <span class="number">5000</span>) &#123;&#125;</span><br><span class="line">log(<span class="string">'c'</span>);</span><br><span class="line"><span class="string">``</span>log(<span class="string">'====`=end====='</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timerHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  pass() &lt; <span class="number">5000</span> ? setTimeout(timerHandler, <span class="number">0</span>) : log(<span class="string">'timer ok'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">log(<span class="string">'=====start====='</span>)</span><br><span class="line">log(<span class="string">'a'</span>);</span><br><span class="line">log(<span class="string">'b'</span>);</span><br><span class="line"><span class="keyword">while</span> (pass() &lt; <span class="number">5000</span>) &#123;&#125;</span><br><span class="line">setTimeout(timerHandler, <span class="number">0</span>);</span><br><span class="line">log(<span class="string">'c'</span>);</span><br><span class="line">log(<span class="string">'=====end====='</span>)</span><br></pre></td></tr></table></figure>
<p><code>+new Date()</code> 等同於 <code>new Date().getTime()</code><br><strong><em>不要用 Timer 控流程，時間不準</em></strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"MY_ROOM": &#123;</span><br><span class="line">    "prefix": "room",</span><br><span class="line">    "body": [</span><br><span class="line">      "const time = +new Date();",</span><br><span class="line">      "const pass = () =&gt; +new Date() - time;",</span><br><span class="line">      "const log = msg =&gt; &#123;",</span><br><span class="line">      "console.log(msg, `$&#123;pass()&#125;ms`);",</span><br><span class="line">      "&#125;;",</span><br><span class="line">      "",</span><br><span class="line">      "log('===== Start =====');",</span><br><span class="line">      "$1",</span><br><span class="line">      <span class="string">"log('===== End =====');"</span></span><br><span class="line">    ],</span><br><span class="line">    "description": "MY_ROOM"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>Promise<br>(1) 可以做同步組合<br>(2) Queue 在不同瀏覽器可能會有不同表現</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="function">(<span class="params">time, msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    log(<span class="string">`Promise Create: <span class="subst">$&#123;msg&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      resolve(<span class="string">`Promise OK: <span class="subst">$&#123;msg&#125;</span>`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">`Promise OK: <span class="subst">$&#123;msg&#125;</span>`</span>);</span><br><span class="line">      &#125;, time);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 觀戰重點1： Promise: 同步 then:非同步</span></span><br><span class="line">log(<span class="string">"==== A ===="</span>);</span><br><span class="line">promise(<span class="number">0</span>, <span class="string">"A"</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> log(result));</span><br><span class="line">log(<span class="string">"==== B ===="</span>);</span><br><span class="line">promise(<span class="number">1000</span>, <span class="string">"B"</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> log(result));</span><br><span class="line">log(<span class="string">"==== B ===="</span>);</span><br><span class="line">promise(<span class="number">500</span>, <span class="string">"C"</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> log(result));</span><br><span class="line"><span class="comment">// 觀戰重點2: stack 阻塞</span></span><br><span class="line"><span class="keyword">while</span> (pass() &lt; <span class="number">2000</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 觀戰重點3: timeout人權議題</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  log(<span class="string">"timer"</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">log(<span class="string">"==== A ===="</span>);</span><br><span class="line">promise(<span class="number">0</span>, <span class="string">"A"</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> log(result));</span><br></pre></td></tr></table></figure>
<p>promise：等到允許授權才能往下走<br>then 須等到 resolve</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 觀戰重點4: 執行順序，將同步非同步變成依序執行</span></span><br><span class="line"><span class="comment">// 如果再then裡catch會往下走，如果沒有就不會再往下走</span></span><br><span class="line">promise(<span class="number">0</span>, <span class="string">"A"</span>)</span><br><span class="line">  .then(</span><br><span class="line">    result =&gt; log(result),</span><br><span class="line">    error =&gt; log(<span class="string">`error:<span class="subst">$&#123;error&#125;</span>`</span>)</span><br><span class="line">  )</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> promise(<span class="number">3000</span>, <span class="string">"B"</span>))</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> log(result))</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> promise(<span class="number">0</span>, <span class="string">"C"</span>))</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> log(result))</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> promise(<span class="number">2000</span>, <span class="string">"D"</span>))</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> log(result))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> log(<span class="string">`error:<span class="subst">$&#123;error&#125;</span>`</span>));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">log(<span class="string">"===== Start ====="</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// if timer ?</span></span><br><span class="line"></span><br><span class="line">promise(<span class="number">0</span>, <span class="string">"A"</span>)</span><br><span class="line">  .then(</span><br><span class="line">    result =&gt; log(result),</span><br><span class="line">    error =&gt; log(<span class="string">`error:<span class="subst">$&#123;error&#125;</span>`</span>)</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// .catch(error =&gt; log(`error:$&#123;error&#125;`))</span></span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> promise(<span class="number">3000</span>, <span class="string">"B"</span>))</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> log(result))</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> promise(<span class="number">0</span>, <span class="string">"C"</span>))</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> log(result))</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> promise(<span class="number">2000</span>, <span class="string">"D"</span>))</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> log(result))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> log(<span class="string">`error:<span class="subst">$&#123;error&#125;</span>`</span>))</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> log(result)); <span class="comment">// final</span></span><br><span class="line"></span><br><span class="line">log(<span class="string">"===== End ====="</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// if blocking ?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// example 讀取API資料</span></span><br><span class="line"><span class="comment">// 1.使用者觸發 -&gt; 2.loading(true) -&gt; 3.發出請求 -&gt; 4.結果回應 -&gt; 5.loading(false)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  log(<span class="string">"timer"</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">log(<span class="string">"==== A ===="</span>);</span><br><span class="line">promise(<span class="number">0</span>, <span class="string">"A"</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> log(result));</span><br><span class="line"><span class="comment">// log("==== B ====");</span></span><br><span class="line"><span class="comment">// promise(1000, "B").then(result =&gt; log(result));</span></span><br><span class="line"><span class="comment">// log("==== C ====");</span></span><br><span class="line"><span class="comment">// promise(500, "C").then(result =&gt; log(result));</span></span><br><span class="line"><span class="comment">// while (pass() &lt; 2000) &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p>finally<br><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Control_flow_and_error_handling" target="_blank" rel="noopener">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Control_flow_and_error_handling</a><br><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally" target="_blank" rel="noopener">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    log(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    log(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  log(<span class="number">4</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br></pre></td></tr></table></figure>
<p>後進先出範例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">後進先出;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  A();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"B"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  B();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"C"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C();</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>Pmroise.all vs Promise.race<br>all：全部一起做，時間最長的<br>race:只取最快回來的資料</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">  promise(<span class="number">0</span>, <span class="string">"A"</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">    .catch(<span class="function"><span class="params">result</span> =&gt;</span> result),</span><br><span class="line">  promise(<span class="number">3000</span>, <span class="string">"B"</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">    .catch(<span class="function"><span class="params">result</span> =&gt;</span> result),</span><br><span class="line">  promise(<span class="number">2000</span>, <span class="string">"C"</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">    .catch(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">]).then(<span class="function"><span class="params">result</span> =&gt;</span> log(<span class="string">`all <span class="subst">$&#123;result&#125;</span>`</span>));</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>Generator<br>function*()<br>會自動產生 return<br>建議為每個 function 做適當的 return 值</li>
</ol>
<p>Generaor+Promise 的範例(async await 的前身)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> gen = genFn();</span><br><span class="line">gen</span><br><span class="line">  .next()</span><br><span class="line">  .value.then(<span class="function"><span class="params">result</span> =&gt;</span> gen.next(result))</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> result.value)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> gen.next(result))</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> result.value)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> gen.next(result))</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> log(result));</span><br><span class="line"></span><br><span class="line"><span class="comment">//每個next都是做一個 create promise</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1~2  &#123;value:Promise A, done:false&#125;</span></span><br><span class="line"><span class="comment">//4    &#123;value:Promise B, done:false&#125;</span></span><br><span class="line"><span class="comment">//6    &#123;value:Promise C, done:false&#125;</span></span><br><span class="line"><span class="comment">//8    &#123;value:&#123;&#125;, done:true&#125;</span></span><br></pre></td></tr></table></figure>
<p>補充:所有 function 都應該有 return，沒有 return 他就是 undefined<br>如果是事件觸發，那 return 值就會沒人會使用到</p>
<ol start="7">
<li>async_await<br>async =&gt; 非同步 , await =&gt; 等<br>async await =&gt; 等非同步</li>
</ol>
<p>補充:<br>7.1 await 只能存在 async function 裡面<br>7.2 await 必須等非同步(必須等非同步(promise))</p>
<p>重要:先讓 promise 做完(同步)，再一起 await，不要一邊 promise，一邊 await，因為會讓同步的 promise 的同步做成非同步的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = &#123;&#125;;</span><br><span class="line">  resule[<span class="string">"A"</span>] = <span class="keyword">await</span> promise(<span class="number">0</span>, <span class="string">"A"</span>);</span><br><span class="line">  resule[<span class="string">"B"</span>] = <span class="keyword">await</span> promise(<span class="number">3000</span>, <span class="string">"B"</span>);</span><br><span class="line">  resule[<span class="string">"C"</span>] = <span class="keyword">await</span> promise(<span class="number">2000</span>, <span class="string">"C"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> A = promise(<span class="number">0</span>, <span class="string">"A"</span>); <span class="comment">//promise</span></span><br><span class="line">  <span class="keyword">let</span> B = promise(<span class="number">3000</span>, <span class="string">"B"</span>);</span><br><span class="line">  <span class="keyword">let</span> C = promise(<span class="number">2000</span>, <span class="string">"C"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//1.</span></span><br><span class="line">  <span class="keyword">await</span> A;</span><br><span class="line">  <span class="keyword">await</span> B;</span><br><span class="line">  <span class="keyword">await</span> C;</span><br><span class="line">  <span class="keyword">let</span> result = &#123; A, B, C &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//or</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.</span></span><br><span class="line">  <span class="keyword">let</span> result = &#123;</span><br><span class="line">    A: <span class="keyword">await</span> A, <span class="comment">//result</span></span><br><span class="line">    B: <span class="keyword">await</span> B,</span><br><span class="line">    C: <span class="keyword">await</span> C</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  log(result);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>async function 裡面有 await</p>
<p>await 等 async function<br>await 等 promise</p>
<ol start="8">
<li>async_array<br>同一個作用域裡，await 才會互等</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.asyncEach() = anync <span class="function"><span class="keyword">function</span>(<span class="params">handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">            <span class="keyword">await</span> handler(<span class="keyword">this</span>[i], i, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    data.asyncEach(<span class="keyword">async</span> item =&gt; &#123;</span><br><span class="line">        log(<span class="keyword">await</span> promise(<span class="built_in">Math</span>.random() * <span class="number">10</span>, item));</span><br><span class="line">        <span class="comment">//同步指令只有第一次，之後都是一個一個等(非同步)</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>補充:<br>大部分有用的 this 時候都會用 function，大部分第二層就會用箭頭函式，setTimeout，就會往外找，找到上一層的對象(document)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"xxx"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>API<br>(1) 販賣機<br>NG-1 吃錢<br>NG-2 給錯東西<br>=&gt; 給正確的東西</li>
</ol>
<p>(2) 拉麵販賣機<br>打對的網址(按對的按鈕)<br>給正確的查詢<br>回正確的資料(固定有規範的輸入與輸出)</p>
<ol start="10">
<li>JSON<br>JavaScript Object Notation<br>最上層建議:物件</li>
</ol>
<p>Restful API : Representational State Transfer</p>
<p>Read：GET 讀取紀錄<br>Create：POST 新增紀錄<br>Update：PUT/PATCH 修改紀錄<br>Delete：DELETE 刪除紀錄</p>
<h3 id="Http-Status-Code："><a href="#Http-Status-Code：" class="headerlink" title="Http Status Code："></a>Http Status Code：</h3><p>//ok =&gt; then<br>2xx：這是您要的東西<br>3xx：請稍後為您轉接<br>//error =&gt; catch<br>4xx：請查明後再撥<br>5xx：嘟~嘟~嘟~</p>
<h3 id="TCP-三次握手與四次揮手"><a href="#TCP-三次握手與四次揮手" class="headerlink" title="TCP 三次握手與四次揮手"></a>TCP 三次握手與四次揮手</h3><p>C:Client S:Server<br>傳輸前:<br>三次握手(確認雙方都在)<br>1 C:安安,你好!住哪?給虧嗎? =&gt; 尋找目標 Server<br>2 S:台北,28 =&gt; Server 回應<br>3 C:好巧喔!我也住台北 =&gt; Client 也回應</p>
<p>雙方連上線開始傳輸</p>
<p>離開前:<br>四次揮手<br>1 C：我要去洗澡了 =&gt; 我要結束了(C)<br>2 S：等一下 =&gt; 確認是否還有未傳完(S)<br>3 S：我去洗澡 (雙重攻擊) =&gt; 傳完我要結束了(S)<br>4 C：你就去吧 =&gt; 你可以結束了(C)</p>
<p>此時 Server 斷線，等待兩秒確定斷線，Client 也斷線</p>
<p>DoS 攻擊:大量請求，使 Server 被打到癱瘓，無法正常服務</p>
<h3 id="SQL-VS-NOSQL"><a href="#SQL-VS-NOSQL" class="headerlink" title="SQL VS NOSQL"></a>SQL VS NOSQL</h3><p>SQL:關聯，查詢資料需要透過多個資料表查詢，較費時<br>資料分散，資料較小 ( 時間換空間 )<br>NOSQL:需要資料直接拿整包，不需要組合，較快<br>資料較多份，資料較大 ( 空間換時間 )<br>( Not Only SQL )</p>
<h3 id="cookie-vs-session"><a href="#cookie-vs-session" class="headerlink" title="cookie vs session"></a>cookie vs session</h3><p>Token：令牌/通行證<br>Storage：都存在本機<br>Local Storage：沒有時效性，連線不會傳，不刪他不會被刪除 (長時間暫存)<br>Session Storage：跟著 Tag(分頁)，關閉就刪除(session 連線結束 會被清掉)，存在 SERVER 端會占用 SERVER 端的資源，單次連線的暫存 儲存在 server 端(暫存檔)</p>
<p>cookie：存在本機，使用者可以刪除，有期限的(可設計過期時間)，SERVER 在每次連線的時候會自動綁定和傳輸(目的:隨使想取用都可以做檢查)，不適手動自己加的東西 儲存在 user 端 (短期)，不建議前端操作 cookie<br>補充:TOKEN 都會放在 cookie 為主<br>Http Only：程式不能刪<br>session：連線階段的操作，存在 server 端，使用者不能刪除</p>
<h3 id="PUT-vs-PATCH"><a href="#PUT-vs-PATCH" class="headerlink" title="PUT vs PATCH"></a>PUT vs PATCH</h3><p>PUT：傳整包，實務上後端某些欄位會鎖住(例如：ID)，相信你傳<br>PATCH：傳部分修改資料<br><strong><em>理論上如此，但實作還是要看後端作法</em></strong></p>
<h3 id="範例-9"><a href="#範例-9" class="headerlink" title="範例 9"></a>範例 9</h3><ol>
<li>讀取資料 (讀取 api 是非同步，所以呼叫時，必須加 await，因為必須等非同步完成才 render，不然 render 時回沒有資料 render，ex:await xxx())，await 是一種等的概念，render(同步)必須等 await loadData()的概念</li>
<li>渲染畫面</li>
<li>使用者功能<br>reduce：組合技</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = $(<span class="keyword">this</span>)</span><br><span class="line">  .serializeArray()</span><br><span class="line">  .reduce(<span class="function">(<span class="params">prev, now</span>) =&gt;</span> &#123;</span><br><span class="line">    prev[now.name] = now.value;</span><br><span class="line">    <span class="comment">//prev[userId]="1";</span></span><br><span class="line">    <span class="comment">//prev[body] = "aa";</span></span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line"><span class="comment">// 1=&gt; prev = &#123;&#125;,now = &#123;name: "userId", value: "1"&#125;</span></span><br><span class="line"><span class="comment">// 2=&gt; prev = &#123;userId:"1"&#125;, now = &#123;name: "body, value: "aa"&#125;</span></span><br><span class="line">input.userId *= <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(input);</span><br></pre></td></tr></table></figure>
<p>location.reload()：刷新畫面</p>
<p>讀取資料 =&gt; 渲染畫面 =&gt; 使用者功能<br>可以考慮重構成下面：<br>讀取表單資料(users) =&gt; 渲染表單 =&gt; 表單功能<br>讀取列表資料(posts) =&gt; 渲染列表 =&gt; 列表功能</p>
<p>補充:<br>form 的好工具</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = $(<span class="keyword">this</span>).serializeArray();</span><br></pre></td></tr></table></figure>
<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>JSON with Padding<br>解決跨域問題</p>
<h3 id="物件導向"><a href="#物件導向" class="headerlink" title="物件導向"></a>物件導向</h3><p>封裝:分類，然後包起來(資料 attribute+功能 Methods)<br>繼承:爸爸有房子,我就有房子</p>
<h3 id="SOLLID"><a href="#SOLLID" class="headerlink" title="SOLLID"></a>SOLLID</h3><p>S:做好分類 (單一職責(Single Responsibility Principle<br>O:開放擴充 封閉修改 (開放封閉(Open-Closed Principle<br>L:小孩可以代替爸爸 爸爸不能代替小孩 (里氏替換(Liskov Substitution Principle<br>L:只給部分功能 (最小知識(Least Knowledge Principle<br>I:不受其他介面影響 (介面隔離(Interface Segregation Principle<br>D:避免小孩影響到爸爸 (依賴反轉(Dependency Inversion Principle</p>
<h3 id="物件建議"><a href="#物件建議" class="headerlink" title="物件建議"></a>物件建議</h3><ol>
<li>判斷 this 再使用(有 new 就是你創物件本身，不然就是指向 window(全域))</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Creature = <span class="function"><span class="keyword">function</span>(<span class="params">name, sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> Creature)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name ||  <span class="string">"NoName"</span>;</span><br><span class="line">        <span class="keyword">this</span>.sex= sex || <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.life = <span class="number">100</span>;</span><br><span class="line">        <span class="comment">// this.intro = function()&#123;</span></span><br><span class="line">        <span class="comment">//     console.log(</span></span><br><span class="line">        <span class="comment">//     `My name is $&#123;this. name&#125;, I'am a $&#123;this.sex ? "man" : "woman"`</span></span><br><span class="line">        <span class="comment">//     );</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Creature(name, sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Creature.prototype.intro = <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">let</span> <span class="title">C1</span> = <span class="title">new</span> <span class="title">Creature</span>(<span class="params"><span class="string">"Alex"</span>, <span class="number">1</span></span>);</span></span><br><span class="line"><span class="function"><span class="title">let</span> <span class="title">C2</span> = <span class="title">Creature</span>(<span class="params"><span class="string">"Sara"</span>, <span class="number">0</span></span>);</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(<span class="params">C1</span>);</span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(<span class="params">C2</span>);</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//執行結果: <span class="title">Creature</span> </span>&#123;name: <span class="string">"Alex"</span>, <span class="attr">sex</span>: <span class="number">1</span>, <span class="attr">life</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="comment">//自製的Creature物件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(C1.intro === C2.into);</span><br><span class="line"><span class="comment">//執行結果:false</span></span><br><span class="line">每產生一個Creature就會多產生一個<span class="function"><span class="keyword">function</span>，所以用<span class="title">Creature</span>的<span class="title">prototype</span>，已讓產生的<span class="title">Creatue</span>物件能共用</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span>(<span class="params">C1, C1._proto_,C1._proto_._proto_</span>);</span></span><br><span class="line"><span class="function">//</span>&#123;name: <span class="string">"Alex"</span>m sex:<span class="number">1</span>, <span class="attr">life</span>: <span class="number">200</span>&#125;  Creatur&#123;<span class="attr">intro</span>:[<span class="built_in">Function</span>]&#125;   &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//原型練的定義:假設這層沒有，就會找尋上一層，直到找到盡頭找不到，就會回undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//原型鍊的每一層皆是object</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/z6iY4FS.png" alt></p>
<ol start="2">
<li>function 如果是做一樣事情，建議拉到 proto 做，不然在 new 的時候會多產生</li>
<li>公有與私有</li>
</ol>
<p>4.defineProperty 非常重要!! 與陣列 reduce 一樣重要<br>defineProperty 的功能是把一個屬性轉變成 function(並分別有讀和取的功能)<br>改成 function 的好處，他可以回傳 callback，ex: 假設有人改你的資料，就會回傳，但變數卻無法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _age = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    name: <span class="string">"alex"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a, <span class="string">"age"</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> _age;</span><br><span class="line">&#125;);</span><br><span class="line">a.age++</span><br><span class="line"><span class="built_in">console</span>.log(a.age);</span><br><span class="line"><span class="comment">//還是是30，因為他只開get，所以不能寫入</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//defineProperties的寫法</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(<span class="keyword">this</span>, &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> _name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  sex: &#123;</span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> _sex;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>prototype 與<strong>proto</strong>的分別<br>就是物件生成前後(ex: new Creature)，之前<br>Creature.prototype.intro = function(){</p>
<p>}<br>new 出來之後只能讀到<strong>proto</strong>，讀 prototype 會有一些問題</p>
<p>X 全域變數<br>X 浮點數計算<br>X with 與 eval<br>X 強制轉型的雙等號<br>X 無所不在的宣告<br>X 無區塊的敘述式<br>X 函式敘述與運算<br>X 類型的包裝與 New<br>X 隨意換行與分號<br>X 加號運算子<br>X continue<br>X switch 穿越<br>X 分散的回傳值<br>X 太早做過度縮寫</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">"A"</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">"B"</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="string">"C"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line">  <span class="built_in">console</span>.log(c); <span class="comment">// C (obj.c =&gt; C =&gt; not defiend</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> script = <span class="string">"console.log(123)"</span>;</span><br><span class="line"><span class="built_in">eval</span>(script);</span><br></pre></td></tr></table></figure>
<h3 id="閉包"><a href="#閉包" class="headerlink" title="閉包"></a>閉包</h3><h3 id="咖哩化"><a href="#咖哩化" class="headerlink" title="咖哩化"></a>咖哩化</h3><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><h3 id="工廠模式-Factory"><a href="#工廠模式-Factory" class="headerlink" title="工廠模式 (Factory)"></a>工廠模式 (Factory)</h3><p>主力:產東西<br>EX: Object</p>
<h3 id="策略模式-Strategy"><a href="#策略模式-Strategy" class="headerlink" title="策略模式 (Strategy)"></a>策略模式 (Strategy)</h3><p>主力:對應東西<br>策略表(Map 表)</p>
<h3 id="外觀模式-Facade"><a href="#外觀模式-Facade" class="headerlink" title="外觀模式 (Facade)"></a>外觀模式 (Facade)</h3><p>一個 function 包很多功能<br>EX:點青椒炒牛肉 =&gt; 處理青椒/處理牛肉/炒都交給廚師處理<br>點餐的人不需要知道這些</p>
<h3 id="觀察者模式"><a href="#觀察者模式" class="headerlink" title="觀察者模式"></a>觀察者模式</h3><p>觀察者模式 : 透過第三者溝通 EX:事件</p>
<h3 id="MV"><a href="#MV" class="headerlink" title="MV*"></a>MV*</h3><p>Model 資料邏輯<br>View 畫面層</p>
<p>C:畫面對 Model 監聽<br>P:畫面透過 Present 偵聽?</p>
<h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><ol>
<li>People.prototype = Creature.prototype<br>直接賦值 prototype<br>問題: 原本方法被取代</li>
<li>People.prototype = new Creature()<br>問題: 有自己及父親的屬性，本身屬性移除就變成父親的屬性<br>方法也會不見(多額外屬性)</li>
<li>繼承方法</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.extend = <span class="function"><span class="keyword">function</span>(<span class="params">parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.prototype.__proto__ = parent.prototype;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>protp</strong> : 實體化使用<br>prototype : 未實體化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Alex = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Alex.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> eatShit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a1 = <span class="keyword">new</span> Alex();</span><br><span class="line"><span class="comment">// a1.__proto__ = Object.assign(&#123;&#125;,a1.__proto__, &#123;eat:eatShit&#125;)</span></span><br><span class="line">a1.__proto__ = &#123; <span class="attr">eat</span>: eatShit &#125;;</span><br><span class="line"><span class="keyword">let</span> a2 = <span class="keyword">new</span> Alex();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a1.eat === a2.eat); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a1.eat === eatShit); <span class="comment">// false =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(a2.eat === eatShit); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h3 id="作業-alex-lvUp-‘People’"><a href="#作業-alex-lvUp-‘People’" class="headerlink" title="作業 : alex.lvUp(‘People’)"></a>作業 : alex.lvUp(‘People’)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> People = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Creature.apply(this, arguments)</span></span><br><span class="line">  People.prototype.__proto__.constructor.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">People.extend(Creature);</span><br></pre></td></tr></table></figure>
<p>與下面差異相同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"HI"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">"HI"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><ol>
<li>class 關鍵字</li>
<li>construtor 初始化</li>
<li>static function</li>
</ol>
<p>//TODO 待補</p>
<h3 id="複製-obj"><a href="#複製-obj" class="headerlink" title="複製 obj"></a>複製 obj</h3><ol>
<li>obj1 = {…obj}</li>
<li>obj2 = Object.assign({},obj)</li>
<li>obj3 = JSON.parse(JSON.stringigy(obj))</li>
<li>obj4 = {}</li>
<li>Object.create()</li>
</ol>
<h3 id="複製-function"><a href="#複製-function" class="headerlink" title="複製 function"></a>複製 function</h3><p>閉包</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyFunction</span>(<span class="params">fun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    fun();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="MVC-VS-MVP"><a href="#MVC-VS-MVP" class="headerlink" title="MVC VS MVP"></a>MVC VS MVP</h3><ol>
<li>MVC<br>V -event-&gt; C -&gt; M -&gt; V</li>
<li>MVP<br>V <-> P <-> M</-></-></li>
<li>MVVM<br>V <-> VM <-> M</-></-></li>
</ol>
<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><ol>
<li>主程式(拉近三個架構 App</li>
<li>另外三隻檔案( View/Mode/Controller</li>
<li>Observer</li>
</ol>
<p>Alex 開發順序(參考)</p>
<ol>
<li>先做基礎架構(App 主程式)<br>1-1 import MVC<br>1-2 開三支檔案<br>1-3 做關係(new 出來</li>
</ol>
<p><strong><em>View 需要認識 Model</em></strong><br><strong><em>Controller 要認識 Model 跟 View</em></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> M = <span class="keyword">new</span> Model();</span><br><span class="line"><span class="keyword">const</span> V = <span class="keyword">new</span> View(M);</span><br><span class="line"><span class="keyword">const</span> C = <span class="keyword">new</span> Controller(M, V);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>Model (資料邏輯)<br>增加/讀取/選擇/刪除(事件)<br>做完後打事件出去<br><strong><em>盡量不要動畫面</em></strong></p>
</li>
<li><p>View (畫面邏輯:畫面偵聽/資料變動)<br>3-1 記資料<br>3-2 匯入 jQuery (import \$ from ‘jquery’</p>
</li>
</ol>
<p><strong><em>盡量不要動資料</em></strong></p>
<p><strong><em>補充 call/apply/bind</em></strong><br>與 function 的 this 操作有關</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> A = &#123;</span><br><span class="line">    name: <span class="string">'A'</span></span><br><span class="line">    fun: <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name,a,b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> B = &#123;</span><br><span class="line">    name: <span class="string">'B'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.fun(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// A,1,2</span></span><br><span class="line"><span class="comment">// B.fun(3,4) // B.fun is not a function</span></span><br><span class="line"><span class="comment">// B.fun(x,y) // x is not defined</span></span><br><span class="line"></span><br><span class="line">A.fun.call(B,<span class="number">3</span>,<span class="number">4</span>) <span class="comment">// B,3,4</span></span><br><span class="line">A.fun.apply(B,[<span class="number">3</span>,<span class="number">4</span>]) <span class="comment">// B,3,4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bind會產生新function</span></span><br><span class="line"><span class="keyword">let</span> fun = A.fun.bind(B,<span class="number">3</span>)</span><br><span class="line"><span class="comment">// 類似咖哩化 (傳滿就比較沒有意義)</span></span><br><span class="line">fun(<span class="number">5</span>) <span class="comment">// B,3,5</span></span><br><span class="line">fun(<span class="number">6</span>) <span class="comment">// B,3,6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [].map.call</span></span><br><span class="line"><span class="comment">// Math.xxx.call</span></span><br></pre></td></tr></table></figure>
<p><strong><em>show 改變畫面</em></strong><br><strong><em>MVC 架構中，View 不能自己改畫面，要通知讓後面去改</em></strong><br><strong><em>這邊採用畫面全部重劃較耗效能，可以嘗試修改不要整個畫面重畫</em></strong></p>
<ol start="4">
<li>Controller (牽手=&gt;控制 Model)</li>
</ol>
<p>TODO:可以練習 switchHandler</p>
<h2 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h2><p>單例模式 : 閉包<br>判斷如果產生過，就用之前產生的，沒產生過再產生新的<br>概念類似</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line"><span class="keyword">let</span> c = a;</span><br></pre></td></tr></table></figure>
<p>練習:</p>
<ol>
<li>繼承練習</li>
<li>MVC 架構修正 View 的 switch 事件</li>
</ol>
<h2 id="第三天下午"><a href="#第三天下午" class="headerlink" title="第三天下午"></a>第三天下午</h2><p>問題討論</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> out = <span class="number">25</span>,</span><br><span class="line">  inner = &#123;</span><br><span class="line">    out: <span class="number">20</span>,</span><br><span class="line">    func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> out = <span class="number">30</span>; <span class="comment">// 沒有用到</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.out;</span><br><span class="line">    &#125;,</span><br><span class="line">    func1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> out = <span class="number">30</span>;</span><br><span class="line">      <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="built_in">console</span>.log((inner.func, inner.func1)()); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(inner.func()); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(inner.func()); <span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log((inner.func1 = inner.func)()); <span class="comment">// undefined =&gt; 25</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = (<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> q1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> q2 = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> b = (q1 = q2);</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>DL DT DD<br>DL=&gt;Definition List<br>DT=&gt;Definition Term<br>DD=&gt;Definition Description</p>
<h2 id="Observer-觀察者模式"><a href="#Observer-觀察者模式" class="headerlink" title="Observer 觀察者模式"></a>Observer 觀察者模式</h2><p>電視/收音機無時無刻都在播放，但你有沒有去看/聽 (觀察)<br>決定會部會有回應<br>結構:1 個持續播放,1 個監聽者<br>功能:解耦</p>
<h3 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a>耦合</h3><p>我在你也在，我死你也死</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Observer = <span class="function"><span class="keyword">function</span>(<span class="params">host</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.b1b2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.btn1.log();</span><br><span class="line">    <span class="keyword">this</span>.btn2.log();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> btn1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b1 log"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> btn2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.log = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b1 log"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ob = <span class="keyword">new</span> Observer(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>改成下面，不容易在 ob 內部發生 b1/b2 錯誤<br>//TODO 待補</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript=</span><br><span class="line"><span class="keyword">let</span> timestamp = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; year, month, date, hour, min, sec &#125;</span>) </span>&#123;</span><br><span class="line">  year = addZero(year, <span class="number">4</span>);</span><br><span class="line">  month = addZero(month, <span class="number">2</span>);</span><br><span class="line">  day = addZero(date, <span class="number">2</span>);</span><br><span class="line">  hour = addZero(hour, <span class="number">2</span>);</span><br><span class="line">  min = addZero(min, <span class="number">2</span>);</span><br><span class="line">  sec = addZero(sec, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;day&#125;</span> <span class="subst">$&#123;hour&#125;</span>:<span class="subst">$&#123;min&#125;</span>:<span class="subst">$&#123;sec&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">loading = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.XXX = XXX();</span><br><span class="line"><span class="keyword">this</span>.ooo = OOO();</span><br><span class="line"><span class="keyword">await</span> <span class="keyword">this</span>.XXX;</span><br><span class="line"><span class="keyword">await</span> <span class="keyword">this</span>.ooo;</span><br><span class="line"></span><br><span class="line">loding = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>VueJS</title>
    <url>/2021/08/15/VueJS/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/15/VueJS/vue.png"></p>
<font style="font-size:20px;">整理 Vue.js 筆記</font>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="v-model-資料綁定"><a href="#v-model-資料綁定" class="headerlink" title="v-model 資料綁定"></a>v-model 資料綁定</h2><p>基本上 Vue 的資料綁定，就是直接用 <code>v-model</code> 加上 data 裡的變數名稱，即可完成綁定。</p>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- v-model 綁定 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 即時呈現 --&gt;</span></span><br><span class="line">  &#123;&#123; text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">      text: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>不過唯一要注意的事情，就是綁定的是什麼元素，如：<code>input</code>、<code>Checkbox</code>、<code>radio</code>、<code>select</code>..等，<br>我們需要依照不同的狀況綁定不同的資料格式，如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    text: <span class="string">""</span>, <span class="comment">// input標籤</span></span><br><span class="line">    textarea: <span class="string">""</span>, <span class="comment">// textarea標籤</span></span><br><span class="line">    checkbox: <span class="literal">false</span>, <span class="comment">// 單選的checkbox</span></span><br><span class="line">    checkboxArray: [], <span class="comment">// 多選的checkbox</span></span><br><span class="line">    singleRadio: <span class="string">""</span>, <span class="comment">// radio標籤</span></span><br><span class="line">    selected: <span class="string">""</span> <span class="comment">// select標籤</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>由上例來看，我們需特別注意的是 HTML-<font color="red"><strong>checkbox 標籤</strong></font></p>
<ul>
<li><code>單選</code>的 checkbox，資料儲放的格式需為<code>boolean</code>型態。</li>
<li><code>多選</code>的 checkbox，資料儲放的格式需為<code>array</code>型態。</li>
</ul>
<blockquote>
<p>官方：<a href="https://cn.vuejs.org/v2/guide/forms.html#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95" target="_blank" rel="noopener">表單控件綁定</a></p>
</blockquote>
<hr>
<h2 id="表單元素绑定-value"><a href="#表單元素绑定-value" class="headerlink" title="表單元素绑定 value"></a>表單元素绑定 value</h2><p>有時我們使用 <code>radio</code>、<code>checkbox</code>、<code>selected</code>時，<br>要達成<font color="red">呈現文字</font>及<font color="red">儲存的資料</font>要有所不一樣的話，<br>我們就可以透過<code>value</code>來設定，<br>另外若需要綁定 <code>value</code> 到 Vue 實例的一個動態屬性上，這時可以用<code>v-bind</code>實現。</p>
<h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 當選中時，`picked` 為字符串"a" --&gt;</span></span><br><span class="line"><span class="tag">&lt; <span class="attr">input</span>  <span class="attr">type</span> = <span class="string">"radio"</span>  <span class="attr">v-model</span> = <span class="string">"picked"</span>  <span class="attr">value</span> = <span class="string">"a"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- `toggle` 為true 或false --&gt;</span></span><br><span class="line"><span class="tag">&lt; <span class="attr">input</span>  <span class="attr">type</span> = <span class="string">"checkbox"</span>  <span class="attr">v-model</span> = <span class="string">"toggle"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 當選中時，`selected` 為字符串"abc" --&gt;</span></span><br><span class="line"><span class="tag">&lt; <span class="attr">select</span>  <span class="attr">v-model</span> = <span class="string">"selected"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt; <span class="attr">option</span>  <span class="attr">value</span> = <span class="string">"abc"</span> &gt;</span> ABC <span class="tag">&lt;/ <span class="attr">option</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/ <span class="attr">select</span> &gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="select-使用-v-for-渲染"><a href="#select-使用-v-for-渲染" class="headerlink" title="select 使用 v-for 渲染"></a>select 使用 v-for 渲染</h3><p>主要重點在於賦予<code>option</code>的 value 時，記得要加<code>:</code>符號，如下例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"selected2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>請選擇<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">:value</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"item in selectData"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>官方：<a href="https://cn.vuejs.org/v2/guide/forms.html#%E5%80%BC%E7%BB%91%E5%AE%9A" target="_blank" rel="noopener">值绑定</a></p>
</blockquote>
<h3 id="v-model-修飾符"><a href="#v-model-修飾符" class="headerlink" title="v-model 修飾符"></a>v-model 修飾符</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- lazy 就像 onchange 一樣，離開欄位才會觸發 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"lazyMsg"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 將值轉型為 數字型態 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 去頭去尾多餘的空白 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trim</span>=<span class="string">"trimMsg"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>官方：<a href="https://cn.vuejs.org/v2/guide/forms.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6" target="_blank" rel="noopener">修飾符</a></p>
</blockquote>
<h3 id="複選框"><a href="#複選框" class="headerlink" title="複選框"></a>複選框</h3><p>主要是在 <code>select</code>的標籤上，新增<code>multiple</code>這個屬性即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">multiple</span> <span class="attr">v-model</span>=<span class="string">"multiSelected"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Kanboo"</span>&gt;</span>Kanboo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Lucas"</span>&gt;</span>Lucas<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Mary"</span>&gt;</span>Mary<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>連結：<a href="http://jsbin.com/xicuyibaje/1/edit?html,js,output" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<hr>
<h2 id="呈現文字的方式"><a href="#呈現文字的方式" class="headerlink" title="呈現文字的方式"></a>呈現文字的方式</h2><p>簡單來說有下列幾種</p>
<ul>
<li>直接輸出：<code>{ {message;}}</code></li>
<li>綁定在<code>HTML Tag標籤</code>上<ul>
<li>純文字： <code>v-text</code></li>
<li>HTML： <code>v-html</code></li>
</ul>
</li>
</ul>
<h3 id="範例-2"><a href="#範例-2" class="headerlink" title="範例"></a>範例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 直接輸出 --&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- v-text  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- v-html --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">di</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="v-bind-標籤屬性綁定"><a href="#v-bind-標籤屬性綁定" class="headerlink" title="v-bind 標籤屬性綁定"></a>v-bind 標籤屬性綁定</h2><p>經過上面的解說與示範，<br>我們如何要將資料綁定在 <code>HTML Tag標籤</code> <code>HTML Tag標籤</code> <code>HTML Tag標籤</code>上的話，<br>可能就很直接的使用下列的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">"&#123;&#123; imgSrc &#125;&#125;"</span> alt=<span class="string">""</span>&gt;</span><br></pre></td></tr></table></figure>
<p>在 src 的地方，直接使用 <code>{ { imgSrc }}</code> 就以為可以自動綁定好了。</p>
<h3 id="錯誤範例"><a href="#錯誤範例" class="headerlink" title="錯誤範例"></a>錯誤範例</h3><figure class="highlight html"><figcaption><span>錯誤範例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 錯誤使用方式，須使用 v-bind --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; imgSrc &#125;&#125;"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">      imgSrc:</span></span><br><span class="line"><span class="javascript">        <span class="string">"https://images.unsplash.com/photo-1479568933336-ea01829af8de?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=d9926ef56492b20aea8508ed32ec6030&amp;auto=format&amp;fit=crop&amp;w=2250&amp;q=80"</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>But…人生總是不如意，上例案例並無法將圖片網址正確的綁上 <code>img 標籤</code> 上，<br>正確的使用方式，應該要使用 <code>v-bind</code> 這功能，如下例</p>
<p><code>&lt;img v-bind:src=&quot;imgSrc&quot; alt=&quot;&quot;&gt;</code></p>
<p>所以要在 <code>img 標籤</code> 針對 <code>Attributes</code> 做綁定的話，就要加上 <code>v-bind</code></p>
<h3 id="正確範例"><a href="#正確範例" class="headerlink" title="正確範例"></a>正確範例</h3><figure class="highlight html"><figcaption><span>正確範例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 針對 Attributes 做綁定的話，就要加上 v-bind --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imgSrc"</span> <span class="attr">v-bind:class</span>=<span class="string">"className"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">      imgSrc:</span></span><br><span class="line"><span class="javascript">        <span class="string">"https://images.unsplash.com/photo-1479568933336-ea01829af8de?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=d9926ef56492b20aea8508ed32ec6030&amp;auto=format&amp;fit=crop&amp;w=2250&amp;q=80"</span>,</span></span><br><span class="line"><span class="javascript">      className: <span class="string">"img-fluid"</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="圖片連結"><a href="#圖片連結" class="headerlink" title="圖片連結"></a>圖片連結</h3><p>當我們要讀取<font color="red">本地端</font>的圖片時，如果直接輸入路徑時，會造成它無法正常顯示，<br>主要是因為 <font color="red">vue-loader 的編譯規則</font> 所導致，我們可以改寫用<code>require</code>方式，來取得本地端圖片的位置。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 失效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"@/assets/img_bg.png"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 正常 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"require('@/assets/img_bg.png')"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://stackoverflow.com/questions/48847644/how-to-bind-img-src-to-data-in-vue" target="_blank" rel="noopener">How to bind img src to data in Vue</a> &gt; <a href="http://www.ptbird.cn/webpack-simple-vue-html-img.html" target="_blank" rel="noopener">vue tempalte 中的 img 标签无法打包出来</a> &gt; <a href="https://blog.csdn.net/MoLvSHan/article/details/78204972" target="_blank" rel="noopener">vue 踩坑系列——backgroundImage 路径问题</a></p>
</blockquote>
<hr>
<h2 id="有無冒號的區別"><a href="#有無冒號的區別" class="headerlink" title="有無冒號的區別"></a>有無冒號的區別</h2><h3 id="有冒號"><a href="#有冒號" class="headerlink" title="有冒號"></a>有冒號</h3><p>有冒號為 <strong>v-bind</strong> 的縮寫，所以有冒號時，這時資料是綁定一個「<strong>變數</strong>」，<br>所以此時 <code>hello</code> 就代表綁定 Vue Data 裡的 <code>hello</code> 變數。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 有冒號 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:message</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">      hello: <span class="string">"Hi"</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>有時不一定是變數，直接寫<strong>運算式</strong>也行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有冒號</span></span><br><span class="line">:message=<span class="string">"1==1"</span></span><br><span class="line">:message=<span class="string">"1==1?'abc':'xyz'"</span></span><br></pre></td></tr></table></figure>
<h3 id="無冒號"><a href="#無冒號" class="headerlink" title="無冒號"></a>無冒號</h3><p>無冒號代表無綁定，所以此時 <code>message</code> 變數的值，就是一個 <code>hello</code> 的字串。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 無冒號 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">message</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="v-for-重覆渲染"><a href="#v-for-重覆渲染" class="headerlink" title="v-for 重覆渲染"></a>v-for 重覆渲染</h2><p>在呈現多筆資料時，可使用 <code>v-for</code> 功能，來實現重覆渲染畫面，</p>
<p>一般使用時，可使用 <code>v-for=&quot;item in list&quot;</code>，</p>
<p>但若有需要資料的<font color="red"><strong>索引值</strong></font>的話，可改寫為 <code>v-for=&quot;(item, index) in list&quot;</code>，</p>
<p>這樣就可以利用 <code>index</code> 取得目前的<font color="red"><strong>索引值</strong></font>。</p>
<h3 id="範例-3"><a href="#範例-3" class="headerlink" title="範例"></a>範例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span>&gt;</span></span><br><span class="line">      &#123;&#123; index + 1 &#125;&#125; - &#123;&#123; item.name &#125;&#125;，年齡：&#123;&#123; item.age &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">      list: [</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          name: <span class="string">"小明"</span>,</span></span><br><span class="line"><span class="undefined">          age: 16</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          name: <span class="string">"媽媽"</span>,</span></span><br><span class="line"><span class="undefined">          age: 38</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          name: <span class="string">"漂亮阿姨"</span>,</span></span><br><span class="line"><span class="undefined">          age: 24</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      ]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="v-for-key-的用途"><a href="#v-for-key-的用途" class="headerlink" title="v-for :key 的用途"></a>v-for :key 的用途</h2><p>由於 Vue.js 在效能考量，在<font color="red">預設</font>的狀況下，Vue.js 會儘量重覆使用已渲染好的元素。<br>若不設定 key 值，不會重新渲染元素，只會 <font color="red"><strong>部份更新</strong> <strong>部份更新</strong> <strong>部份更新</strong></font>。</p>
<h3 id="無-key-範例"><a href="#無-key-範例" class="headerlink" title="無 key 範例"></a>無 key 範例</h3><p>在 HTML 的綁定 <code>li</code> 的部份，後面並無加 <code>:key</code> 的設定，<br>然後我們在 <code>li</code> 裡的 <code>input</code> 欄位裡，分別打上 1111、2222、3333 的值後，<br>這時我們點擊按鈕(<strong>反轉陣列</strong>)時，你會看到資料有二種變化的情況，</p>
<ol>
<li><code>{ { index }} - { { item.id }} { { item.name }}</code> 的值，有正常的反轉變化。</li>
<li><code>input</code>欄位，卻沒有跟著變化。</li>
</ol>
<figure class="highlight html"><figcaption><span>無 key 範例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 這裡無設定 :key --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span>&gt;</span></span><br><span class="line">      &#123;&#123; item.id &#125;&#125; &#123;&#123; item.name &#125;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"自己手打加上數字"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"reverseArray"</span>&gt;</span>反轉陣列<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">      list: [</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">"01"</span>, <span class="attr">name</span>: <span class="string">"甲甲甲"</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">"02"</span>, <span class="attr">name</span>: <span class="string">"乙乙乙"</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">"03"</span>, <span class="attr">name</span>: <span class="string">"丙丙丙"</span> &#125;</span></span><br><span class="line"><span class="undefined">      ]</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">      reverseArray: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.list.reverse();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.list);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>無 Key 範例：<a href="http://jsbin.com/korajojomi/1/edit?html,js,output" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<h3 id="綁定-key-範例"><a href="#綁定-key-範例" class="headerlink" title="綁定 key 範例"></a>綁定 key 範例</h3><p>下面範例為有使用 <code>:key</code>，可以在範例看到資料變化時，整個<code>li</code> 裡面的元素，也會跟著一起變化。</p>
<figure class="highlight html"><figcaption><span>綁定 key 範例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 綁定 Key ，Key須是 唯一值 uniqueKey --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">      &#123;&#123; item.id &#125;&#125; &#123;&#123; item.name &#125;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"自己手打加上數字"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"reverseArray"</span>&gt;</span>反轉陣列<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>綁定 Key 範例：<a href="http://jsbin.com/lukubovano/1/edit?html,js,output" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<div class="note warning">使用建議：<br>1.  有使用 <code>v-for</code> 的話，建議都要配合 <code>key</code>。<br>2.  <code>key</code>最好是都是 <font color="red"><strong>唯一值 uniqueKey</strong></font>。<br>3.  <code>key</code>的值可以自訂，只要不一樣即可。</div>

<hr>
<h2 id="v-if-判斷式"><a href="#v-if-判斷式" class="headerlink" title="v-if 判斷式"></a>v-if 判斷式</h2><p>由上例延伸，如果想要在某種條件下，不顯示資料的話，</p>
<p>我們就可以加上 <code>v-if</code> 來加上判斷式，</p>
<h3 id="範例-4"><a href="#範例-4" class="headerlink" title="範例"></a>範例</h3><p>條件為 年齡小於 25 歲不顯示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span> <span class="attr">v-if</span>=<span class="string">"item.age &lt; 25"</span>&gt;</span></span><br><span class="line">    &#123;&#123; index + 1 &#125;&#125; - &#123;&#123; item.name &#125;&#125;，年齡：&#123;&#123; item.age &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div class="note primary">補充：<br>不過良好的撰寫習慣的話，盡量避免 <font color="red">v-for</font>配 <font color="red">v-if</font>一起使用，<br>主要原因是會 <strong>耗效能</strong>，可以利用 <font color="red">computed</font> 計算，<br>先過濾掉不要的的物件後，再渲染出結果。</div>

<hr>
<h2 id="避免-v-if-與-v-for-一起使用"><a href="#避免-v-if-與-v-for-一起使用" class="headerlink" title="避免 v-if 與 v-for 一起使用"></a>避免 v-if 與 v-for 一起使用</h2><p>最主要的原因是「<strong>效能</strong>」的考量。</p>
<h3 id="情境說明："><a href="#情境說明：" class="headerlink" title="情境說明："></a>情境說明：</h3><p>假設我有 100 個 User(90 男、10 女)，此時我只想顯示 <strong>10 女</strong> 的資料就好。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;u in Users&quot; v-if=&quot;u.sex === &apos;female&apos;&quot; :key=&quot;u._id&quot;&gt;</span><br><span class="line">    &#123;&#123; u.name &#125;&#125; - &#123;&#123; u.isActive &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<p>不過上例的程式的執行，會跑 100 次 forloop 及判斷，<br>所以當有更新資料時，又會重新跑 100 次，這樣效能上就顯得不優。</p>
<p>這時我們就可以使用 <code>computed</code> 先將資料過濾好後，<br>再丟給 <code>v-for</code> 去渲染畫面，這樣就可以優化效能的部份。</p>
<hr>
<h2 id="v-if-與-v-show"><a href="#v-if-與-v-show" class="headerlink" title="v-if 與 v-show"></a>v-if 與 v-show</h2><ul>
<li>v-if：若為<code>flase</code>時，DOM 元素是不會被渲染出來，會整個消失的。</li>
<li>v-show：若為<code>flase</code>時，則是使用 <code>disply:none</code> 將元素隱藏。</li>
</ul>
<hr>
<h2 id="v-on-事件綁定"><a href="#v-on-事件綁定" class="headerlink" title="v-on 事件綁定"></a>v-on 事件綁定</h2><p>以往我們要將某個 DOM 元素綁上事件的話，會使用 <code>EventTarget.addEventListener()</code> 來賦予功能，<br>而在 <code>Vue</code> 要綁上事件監聽的話，實現步驟如下</p>
<ol>
<li>在 DOM 元素，宣告<strong>綁定事件</strong></li>
<li>在 Vue 的 methods 裡，建立<strong>函式</strong></li>
</ol>
<h3 id="範例-5"><a href="#範例-5" class="headerlink" title="範例"></a>範例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1. 在DOM元素，宣告 綁定事件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"reverseText"</span>&gt;</span>反轉字串<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">      text: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 2. 在Vue的methods裡，建立 函式</span></span></span><br><span class="line"><span class="javascript">      reverseText: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"Click me"</span>);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>HTML 各種事件屬性：<a href="https://www.w3schools.com/tags/ref_eventattributes.asp" target="_blank" rel="noopener">HTML Event Attributes</a></p>
</blockquote>
<hr>
<h2 id="v-on-進階指令-修飾符"><a href="#v-on-進階指令-修飾符" class="headerlink" title="v-on 進階指令(修飾符)"></a>v-on 進階指令(修飾符)</h2><p>下列介紹一些 <code>修飾符</code> 的使用，可協助縮短我們的程式碼。</p>
<h3 id="事件修飾符"><a href="#事件修飾符" class="headerlink" title="事件修飾符"></a>事件修飾符</h3><p>最常見的例子，就是 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code>，</p>
<p>有時我們在監聽事件時，會需要取消一些 HTML 標籤 <font color="red"><strong>預設的行為</strong></font>或是<font color="red"><strong>停止事件冒泡</strong></font>，</p>
<p>一般情況下，我們會像下列範例這樣撰寫</p>
<figure class="highlight javascript"><figcaption><span>取消預設行為</span></figcaption><table><tr><td class="code"><pre><span class="line">reverseText(event) &#123;</span><br><span class="line">  event.preventDefault(); <span class="comment">// 取消預設行為</span></span><br><span class="line">  <span class="keyword">this</span>.newText = <span class="keyword">this</span>.text.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不過在 Vue 裡，有提供我們另外的寫法，如下</p>
<h4 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h4><figure class="highlight html"><figcaption><span>事件修飾符</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--阻止單擊事件繼續傳播--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--提交事件不再重載頁面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--修飾符可以串聯--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--只有修飾符--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--添加事件監聽器時使用事件捕獲模式--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--即元素自身觸發的事件先在此處處理，然後才交由內部元素進行處理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--只當在event.target是當前元素自身時觸發處理函數--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--即事件不是從內部元素觸發的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>官方說明：<a href="https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6" target="_blank" rel="noopener">事件修飾符</a></p>
</blockquote>
<h4 id="範例-6"><a href="#範例-6" class="headerlink" title="範例"></a>範例</h4><ul>
<li><p>stop - 調用 event.stopPropagation()，停止事件冒泡 (Event Bubbling)行為。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>將此範例加上 stopPropagation (防止向外尋找)<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"trigger('div')"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 新增 event.stopPropagation() --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click.stop</span>=<span class="string">"trigger('box')"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>stop 範例：<a href="http://jsbin.com/qicogatibu/edit?html,js,console,output" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
</li>
<li><p>capture - 將監聽事件模式，更改為使用 事件捕獲 (Event Capturing) 模式，。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>事件偵聽器時使用 capture 模式 (事件改為由外而內)<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.capture</span>=<span class="string">"trigger('div')"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click.capture</span>=<span class="string">"trigger('box')"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.capture</span>=<span class="string">"trigger('button')"</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>capture 範例：<a href="http://jsbin.com/zogayenowi/1/edit?html,js,console,output" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
</li>
<li><p><font color="red"><strong>self</strong></font> - 只會觸發自己綁定的 DOM 元素，不會有<code>Event Capturing</code>和<code>Event Bubbling</code>，這樣就不用再新增<code>event.stopPropagation()</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>事件偵聽器時使用 self 模式 (只會觸發自己範圍內的)<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.self</span>=<span class="string">"trigger('div')"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click.self</span>=<span class="string">"trigger('box')"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.self</span>=<span class="string">"trigger('button')"</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>self 範例：<a href="http://jsbin.com/viqugihoye/1/edit?html,js,console,output" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
</li>
<li><p>once - 只觸發一次回調。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>事件偵聽器只觸發一次<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.once</span>=<span class="string">"trigger('div')"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click.once</span>=<span class="string">"trigger('box')"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">"trigger('button')"</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>once 範例：<a href="http://jsbin.com/dukohetiwi/1/edit?html,js,console,output" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
</li>
</ul>
<h3 id="按鍵修飾符"><a href="#按鍵修飾符" class="headerlink" title="按鍵修飾符"></a>按鍵修飾符</h3><p>以往我們在監聽<font color="red">鍵盤的事件</font>時，都是使用 <code>event.keyCode</code> 進行判斷，如下例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runScript</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判斷是否有按 Enter 鍵</span></span><br><span class="line">  <span class="keyword">if</span> (e.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">    <span class="comment">// your code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一樣 Vue 也有提供我們另外的寫法，如下</p>
<h4 id="說明-1"><a href="#說明-1" class="headerlink" title="說明"></a>說明</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">"submit"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>另外也有提供常見的按鍵別名，如：<code>enter</code>、<code>esc</code>、<code>tab</code>…等。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>官方說明：<a href="https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6" target="_blank" rel="noopener">按键修飾符</a></p>
</blockquote>
<h4 id="範例-7"><a href="#範例-7" class="headerlink" title="範例"></a>範例</h4><ul>
<li><p>{keyCode | keyAlias} - 只當事件是從特定鍵觸發時才觸發回調。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.13</span>=<span class="string">"trigger('按下Enter鍵')"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>別名修飾 - .enter, .tab, .delete, .esc, .space, .up, .down, .left, .right</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.enter</span>=<span class="string">"trigger('按下Enter鍵')"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>特殊按鍵，可同時加<strong>二個</strong>修飾符，達到特殊動作才觸發事件 - .ctrl, .alt, .shift, .meta</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.shift.enter</span>=<span class="string">"trigger('shift + Enter')"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="滑鼠修飾符"><a href="#滑鼠修飾符" class="headerlink" title="滑鼠修飾符"></a>滑鼠修飾符</h3><ul>
<li>.left - (2.2.0) 只當點擊鼠標左鍵時觸發。</li>
<li>.right - (2.2.0) 只當點擊鼠標右鍵時觸發。</li>
<li>.middle - (2.2.0) 只當點擊鼠標中鍵時觸發。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"box"</span> @<span class="attr">click.middle</span>=<span class="string">"trigger('點擊鼠標-中鍵')"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="v-on-amp-v-bind-縮寫"><a href="#v-on-amp-v-bind-縮寫" class="headerlink" title="v-on &amp; v-bind 縮寫"></a>v-on &amp; v-bind 縮寫</h2><p>身為專業的懶人的話，能少寫一個字就絕對不多打一個字，<br>下列分別介紹 <code>v-on</code> 和 <code>v-bind</code> 的縮寫。</p>
<h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>原先的寫法 <code>v-on:</code> 改為 <code>@</code> 代表，參考下例。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 原始寫法</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">v-on:click.prevent</span>=<span class="string">"reverseText"</span>&gt;</span>反轉字串<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 縮寫</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click.prevent</span>=<span class="string">"reverseText"</span>&gt;</span>反轉字串<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>原先的寫法 <code>v-bind:</code> 只留下 <code>:</code> 代表即可，參考下例。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 原始寫法</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imgSrc"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// 縮寫</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgSrc"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="v-class-動態切換-ClassName"><a href="#v-class-動態切換-ClassName" class="headerlink" title="v-class 動態切換 ClassName"></a>v-class 動態切換 ClassName</h2><p>有時我們會針對 DOM 元素，動態的新增移除 CSS 屬性，而在 Vue 裡，我們實現的方式，</p>
<p>除了使用 <code>v-bind:</code> 綁定資料外，也需要在後面<strong>新增條件式的判斷</strong>，</p>
<p>這樣我們才能達到<strong>動態切換 ClassName</strong>，如下例所示</p>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 額外新增判斷式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; '要加入的 ClassName' : 判斷式 &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="物件寫法"><a href="#物件寫法" class="headerlink" title="物件寫法"></a>物件寫法</h3><ul>
<li><p>方法 1：直接寫<br>直接使用 <code>{ &#39;屬性名稱&#39;: 判斷式 }</code> 寫入，若是有多個的話，可用「<font color="red"><strong>逗號</strong></font>」隔開。</p>
</li>
<li><p>方法 2：物件<br>有時超過二個以上的話，會大大降低可讀性， 所以將多個的 <code>&#39;屬性名稱&#39;: 判斷式</code> 寫在 Vue 的 Data 裡。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法1：直接寫 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"&#123; 'rotate': isTransform, 'bg-orange':  boxColor &#125;"</span>&gt;</span></span><br><span class="line">  Style</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 方法2：物件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"objectClass"</span>&gt;</span></span><br><span class="line">  Object</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">      isTransform: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      boxColor: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 物件</span></span></span><br><span class="line"><span class="undefined">      objectClass: &#123;</span></span><br><span class="line"><span class="javascript">        rotate: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">"bg-orange"</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>程式範例：<a href="http://jsbin.com/keqimunewu/1/edit?html,js,output" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<h3 id="更改-CSS-物件之判斷式"><a href="#更改-CSS-物件之判斷式" class="headerlink" title="更改 CSS 物件之判斷式"></a>更改 CSS 物件之判斷式</h3><p>若是 CSS 採用物件寫法的話，不過當要更改<code>判斷式</code>的值時，要稍微注意一下<font color="red"><strong>取值的寫法</strong></font>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法2：物件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"objectClass"</span>&gt;</span></span><br><span class="line">  Object</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 取物件裡，單個屬性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"objectClass.rotate = !objectClass.rotate"</span>&gt;</span></span><br><span class="line">  rotate</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意，若有「-」字號，要用「中括號」方式寫法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"objectClass['bg-orange']"</span>&gt;</span></span><br><span class="line">  bg-orange</span><br><span class="line"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    objectClass: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">'rotate'</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">    <span class="string">'bg-orange'</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>程式範例：<a href="http://jsbin.com/pixuyonixi/1/edit?html,js,output" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<h3 id="陣列寫法"><a href="#陣列寫法" class="headerlink" title="陣列寫法"></a>陣列寫法</h3><p>直接利用陣列的方式，將<code>ClassName</code>寫進<code>Array</code>裡，記得要是「<font color="red">字串</font>」。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 陣列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"['rotate', 'bg-orange']"</span>&gt;</span></span><br><span class="line">  Array</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>程式範例：<a href="http://jsbin.com/famuvajoja/1/edit?html,css,output" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<h3 id="動態更新-CSS-陣列寫法"><a href="#動態更新-CSS-陣列寫法" class="headerlink" title="動態更新 CSS 陣列寫法"></a>動態更新 CSS 陣列寫法</h3><p>可透過 <font color="red"><strong>checkbox</strong></font> 的特性，可動態新增移除<code>ClassName</code>是否寫進 <code>Array</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 陣列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"arrayClass"</span>&gt;</span></span><br><span class="line">  Array</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1. 先綁定 v-model 及 設定 value 的值。</span></span><br><span class="line"><span class="comment">2. 籍由 checkbox 的特性，若有勾選時，才會是true，</span></span><br><span class="line"><span class="comment">   此時才會存在在 arrayClass 裡，</span></span><br><span class="line"><span class="comment">   若無勾選的話，就不會存在 arrayClass 裡。</span></span><br><span class="line"><span class="comment">3. 可打開 Vue工具 觀察 arrayClass 的變化。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"arrayClass"</span> <span class="attr">value</span>=<span class="string">"rotate"</span>&gt;</span></span><br><span class="line">  rotate</span><br><span class="line"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"arrayClass"</span> <span class="attr">value</span>=<span class="string">"bg-orange"</span>&gt;</span></span><br><span class="line">  bg-orange</span><br><span class="line"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    arrayClass:[],</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>程式範例：<a href="http://jsbin.com/lakijesuca/1/edit?html,js,output" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<h3 id="綁定行內樣式"><a href="#綁定行內樣式" class="headerlink" title="綁定行內樣式"></a>綁定行內樣式</h3><p><code>:style=&quot;{ 樣式屬性 : &#39;樣式的值&#39; }</code></p>
<p>可以直接利用 <code>:style</code> 的寫法，將 CSS 屬性寫在 HTML 上面，</p>
<p>不過有一點要 <strong>注意</strong> <strong>注意</strong> 再 <strong>注意</strong></p>
<p>若樣式屬性有「<font color="red">-</font>」字號的話，改寫為「<strong>駝峰式命名</strong>」，將「-」去除而接著後面<font color="red">第一個字母改大寫</font>。</p>
<ul>
<li><p>駝峰式命名：</p>
<ul>
<li><p>box-shadow =&gt; boxShadow ( S 變大寫)</p>
</li>
<li><p>margin-top =&gt; marginTop ( T 變大寫)</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接寫入HTML裡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:style</span>=<span class="string">"&#123;backgroundColor: 'orange'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:style</span>=<span class="string">"&#123;backgroundImage: 'url(' + img + ')' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 取用Vue Data的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:style</span>=<span class="string">"styleObject1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 陣列方式，裡面插入多個物件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"box"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:style</span>=<span class="string">"[&#123;backgroundColor: 'orange'&#125;, &#123;borderWidth: '3px'&#125;]"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:style</span>=<span class="string">"[styleObject1, styleObject2]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">      img: <span class="string">"https://fakeimg.pl/100x100/?text=Hello"</span>,</span></span><br><span class="line"><span class="undefined">      styleObject1: &#123;</span></span><br><span class="line"><span class="javascript">        backgroundColor: <span class="string">"red"</span>,</span></span><br><span class="line"><span class="javascript">        borderWidth: <span class="string">"10px"</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      styleObject2: &#123;</span></span><br><span class="line"><span class="javascript">        boxShadow: <span class="string">"3px 3px 5px rgba(0, 0, 0, 0.16)"</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>程式範例：<a href="http://jsbin.com/xegikubeti/1/edit?html,js,output" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<hr>
<h2 id="Computed-跟-method-差異點"><a href="#Computed-跟-method-差異點" class="headerlink" title="Computed 跟 method 差異點"></a>Computed 跟 method 差異點</h2><p>因為這二者做的事情都好像可以完成，所以有時會不知該選<code>Computed</code> 或 <code>Methods</code>？</p>
<h3 id="比較表"><a href="#比較表" class="headerlink" title="比較表"></a>比較表</h3><table>
<thead>
<tr>
<th></th>
<th>method</th>
<th>computed</th>
</tr>
</thead>
<tbody>
<tr>
<td>使用方式</td>
<td>可傳參數</td>
<td>類變數</td>
</tr>
<tr>
<td>執行方式</td>
<td>每次呼叫，每次執行</td>
<td>快取</td>
</tr>
<tr>
<td>適用選擇</td>
<td>功能面、動作操作</td>
<td>資料格式、內容處理</td>
</tr>
</tbody>
</table>
<h3 id="使用方式-說明"><a href="#使用方式-說明" class="headerlink" title="使用方式 說明"></a>使用方式 說明</h3><p>二者的呼叫方式不太一樣</p>
<ul>
<li><p>method</p>
<figure class="highlight javascript"><figcaption><span>method呼叫方式</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="keyword">this</span>.fun();</span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="keyword">this</span>.fun(<span class="string">"參數1"</span>, <span class="string">"參數2"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>computed</p>
<p>computed 屬性默認只設置 <font color="red"><strong>getter</strong></font> 函數，不過在需要時，還可以提供 <font color="red"><strong>setter</strong></font> 函數，如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    <span class="comment">// getter 函数</span></span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter 函数</span></span><br><span class="line">    <span class="keyword">set</span>: function (newValue) &#123;</span><br><span class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>)</span><br><span class="line">      <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<p>所以 computed 的呼叫方式，就是使用 <strong>getter</strong> 或 <strong>setter</strong> 二種用法，<br>而這樣的用法，就很像我們一般在使用<font color="red"><strong>JS 的變數</strong></font>一樣，不是<strong>取值</strong>，就是<strong>覆寫值</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getter</span></span><br><span class="line">getFullName = <span class="keyword">this</span>.fullName;</span><br><span class="line"><span class="comment">// setter</span></span><br><span class="line"><span class="keyword">this</span>.fullName = <span class="string">"改變的值"</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="執行方式-說明"><a href="#執行方式-說明" class="headerlink" title="執行方式 說明"></a>執行方式 說明</h3><ul>
<li><p>method</p>
<p>每次呼叫，每次執行，所以若呼叫 10 次，就會執行 10 次。</p>
</li>
<li><p>computed</p>
<p>與 method 不同的點，若是當資料沒有變動時，就不會重新計算，<br>所以就算呼叫 10 次，資料若沒變的話，就直接回傳 cache 給你。</p>
</li>
</ul>
<h3 id="如何選擇"><a href="#如何選擇" class="headerlink" title="如何選擇"></a>如何選擇</h3><p>在選擇二者時，請優先考慮 <font color="red"><strong>computed</strong></font>，若 <strong>computed</strong> 可以使用且滿足你的需求，就用 <strong>computed</strong> 來執行，<br>另外下列簡易區分方式</p>
<ul>
<li><p>computed</p>
<p>若是性質比較偏向 data 的 <strong>資料格式</strong> 或 <strong>內容處理</strong> 的話，可選用 <code>computed</code>。</p>
</li>
<li><p>method</p>
<p>可以想成我們在用 JS 的<code>addeventlistener</code>,通常在某些情況下，我們會呼叫<strong>函式</strong>，幫我們處理相關事宜，如：click、mouseover…等。</p>
</li>
</ul>
<hr>
<h2 id="Computed-跟-method-觸發時機"><a href="#Computed-跟-method-觸發時機" class="headerlink" title="Computed 跟 method 觸發時機"></a>Computed 跟 method 觸發時機</h2><p>這裡我們從 <font color="red"><strong>觸發時機</strong></font> 來比較二者差異，這樣下次要選擇時，就可以選擇較適當作法。</p>
<ul>
<li><p>Computed：其<font color="red"><strong>相依</strong></font>的 <code>data</code> 改變時，computed 才會重新計算。</p>
</li>
<li><p>Methods：只要 <code>data</code> 有改變時，不管 <strong><font color="red">有無</font>相依</strong> ，都會重新計算。</p>
</li>
</ul>
<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><ul>
<li>需要每次更新，就用 <code>Methods</code></li>
<li>在意效能，就用 <code>Computed</code></li>
</ul>
<h3 id="範例-8"><a href="#範例-8" class="headerlink" title="範例"></a>範例</h3><p>可以點擊範例裡的<code>count</code>按鈕，然後看 console 顯示的訊息，<br>你就會知道<code>Computed</code> 或 <code>Methods</code> <font color="red">觸發時機</font>有什麼不一樣了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"plus"</span>&gt;</span>count：&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>now (computed)：&#123;&#123; now &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>getNow (method)：&#123;&#123; getNow() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">      count: 0</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 只要 Vue data 的值有改變時，不管是哪一個值改變，都會觸發每一個函式重新計算。</span></span></span><br><span class="line"><span class="javascript">      getNow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"getNow"</span> + <span class="string">"--被觸發執行了"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      plus() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"plus"</span> + <span class="string">"----被觸發執行了"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.count += <span class="number">1</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    computed: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 其相依的 `data` 改變時，computed 才會重新計算。</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 下面 now 函式裡面沒有 count 的變數，所以count更新時，也不會被觸發</span></span></span><br><span class="line"><span class="javascript">      now: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"now"</span> + <span class="string">"-----被觸發執行了"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>範例程式：<a href="http://jsbin.com/bapukabodi/1/edit?html,js,output" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<hr>
<h2 id="Computed-與-Watch-的差異"><a href="#Computed-與-Watch-的差異" class="headerlink" title="Computed 與 Watch 的差異"></a>Computed 與 Watch 的差異</h2><h3 id="觸發時機"><a href="#觸發時機" class="headerlink" title="觸發時機"></a>觸發時機</h3><ul>
<li><p>Computed：當 methods 裡，有<font color="red"><strong>包含</strong></font>到 Vue Data 的變數的話，當變數值更新時，就會觸發 Computed 裡 method 的呼叫。</p>
</li>
<li><p>Watch：針對 Vue Data 裡，<font color="red"><strong>特別指定</strong></font>監聽某<font color="red"><strong>一個變數</strong></font>，當此變數更新時，就會觸發 Watch 裡 method 的呼叫。</p>
</li>
</ul>
<h3 id="說明-2"><a href="#說明-2" class="headerlink" title="說明"></a>說明</h3><p>在一般情況下，我們通常會直接使用<code>Computed</code>去監聽變數，不用<code>Watch</code>是因為還需要一個個變數去綁定，<br>不過有時如果遇到要處理<font color="red"><strong>非同步</strong></font>或<font color="red"><strong>複雜的計算</strong></font>時，就可以考慮使用<code>Watch</code>來處理事情。</p>
<h3 id="Watch-範例"><a href="#Watch-範例" class="headerlink" title="Watch 範例"></a>Watch 範例</h3><p>我想要「使用 trigger 來觸發旋轉 box、並在三秒後改變回來」，所以我特別指定監聽 <code>trigger</code> 這個變數是否有變更。</p>
<blockquote>
<p>Watch 範例：<a href="http://jsbin.com/poxiwirazi/edit?html,css,js,output" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<div class="note info">官方說明：<a href="https://vuefe.cn/v2/guide/computed.html#watcher" target="_blank" rel="noopener">watcher</a></div>

<hr>
<h2 id="template-小技巧"><a href="#template-小技巧" class="headerlink" title="template 小技巧"></a>template 小技巧</h2><p>以往我們要針對<font color="red"><strong>多個</strong></font>DOM 新增<code>v-if</code>判斷時，需要一個一個新增，如下例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"showTemplate"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Kanboo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"showTemplate"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lucas<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>若是多個 DOM 的條件都為一樣的話，此時我們可以使用<code>template</code>標籤，<br>將整個區塊包起來，然後在<code>template</code>上，新增判斷式即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"showTemplate"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Kanboo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lucas<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="DOM-解析注意"><a href="#DOM-解析注意" class="headerlink" title="DOM 解析注意"></a>DOM 解析注意</h2><p>某些 HTML 元素<font color="red">限制</font>內部的元素只能是某幾種 tag，<br>如：table、select、ul / ol 等，若是使用 Component 時就必須特別小心。</p>
<ul>
<li>table =&gt; thead、tbody =&gt; tr =&gt; td</li>
<li>select =&gt; option</li>
<li>ul、ol =&gt; li</li>
</ul>
<h3 id="失效範例"><a href="#失效範例" class="headerlink" title="失效範例"></a>失效範例</h3><p>雖然 <code>select</code> 底下的 Component <code>my-option</code> 的裡面是使用<code>option</code>看似合理，<br>不過最主要是一開始 HTML 在渲染時，看到<code>select</code>底下的是 <code>my-option</code> 標籤，<br>因為 HTML 認為這在<code>select</code> 底下是無效的標籤，所以就將<code>my-option</code> 標籤移除，<br>也因為這樣 Vue 要在解析 Component 時，已經不見了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-option</span>&gt;</span><span class="tag">&lt;/<span class="name">my-option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">"my-option"</span>, &#123;</span><br><span class="line">  template: <span class="string">`&lt;option&gt;Option A&lt;/option&gt;`</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="正確方法"><a href="#正確方法" class="headerlink" title="正確方法"></a>正確方法</h3><p>若要可以正常渲染的話，就需將 Component 寫法移至 Vue 的 template 裡面，<br>透過這樣的方式，讓 Vue 來幫我們解析及渲染畫面。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">"my-option"</span>, &#123;</span><br><span class="line">  template: <span class="string">`&lt;option&gt;Option A&lt;/option&gt;`</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div id="app"&gt;</span></span><br><span class="line"><span class="string">      &lt;select&gt;&lt;my-option&gt;&lt;/my-option&gt;&lt;/select&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="資料更新的機制"><a href="#資料更新的機制" class="headerlink" title="資料更新的機制"></a>資料更新的機制</h2><p>一般情況下，我們要更新 Vue Data 裡面的值時，通常直接指定變數後，就賦予值給它，<br>不過若是要更新「<font color="red">物件 和 陣列</font>」時，就要注意什麼情況會更新，什麼情況不會被更新，<br>下列範例主要是看 PJ 大文章說明(<a href="https://pjchender.blogspot.com/2017/05/vue-vue-reactivity.html" target="_blank" rel="noopener">為什麼畫面沒有隨資料更新 - Vue 響應式原理（Reactivity）</a>)，<br>將一些關鍵點紀錄下來</p>
<h3 id="物件更新"><a href="#物件更新" class="headerlink" title="物件更新"></a>物件更新</h3><p>若是物件要更新某個屬性值的話，有下列方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> postVm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#post"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    post: &#123;</span><br><span class="line">      userId: <span class="string">""</span>,</span><br><span class="line">      id: <span class="string">""</span>,</span><br><span class="line">      title: <span class="string">""</span></span><br><span class="line">      <span class="comment">// body: "",    //一開始沒加</span></span><br><span class="line">      <span class="comment">// author: ""   //一開始沒加</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">let</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">//  https://jsonplaceholder.typicode.com/posts/1</span></span><br><span class="line">    request.get(root + <span class="string">"/posts/3"</span>).end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> response = res.body;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 問題狀況</span></span><br><span class="line"><span class="comment">       * 1. vm.post.body 一開始忘記設定進去</span></span><br><span class="line"><span class="comment">       * 2. vm.post.author 後來新增的欄位</span></span><br><span class="line"><span class="comment">       * 資料已經設定進去，但是畫面沒有更新，可以開 Vue Dev Tool 搭配 $forceUpdate()</span></span><br><span class="line"><span class="comment">       **/</span></span><br><span class="line">      vm.post.userId = response.userId;</span><br><span class="line">      vm.post.id = response.id;</span><br><span class="line">      vm.post.title = response.title;</span><br><span class="line">      <span class="comment">// ↓ 事後新增此變數，畫面會無法自動刷新，主要是沒有賦予響應式屬性(Reactivity)。</span></span><br><span class="line">      vm.post.body = response.body;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 解決辦法 1: 一開始在 data 的地方就補齊</span></span><br><span class="line"><span class="comment">       **/</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 解決辦法 2: 使用 Vue.set(object, key, value)，重新賦予響應式屬性(Reactivity)</span></span><br><span class="line"><span class="comment">       **/</span></span><br><span class="line">      vm.$<span class="keyword">set</span>(vm.post, "body", response.body);</span><br><span class="line">      vm.$<span class="keyword">set</span>(vm.post, "author", "");</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * 解決辦法 3: 使用 Object.assign 建立新的物件</span><br><span class="line">       **/</span><br><span class="line">      // vm.post = response       // 不建議</span><br><span class="line">      vm.post = Object.assign(&#123;&#125;, response, &#123; <span class="attr">author</span>: <span class="string">""</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="陣列更新"><a href="#陣列更新" class="headerlink" title="陣列更新"></a>陣列更新</h3><p>若針對陣列時，只有下列幾個 <strong>methods</strong>，才會觸發 Vue 去重新渲染畫面。</p>
<p>陣列函式：<font color="red">push()、pop()、shift()、unshift()、splice()、sort()、reverse()</font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> postsVm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#posts"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    currentIndex: <span class="string">""</span>,</span><br><span class="line">    posts: [],</span><br><span class="line">    post: &#123;</span><br><span class="line">      userId: <span class="string">""</span>,</span><br><span class="line">      id: <span class="string">""</span>,</span><br><span class="line">      title: <span class="string">""</span>,</span><br><span class="line">      body: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    refreshForm(index) &#123;</span><br><span class="line">      <span class="keyword">this</span>.currentIndex = index; <span class="comment">// 暫存用變數</span></span><br><span class="line">      <span class="keyword">this</span>.post.userId = <span class="keyword">this</span>.posts[index].userId;</span><br><span class="line">      <span class="keyword">this</span>.post.id = <span class="keyword">this</span>.posts[index].id;</span><br><span class="line">      <span class="keyword">this</span>.post.title = <span class="keyword">this</span>.posts[index].title;</span><br><span class="line">      <span class="keyword">this</span>.post.body = <span class="keyword">this</span>.posts[index].body;</span><br><span class="line">    &#125;,</span><br><span class="line">    saveForm(event) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"saveForm"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"this.currentIndex"</span>, <span class="keyword">this</span>.currentIndex);</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 問題一：</span></span><br><span class="line"><span class="comment">       * 使用 index 的方式修改陣列中的內容會壞掉</span></span><br><span class="line"><span class="comment">       * - 資料更新但畫面不更新</span></span><br><span class="line"><span class="comment">       **/</span></span><br><span class="line">      <span class="keyword">this</span>.posts[<span class="keyword">this</span>.currentIndex] = <span class="keyword">this</span>.post;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 解決方法一：使用 Vue 可觀察到的陣列方法</span></span><br><span class="line"><span class="comment">       * push()、pop()、shift()、unshift()、splice()、sort()、reverse()</span></span><br><span class="line"><span class="comment">       * arr.splice(startIndex, delteCount, addItem)</span></span><br><span class="line"><span class="comment">       **/</span></span><br><span class="line">      <span class="keyword">this</span>.posts.splice(<span class="keyword">this</span>.currentIndex, <span class="number">1</span>, <span class="keyword">this</span>.post); <span class="comment">// 會有陣例 by reference 問題</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 解決方法二： 使用 vm.$set</span></span><br><span class="line"><span class="comment">       * vm.$set(array, index, value)</span></span><br><span class="line"><span class="comment">       **/</span></span><br><span class="line">      <span class="keyword">this</span>.$<span class="keyword">set</span>(this.posts, this.currentIndex, this.post); // 會有陣例 by reference 問題</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * 問題二：陣列中的值是「物件內容」變成響應式的，會有by reference，</span><br><span class="line">       *        所以若是遇到「物件」的話，建議使用 Object.assign 重新賦予</span><br><span class="line">       **/</span><br><span class="line"></span><br><span class="line">      // 對應 解法一</span><br><span class="line">      this.posts.splice(</span><br><span class="line">        this.currentIndex,</span><br><span class="line">        1,</span><br><span class="line">        Object.assign(&#123;&#125;, <span class="keyword">this</span>.post) <span class="comment">// 重新創一個新物件</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 對應 解法二</span></span><br><span class="line">      <span class="keyword">this</span>.$<span class="keyword">set</span>(this.posts, this.currentIndex, Object.assign(&#123;&#125;, <span class="keyword">this</span>.post));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// postsLength () &#123;</span></span><br><span class="line">    <span class="comment">//     // 提醒：如果畫面中沒有使用到 postsLength ，則不會自動促發 computed</span></span><br><span class="line">    <span class="comment">//     let newPostId = this.posts.length + 1</span></span><br><span class="line">    <span class="comment">//     this.post.id = newPostId</span></span><br><span class="line">    <span class="comment">//     return newPostId</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">let</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// AJAX request</span></span><br><span class="line">    <span class="comment">//  https://jsonplaceholder.typicode.com/posts/</span></span><br><span class="line">    request.get(root + <span class="string">"/posts"</span>).end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">      vm.posts = res.body;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<div class="note info">PJ：<a href="https://pjchender.blogspot.com/2017/05/vue-vue-reactivity.html" target="_blank" rel="noopener">為什麼畫面沒有隨資料更新 - Vue 響應式原理（Reactivity）</a><br>官方說明：<a href="https://cn.vuejs.org/v2/guide/list.html#%E5%8F%98%E5%BC%82%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">Vue-Mutation Methods</a><br></div>

<hr>
<h2 id="Vue-生命週期"><a href="#Vue-生命週期" class="headerlink" title="Vue 生命週期"></a>Vue 生命週期</h2><p>建立或移除 DOM 元素時，所經歷的事件</p>
<ol>
<li>beforeCreate：實體初始化。</li>
<li>Created：實體建立完成。資料 <code>$data</code> 已可取得，但 <code>$el</code> 屬性還未被建立。<br>———–↓↓↓————–</li>
<li>beforeMount：執行元素掛載之前。</li>
<li>mounted：元素已掛載， <code>$el</code> 被建立。<br>———–↓↓↓————–</li>
<li>beforeUpdate：當資料變化時被呼叫，還不會描繪 View。</li>
<li>updated：DOM 的更新已經完成，View 被顯示在畫面上。<br>———–↓↓↓————–</li>
<li>activated：如果有設定 <code>keep-alive</code>，這個掛鉤會被呼叫。</li>
<li>deactivated：停用 <code>keep-alive</code>時被呼叫。<br>或</li>
<li>beforeDestroy：實體還可使用。</li>
<li>destroyed：實體銷毀。所有綁定被解除、事件偵聽被移除、子實體也被銷毀。</li>
</ol>
<!-- ![](https://i.imgur.com/7w0kREW.png) -->
<img src="/2021/08/15/VueJS/vuelifecycle.png">
<h3 id="範例-9"><a href="#範例-9" class="headerlink" title="範例"></a>範例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">beforeCreate() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`beforeCreate! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line">created() &#123;</span><br><span class="line">  alert(<span class="string">`created! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">beforeMount() &#123;</span><br><span class="line">  alert(<span class="string">`beforeMount! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">  alert(<span class="string">`mounted! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">updated () &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`updated! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">activated () &#123;</span><br><span class="line">  <span class="comment">// 有使用 keep-alive 時，會觸發此事件</span></span><br><span class="line">  alert(<span class="string">`activated! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line">deactivated () &#123;</span><br><span class="line">  <span class="comment">// 有使用 keep-alive 時，當使用v-if為false，</span></span><br><span class="line">  alert(<span class="string">`deactivated! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">  <span class="comment">// 刪除前</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`beforeDestroy! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line">destroyed() &#123;</span><br><span class="line">  <span class="comment">// 刪除後</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`destroyed! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>生命週期範例 1：<a href="http://jsbin.com/hajenewatu/1/edit?html,js,console,output" target="_blank" rel="noopener">JSBin</a><br>生命週期範例 2：<a href="http://jsbin.com/fitopuviba/edit?html,css,js,output" target="_blank" rel="noopener">JSBin</a></p>
</blockquote>
<div class="note info">參考文件：<a href="http://blog.tonycube.com/2017/04/vuejs-8-lifecycle.html" target="_blank" rel="noopener">Vue 實體與生命週期</a>、<a href="http://blog.percymong.com/articles/vue-lifecycle/" target="_blank" rel="noopener">Vue 生命周期钩子</a><br></div>
]]></content>
      <categories>
        <category>VueJS</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
      </tags>
  </entry>
</search>
