<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bryan&#39;s Notes</title>
  
  <subtitle>學習筆記</subtitle>
  <link href="hhttps://bryanhsiao.github.io/atom.xml" rel="self"/>
  
  <link href="hhttps://bryanhsiao.github.io/"/>
  <updated>2021-09-02T15:57:13.371Z</updated>
  <id>hhttps://bryanhsiao.github.io/</id>
  
  <author>
    <name>Bryan Hsiao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS-ArrayUnique</title>
    <link href="hhttps://bryanhsiao.github.io/2021/09/02/JS-ArrayUnique/"/>
    <id>hhttps://bryanhsiao.github.io/2021/09/02/JS-ArrayUnique/</id>
    <published>2021-09-02T15:56:10.000Z</published>
    <updated>2021-09-02T15:57:13.371Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/09/02/JS-ArrayUnique/js_01.png"></p><font style="font-size:20px;">紀錄 ArrayUnique 從早期<code>indexOf</code>的方式到現今各種優化的寫法。</font></blockquote><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>下列的各種範例，統一使用的 <strong>Array 資料</strong>，如下</p><figure class="highlight js"><figcaption><span>ArrayData</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = [<span class="string">"Kanboo"</span>, <span class="string">"Jack"</span>, <span class="string">"Rabbit"</span>, <span class="string">"Lucas"</span>, <span class="string">"Jack"</span>, <span class="string">"Lucas"</span>, <span class="string">"Rabbit"</span>];</span><br></pre></td></tr></table></figure><hr><h2 id="forloop-indexOf"><a href="#forloop-indexOf" class="headerlink" title="forloop + indexOf"></a>forloop + indexOf</h2><p>早期使用的 <code>for迴圈</code> + <code>indexOf</code> 判斷是否已存在的值。</p><figure class="highlight js"><figcaption><span>indexOf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = [<span class="string">"Kanboo"</span>, <span class="string">"Jack"</span>, <span class="string">"Rabbit"</span>, <span class="string">"Lucas"</span>, <span class="string">"Jack"</span>, <span class="string">"Lucas"</span>, <span class="string">"Rabbit"</span>];</span><br><span class="line"><span class="keyword">let</span> result_01 = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; source.length; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> el = source[i];</span><br><span class="line">  <span class="keyword">if</span> (result_01.indexOf(el) === <span class="number">-1</span>) result_01.push(el);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result_01"</span>, result_01); <span class="comment">// ["Kanboo", "Jack", "Rabbit", "Lucas"]</span></span><br></pre></td></tr></table></figure><hr><h2 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h2><p>在 ES6 提供了一個新方法：<code>Array.prototype.includes()</code>，判斷陣列中是否已有相同的值？</p><ul><li>有相同的值，回傳 <code>true</code></li><li>無相同的值，回傳 <code>false</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = [<span class="string">"Kanboo"</span>, <span class="string">"Jack"</span>, <span class="string">"Rabbit"</span>, <span class="string">"Lucas"</span>, <span class="string">"Jack"</span>, <span class="string">"Lucas"</span>, <span class="string">"Rabbit"</span>];</span><br><span class="line"><span class="keyword">let</span> result_02 = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; source.length; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> el = source[i];</span><br><span class="line">  <span class="keyword">if</span> (!result_02.includes(el)) result_02.push(el);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result_02"</span>, result_02); <span class="comment">// ["Kanboo", "Jack", "Rabbit", "Lucas"]</span></span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">MDN-Array.prototype.includes()</a></div><hr><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>將原本使用的 <code>for迴圈</code> ，改使用 <code>forEach</code> 執行，省略掉定義 <code>i</code>、<code>source.length</code>…等動作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = [<span class="string">"Kanboo"</span>, <span class="string">"Jack"</span>, <span class="string">"Rabbit"</span>, <span class="string">"Lucas"</span>, <span class="string">"Jack"</span>, <span class="string">"Lucas"</span>, <span class="string">"Rabbit"</span>];</span><br><span class="line"><span class="keyword">let</span> result_03 = [];</span><br><span class="line"></span><br><span class="line">source.forEach(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!result_03.includes(el)) result_03.push(el);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result_03"</span>, result_03); <span class="comment">// ["Kanboo", "Jack", "Rabbit", "Lucas"]</span></span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">MDN-arr.forEach</a></div><hr><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h2><p>遍歷每個元素，依序<font color="red">組合、加總</font>，然後丟給下個元素，最終會回傳<font color="red">一個結果</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = [<span class="string">"Kanboo"</span>, <span class="string">"Jack"</span>, <span class="string">"Rabbit"</span>, <span class="string">"Lucas"</span>, <span class="string">"Jack"</span>, <span class="string">"Lucas"</span>, <span class="string">"Rabbit"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result_04 = source.reduce(<span class="function">(<span class="params">p, c</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//includes 判斷是否已存在</span></span><br><span class="line">  <span class="keyword">if</span> (!p.includes(c)) p.push(c);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result_04"</span>, result_04); <span class="comment">// ["Kanboo", "Jack", "Rabbit", "Lucas"]</span></span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">MDN-reduce()</a></div><hr><h2 id="Set-Array-from"><a href="#Set-Array-from" class="headerlink" title="Set() + Array.from()"></a>Set() + Array.from()</h2><p><code>Set</code> 對象允許你存儲任何類型的<font color="red">唯一值</font>，無論是原始值或者是對象引用。</p><p><code>Array.from()</code> 會從類陣列(array-like)或是可迭代的物件<font color="red">建立一個新的陣列</font>。</p><p>根據上述二種方法的特性，快速達成產生一個 <font color="red"><strong>已去除重覆值的新陣列</strong></font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = [<span class="string">"Kanboo"</span>, <span class="string">"Jack"</span>, <span class="string">"Rabbit"</span>, <span class="string">"Lucas"</span>, <span class="string">"Jack"</span>, <span class="string">"Lucas"</span>, <span class="string">"Rabbit"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 將 source資料 丟進 new set，使其產生一個新的 set集合 ，並且已去除重覆的值</span></span><br><span class="line"><span class="comment">//2. 然後再將 set集合 丟進 Array.from，將 set集合的資料 轉化成 Array型態。(註：產生新陣列，不影響舊資料)</span></span><br><span class="line"><span class="keyword">let</span> result_05 = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(source));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result_05"</span>, result_05); <span class="comment">// ["Kanboo", "Jack", "Rabbit", "Lucas"]</span></span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener">MDN-Array.from()</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="noopener">MDN-Set()</a><br><a href="http://es6.ruanyifeng.com/#docs/set-map#Set" target="_blank" rel="noopener">阮一峰-Set()</a></div><hr><h2 id="Set-Spread"><a href="#Set-Spread" class="headerlink" title="Set() + Spread"></a>Set() + Spread</h2><p><code>...</code> 為 ES6 的展開運算子（spread operator），把一個陣列展開(expand)成個別數值</p><figure class="highlight js"><figcaption><span>簡寫</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = [<span class="string">"Kanboo"</span>, <span class="string">"Jack"</span>, <span class="string">"Rabbit"</span>, <span class="string">"Lucas"</span>, <span class="string">"Jack"</span>, <span class="string">"Lucas"</span>, <span class="string">"Rabbit"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 將 source資料 丟進 new set，使其產生一個新的 set集合 ，並且已去除重覆的值</span></span><br><span class="line"><span class="comment">//2. 用 ...(展開運算子)，將 Set 轉換為 Array(註：...set外圈有個 中框號[]，用來轉換陣列型態)</span></span><br><span class="line"><span class="keyword">let</span> result_06 = [...new <span class="built_in">Set</span>(source)];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result_06"</span>, result_06); <span class="comment">// ["Kanboo", "Jack", "Rabbit", "Lucas"]</span></span><br></pre></td></tr></table></figure><p><span id="inline-green">補充說明</span></p><p><code>...</code> 只是將 <code>陣列</code>、<code>set</code> 的值拆解一個一個的值，並<font color="red">無額外產生新陣列</font>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(...number); <span class="comment">// 1,2,3,4,5</span></span><br><span class="line"><span class="built_in">console</span>.log(...mySet); <span class="comment">// 1,2,3,4</span></span><br></pre></td></tr></table></figure><div class="note info"><a href="https://pjchender.blogspot.tw/2017/01/es6-spread-operatorrest-operator.html" target="_blank" rel="noopener">PJ-…</a><br><a href="http://eddychang.me/blog/16-javascript/45-spread-operator-rest-parameters.html" target="_blank" rel="noopener">eddy-…</a></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/09/02/JS-ArrayUnique/js_01.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;紀錄 ArrayUnique 從早期&lt;code&gt;indexOf&lt;/code&gt;的方式到現今各種優化的寫法。&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="Array" scheme="hhttps://bryanhsiao.github.io/tags/Array/"/>
    
    <category term="Unique" scheme="hhttps://bryanhsiao.github.io/tags/Unique/"/>
    
    <category term="Reduce" scheme="hhttps://bryanhsiao.github.io/tags/Reduce/"/>
    
    <category term="Set" scheme="hhttps://bryanhsiao.github.io/tags/Set/"/>
    
    <category term="Spread" scheme="hhttps://bryanhsiao.github.io/tags/Spread/"/>
    
  </entry>
  
  <entry>
    <title>CSS-webfont 字體</title>
    <link href="hhttps://bryanhsiao.github.io/2021/09/01/CSS-Webfont/"/>
    <id>hhttps://bryanhsiao.github.io/2021/09/01/CSS-Webfont/</id>
    <published>2021-09-01T15:30:07.000Z</published>
    <updated>2021-09-01T15:31:19.578Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/09/01/CSS-Webfont/webfont_01.png"></p></blockquote><a id="more"></a><hr><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入字體</span></span><br><span class="line">@<span class="keyword">import</span> url(//fonts.googleapis.com/earlyaccess/notosansscsliced.css);</span><br><span class="line"></span><br><span class="line"><span class="comment">//設定字體</span></span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">"Noto Sans SC Sliced"</span>, sans-serif;</span><br></pre></td></tr></table></figure><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p></p><p data-height="322" data-theme-id="0" data-slug-hash="dJpzZm" data-default-tab="result" data-user="Kanboo" data-embed-version="2" data-pen-title="Webfont - 思源體" class="codepen">See the Pen <a href="https://codepen.io/Kanboo/pen/dJpzZm/" target="_blank" rel="noopener">Webfont - 思源體</a> by Kanboo (<a href="https://codepen.io/Kanboo" target="_blank" rel="noopener">@Kanboo</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><hr><h2 id="問題紀錄"><a href="#問題紀錄" class="headerlink" title="問題紀錄"></a>問題紀錄</h2><p>雖然已有在 css 設定 <font color="blue">font-family: ‘Noto Sans SC Sliced’, sans-serif;</font> ，<br>不過還是沒套用到新的 <strong>font-family</strong> ，因為<font color="red">CSS 權重</font>的問題，還是使用預設的 <font color="blue">微體正黑體</font>，</p><img src="/2021/09/01/CSS-Webfont/webfont_02.png"><p>可能是因為 codepen 有額外加 font-family 設定，導致 <code>&lt;style&gt;</code>的 CSS 權限 大於在 CSS 檔裡面的屬性設定</p><img src="/2021/09/01/CSS-Webfont/webfont_03.png"><p>所以若要強制轉換的話，就需要加 <font color="red">!important</font></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">"Noto Sans SC Sliced"</span>, sans-serif <span class="meta">!important</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><div class="note info"><a href="https://www.landiannews.com/archives/38885.html" target="_blank" rel="noopener">谷歌提出字体切片方案</a><br><a href="https://fonts.google.com/earlyaccess#Noto+Sans+SC+Sliced" target="_blank" rel="noopener">Noto Sans SC Sliced</a><br></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/09/01/CSS-Webfont/webfont_01.png&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/tags/CSS/"/>
    
    <category term="webfont" scheme="hhttps://bryanhsiao.github.io/tags/webfont/"/>
    
    <category term="字體" scheme="hhttps://bryanhsiao.github.io/tags/字體/"/>
    
  </entry>
  
  <entry>
    <title>CSS-垂直置中的方法</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/31/CSS-vertical-align/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/31/CSS-vertical-align/</id>
    <published>2021-08-30T16:00:00.000Z</published>
    <updated>2021-08-31T14:39:57.991Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>整理常用 CSS 常用的 <span id="inline-blue">垂直置中</span> 的方法。</p></blockquote><a id="more"></a><hr><h2 id="文字的垂直置中方法"><a href="#文字的垂直置中方法" class="headerlink" title="文字的垂直置中方法"></a>文字的垂直置中方法</h2><p>此方法適用 <font style="color:#f90;font-size:20px;">單行</font>，因為是行高，所以會在行內元素的上下都加上行高的 1/2 ，<br>如果<font style="color:#f90;font-size:20px;">多行</font>，第二行與第一行的間距會變超大，就會導致沒有垂直置中的效果。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// height 和 line-height 要一樣高</span><br><span class="line"></span><br><span class="line">.div0,.div1 &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line"><span class="addition">+ height: 250px;</span></span><br><span class="line"><span class="addition">+ line-height: 250px;</span></span><br><span class="line">  text-align: center;</span><br><span class="line">  border: 1px solid #000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p data-height="326" data-theme-id="0" data-slug-hash="GREobwy" data-default-tab="css,result" data-user="Kanboo" data-embed-version="2" data-pen-title="垂直置中 - line-height" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/GREobwy" target="_blank" rel="noopener">垂直置中 - line-height</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><hr><h2 id="calc-amp-transform"><a href="#calc-amp-transform" class="headerlink" title="calc &amp; transform"></a>calc &amp; transform</h2><p>使用 <font style="color:red;font-size:20px;">calc</font> 動態計算的能力，讓要置中的 div 的 top 屬性，<br>與上方的距離是<font style="color:#f90;font-size:20px;">「50% 的外框高度 + 50% 的 div 高度」</font>，就可以做到垂直置中。</p><p>範例 1：設定 top：50%，再扣掉 div 的 高度/2</p><ul><li>方法 1：top: calc( 50% - (高度/2) )</li><li>方法 2：top: 50%; margin-top: -(高度/2);</li><li>方法 3：top: 50%; transform: translateY(-50%); <font style="color:red;font-size:16px;"><i class="fa fa-thumbs-o-up" aria-hidden="true"></i>自行計算 50%的 div 高度</font></li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.redbox &#123;</span><br><span class="line">    background: #c00;</span><br><span class="line">    float: left;</span><br><span class="line"><span class="addition">+   position: relative; //要宣告position，才能使用 top、left</span></span><br><span class="line">    width: 30px;</span><br><span class="line"><span class="deletion">-   //計算方法1</span></span><br><span class="line"><span class="addition">+   height: 30px;</span></span><br><span class="line"><span class="addition">+   top: calc(50% - 15px); //高：30/2=15</span></span><br><span class="line">  &#125;</span><br><span class="line">  .greenbox &#123;</span><br><span class="line">    background: #0c0;</span><br><span class="line">    float: left;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 30px;</span><br><span class="line"><span class="deletion">-   //計算方法2</span></span><br><span class="line"><span class="addition">+   height: 80px;</span></span><br><span class="line"><span class="addition">+   top: 50%;</span></span><br><span class="line"><span class="addition">+   margin-top: -40px;  //高：80/2=40</span></span><br><span class="line">  &#125;</span><br><span class="line">  .bluebox &#123;</span><br><span class="line">    background: #00f;</span><br><span class="line">    float: left;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 30px;</span><br><span class="line">    height: 50px;</span><br><span class="line"><span class="deletion">-   //計算方法3</span></span><br><span class="line"><span class="addition">+   top:50%;</span></span><br><span class="line"><span class="addition">+   transform: translateY(-50%);</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p></p><p data-height="280" data-theme-id="0" data-slug-hash="yLXedPZ" data-default-tab="css,result" data-user="Bryan" data-embed-version="2" data-pen-title="垂直置中 - calc 動態計算1" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/yLXedPZ" target="_blank" rel="noopener">垂直置中 - calc 動態計算1</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>範例 2：將三個 div 設定寬高各 30px，將滑鼠移到黑框內，可觀看效果。</p><p></p><p data-height="277" data-theme-id="0" data-slug-hash="QWgyXaV" data-default-tab="css,result" data-user="Bryan" data-embed-version="2" data-pen-title="垂直置中 - calc 動態計算2" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/QWgyXaV" target="_blank" rel="noopener">垂直置中 - calc 動態計算2</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><hr><h2 id="絕對定位"><a href="#絕對定位" class="headerlink" title="絕對定位"></a>絕對定位</h2><p>利用絕對位置來指定，要將 <font style="color:red;font-size:20px;">上下</font> 的數值都設為 <font style="color:red;font-size:20px;">0</font>，再搭配一個 <font style="color:red;font-size:20px;">margin:auto</font>，就可以辦到垂直置中。</p><div class="note info">邏輯：<br>這個方法同時設定top和bottom為0，使得這個div完全不可能符合，最後再透過margin這個指令，讓它達到垂直置中的效果<br></div><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  .redbox &#123;</span><br><span class="line"><span class="deletion">-   // 垂直置中</span></span><br><span class="line">    background: #c00;</span><br><span class="line">    position: absolute; //要宣告，才能使用 top、left</span><br><span class="line"><span class="addition">+   top: 0;</span></span><br><span class="line"><span class="addition">+   bottom: 0;</span></span><br><span class="line"><span class="addition">+   margin: auto;</span></span><br><span class="line">  &#125;</span><br><span class="line">  .bluebox &#123;</span><br><span class="line"><span class="deletion">-   // 垂直置中 + 水平置中</span></span><br><span class="line">    background: blue;</span><br><span class="line">    position: absolute; //要宣告，才能使用 top、left</span><br><span class="line">    top: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line"><span class="addition">+   left: 0;</span></span><br><span class="line"><span class="addition">+   right: 0;</span></span><br><span class="line">    margin: auto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p></p><p data-height="230" data-theme-id="0" data-slug-hash="dyRGBZp" data-default-tab="css,result" data-user="Bryan" data-embed-version="2" data-pen-title="垂直置中 - 絕對定位" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/dyRGBZp" target="_blank" rel="noopener">垂直置中 - 絕對定位</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><hr><h2 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a>Flexbox</h2><p>CSS3 最威的盒子模型：Flexbox，使用 <font style="color:#f90;font-size:20px;">align-items</font> 或 <font style="color:#f90;font-size:20px;">align-content</font> 的屬性，</p><p>輕輕鬆鬆就可以做到垂直置中的效果喔，Bootstrap 4 也有用喔。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.div0 &#123;</span><br><span class="line"><span class="addition">+ display: flex;</span></span><br><span class="line"><span class="addition">+ align-items: center;</span></span><br><span class="line"><span class="addition">+ justify-content: center;</span></span><br><span class="line">  width: 150px;</span><br><span class="line">  height: 150px;</span><br><span class="line">  border: 1px solid #000;</span><br><span class="line"></span><br><span class="line">  .redbox &#123;</span><br><span class="line">    width: 30px;</span><br><span class="line">    height: 30px;</span><br><span class="line">    background: #c00;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p data-height="225" data-theme-id="0" data-slug-hash="MWoKMvx" data-default-tab="css,result" data-user="Bryan Hsiao" data-embed-version="2" data-pen-title="垂直置中 - Flexbox" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/MWoKMvx" target="_blank" rel="noopener">垂直置中 - Flexbox</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><hr><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><div class="note info"><a href="http://www.oxxostudio.tw/articles/201502/css-vertical-align-7methods.html" target="_blank" rel="noopener">CSS 垂直置中的七個方法</a><br><a href="https://pjchender.blogspot.tw/2015/04/css_15.html" target="_blank" rel="noopener">CSS垂直置中的方法</a><br></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;整理常用 CSS 常用的 &lt;span id=&quot;inline-blue&quot;&gt;垂直置中&lt;/span&gt; 的方法。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/tags/CSS/"/>
    
    <category term="vertical-align" scheme="hhttps://bryanhsiao.github.io/tags/vertical-align/"/>
    
    <category term="垂直置中" scheme="hhttps://bryanhsiao.github.io/tags/垂直置中/"/>
    
  </entry>
  
  <entry>
    <title>CSS-transition 轉場效果</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/29/CSS-Transition/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/29/CSS-Transition/</id>
    <published>2021-08-29T13:23:45.000Z</published>
    <updated>2021-08-31T14:24:41.707Z</updated>
    
    <content type="html"><![CDATA[<img src="/2021/08/29/CSS-Transition/transition_01.png"><font style="font-size:18px;"><br>轉場是從 A 狀態，轉變成 B 狀態，中間的過程，就叫轉場，在 CSS 中叫做 transition。<br></font><a id="more"></a><h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition</span>: property duration timing-function delay;</span><br><span class="line"><span class="attribute">transition</span>: 套用的屬性 花費時間 時間速率 等待時間;</span><br><span class="line"></span><br><span class="line"><span class="attribute">transition</span>: all <span class="number">2s</span> ease-out <span class="number">1s</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同於：</span></span><br><span class="line"><span class="attribute">transition-property</span>: all; <span class="comment">// default: all</span></span><br><span class="line"><span class="attribute">transition-duration</span>: <span class="number">2s</span>; <span class="comment">// default: 0；2s 表示 2 秒；2ms 表示 2 毫秒。</span></span><br><span class="line"><span class="attribute">transition-timing-function</span>: ease-out;</span><br><span class="line"><span class="attribute">transition-delay</span>: <span class="number">1s</span>; <span class="comment">// 開始進行轉場效果之前，所要等待的時間。</span></span><br></pre></td></tr></table></figure><h2 id="transition-timing-function-時間速率"><a href="#transition-timing-function-時間速率" class="headerlink" title="transition-timing-function 時間速率"></a>transition-timing-function 時間速率</h2><img src="/2021/08/29/CSS-Transition/transition-timing-function.png"><p><br></p><p></p><p data-height="450" data-theme-id="dark" data-slug-hash="oNwbKvw" data-default-tab="css,result" data-user="bryan-hsiao" data-embed-version="2" data-pen-title="transition 各種速率" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/oNwbKvw" target="_blank" rel="noopener">transition 各種速率</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><h3 id="範例-1：hover"><a href="#範例-1：hover" class="headerlink" title="範例 1：hover"></a>範例 1：hover</h3><p></p><p data-height="265" data-theme-id="0" data-slug-hash="eYRJqmN" data-default-tab="css,result" data-user="Bryan-Hsiao" data-embed-version="2" data-pen-title="Transition - hover" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/eYRJqmN" target="_blank" rel="noopener">Transition - hover</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><h3 id="範例-2：設定-Two-CSS-properties"><a href="#範例-2：設定-Two-CSS-properties" class="headerlink" title="範例 2：設定 Two CSS properties"></a>範例 2：設定 Two CSS properties</h3><p></p><p data-height="265" data-theme-id="0" data-slug-hash="MWoKNwY" data-default-tab="css,result" data-user="Bryan-Hsiao" data-embed-version="2" data-pen-title="Transition - 設定Two CSS properties" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/MWoKNwY" target="_blank" rel="noopener">Transition - 設定Two CSS properties</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>特別的點：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//設定二個 CSS屬性，設定不同 時間、速率..等</span></span><br><span class="line"><span class="attribute">transition</span>: background <span class="number">0.2s</span> linear, border-radius <span class="number">1s</span> ease-in <span class="number">1s</span>;</span><br></pre></td></tr></table></figure><p>上面案例，特別於在 <strong>:hover</strong> 時，有改變 <strong>背景色</strong> 和 <strong>圓角</strong> 效果，<br>不過在 transition 的設定，分別針對 二個屬性設定不同的時間、速率…等</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://carlos-studio.com/2017/02/23/css-transition-%E8%BD%89%E5%A0%B4%E6%95%88%E6%9E%9C/" target="_blank" rel="noopener">[CSS][Transition] 轉場效果</a></p><p><a href="https://eyesofkids.gitbooks.io/css3/contents/transitions.html#css3轉場效果transitions" target="_blank" rel="noopener">CSS3 轉場效果(transitions)</a></p><p><a href="https://wcc723.github.io/css/2013/08/24/css-transtion-speed/" target="_blank" rel="noopener">CSS transition 各種速率</a></p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;/2021/08/29/CSS-Transition/transition_01.png&quot;&gt;
&lt;font style=&quot;font-size:18px;&quot;&gt;&lt;br&gt;轉場是從 A 狀態，轉變成 B 狀態，中間的過程，就叫轉場，在 CSS 中叫做 transition。&lt;br&gt;&lt;/font&gt;</summary>
    
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/tags/CSS/"/>
    
    <category term="transition" scheme="hhttps://bryanhsiao.github.io/tags/transition/"/>
    
    <category term="動畫" scheme="hhttps://bryanhsiao.github.io/tags/動畫/"/>
    
    <category term="轉場效果" scheme="hhttps://bryanhsiao.github.io/tags/轉場效果/"/>
    
  </entry>
  
  <entry>
    <title>CSS-切版練習</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/27/CSS-RWDlayout/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/27/CSS-RWDlayout/</id>
    <published>2021-08-27T14:12:25.000Z</published>
    <updated>2021-08-31T14:35:35.646Z</updated>
    
    <content type="html"><![CDATA[<img src="/2021/08/27/CSS-RWDlayout/Exercise.png"><font style="font-size:18px;"><br>紀錄練習切版時，遇到卡卡的問題<br></font><a id="more"></a><hr><h2 id="icon-利用-position-位移"><a href="#icon-利用-position-位移" class="headerlink" title="icon 利用 position 位移"></a>icon 利用 position 位移</h2><h3 id="示意圖"><a href="#示意圖" class="headerlink" title="示意圖"></a>示意圖</h3><img src="/2021/08/27/CSS-RWDlayout/icon_position.png"><h3 id="重點"><a href="#重點" class="headerlink" title="重點"></a>重點</h3><ol><li>row 的 position 設置 <strong><em>relative</em></strong>;</li><li>icon 的 position 設置 <strong><em>absolute</em></strong>;</li><li>移動 icon 的位置， top 、 left</li><li>將 icon 移進去在 input 時，input 需增加 <em><strong>左邊 padding</strong></em>，保留位置給 icon。</li></ol><h3 id="HTML-程式碼"><a href="#HTML-程式碼" class="headerlink" title="HTML 程式碼"></a>HTML 程式碼</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>Email Address*<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-envelope-o"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SCSS-程式碼"><a href="#SCSS-程式碼" class="headerlink" title="SCSS 程式碼"></a>SCSS 程式碼</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//記得input的左邊要留padding,保留一些位置給icon</span></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">28px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//位移 icon 至 input 裡</span></span><br><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.icon</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">26px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">9px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">        <span class="attribute">color</span>: rgba(<span class="number">61</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="number">0.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p data-height="450" data-theme-id="dark" data-slug-hash="wveMVWN" data-default-tab="css,result" data-user="bryan-hsiao" data-embed-version="2" data-pen-title="LoginForm&icon位移至input" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/wveMVWN" target="_blank" rel="noopener">LoginForm&amp;icon位移至input</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><h2 id="緞帶效果"><a href="#緞帶效果" class="headerlink" title="緞帶效果"></a>緞帶效果</h2><img src="/2021/08/27/CSS-RWDlayout/ribbon.png"><h3 id="重點-1"><a href="#重點-1" class="headerlink" title="重點"></a>重點</h3><ul><li><font style="color:blue;">.tag-wrap 為 藍色框線</font></li><li><font style="color:red;">.tag 為 紅色框線(熱賣)</font></li></ul><ol><li><font style="color:blue;"><strong><em>.tag-wrap</em></strong></font> 的 position 設置 <strong><em>absolute</em></strong> ，並且位移要<strong><em>超出原有的框架</em></strong>，才能做出緞帶效果;</li><li>新增 <font style="color:red;">.tag</font> 的 width、background-color…等屬性</li><li>利用 <strong><em>transform</em></strong> ，位移翻轉 <font style="color:red;">.tag</font></li><li>移動好 <font style="color:red;">.tag</font> 後，在 <font style="color:blue;">.tag-wrap</font> 新增 <em><strong>overflow: hidden;</strong></em>， 將多餘的部份隱藏</li><li>利用 <font style="color:red;">.tag</font> 的偽元素 <strong><em>:before、:after</em></strong>，新增 <strong><em>小三角 ▲</em></strong></li></ol><h3 id="html-程式碼"><a href="#html-程式碼" class="headerlink" title="html 程式碼"></a>html 程式碼</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  不影響結構  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tag-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tag"</span>&gt;</span></span><br><span class="line">      熱賣!!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--  主要結構  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-block"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SCSS-程式碼-1"><a href="#SCSS-程式碼-1" class="headerlink" title="SCSS 程式碼"></a>SCSS 程式碼</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">230px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//緞帶效果</span></span><br><span class="line"><span class="selector-class">.tag-wrap</span> &#123;</span><br><span class="line">  <span class="variable">$p</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="variable">$size</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="comment">//位移要超出原有的框架，才能做出緞帶效果</span></span><br><span class="line">  <span class="attribute">top</span>: -<span class="variable">$p</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="variable">$p</span>;</span><br><span class="line">  <span class="comment">//超出的部份隱藏</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$size</span> * <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$size</span> * <span class="number">2</span>;</span><br><span class="line">  <span class="comment">//查看位置</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.tag</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$size</span> * <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">0.25rem</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">0.25rem</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="variable">$p</span> * <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="comment">//rotate為旋轉、translate為移動、skew為傾斜、scale為縮放</span></span><br><span class="line">    <span class="attribute">transform</span>: translateX(<span class="number">50%</span>) rotate(<span class="number">45deg</span>) translateY(<span class="number">150%</span>);</span><br><span class="line">    <span class="comment">//查看位置</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line"></span><br><span class="line">    &amp;:before &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="comment">//利用 加粗邊框 + 邊框上方顏色，達到小三角的效果</span></span><br><span class="line">      <span class="attribute">border</span>: <span class="variable">$p</span> solid transparent;</span><br><span class="line">      <span class="attribute">border-top-color</span>: darken(orange, <span class="number">15%</span>);</span><br><span class="line">      <span class="attribute">bottom</span>: -<span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">6px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;:after &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="comment">//利用 加粗邊框 + 邊框上方顏色，達到小三角的效果</span></span><br><span class="line">      <span class="attribute">border</span>: <span class="variable">$p</span> solid transparent;</span><br><span class="line">      <span class="attribute">border-top-color</span>: darken(orange, <span class="number">15%</span>);</span><br><span class="line">      <span class="attribute">bottom</span>: -<span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">14px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>codepen 範例: <a href="https://codepen.io/bryan-hsaio/pen/JjJGgEJ" target="_blank" rel="noopener">CSS-緞帶效果(乾淨版本)</a><br>codepen 範例: <a href="https://codepen.io/bryan-hsaio/pen/RwgrXpJ" target="_blank" rel="noopener">CSS-緞帶效果</a></p></blockquote><hr><h2 id="觀念補充"><a href="#觀念補充" class="headerlink" title="觀念補充"></a>觀念補充</h2><h3 id="六角範例"><a href="#六角範例" class="headerlink" title="六角範例"></a>六角範例</h3><p><a href="https://www.youtube.com/watch?v=ev9bGi_XCqU" target="_blank" rel="noopener">從 Sketch 設計到 CSS 切版</a></p><p><a href="https://codepen.io/Wcc723/pen/zEYXdN" target="_blank" rel="noopener">本日範例：https://codepen.io/Wcc723/pen/zEYXdN</a></p><p><a href="https://codepen.io/Wcc723/pen/pWzxXO" target="_blank" rel="noopener">本日設計參考：https://codepen.io/Wcc723/pen/pWzxXO</a></p><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><img src="/2021/08/27/CSS-RWDlayout/transform.png"><h3 id="CSS-程式碼"><a href="#CSS-程式碼" class="headerlink" title="CSS 程式碼"></a>CSS 程式碼</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">rotate為旋轉</span></span><br><span class="line"><span class="comment">skew為傾斜</span></span><br><span class="line"><span class="comment">scale為縮放</span></span><br><span class="line"><span class="comment">translate為移動 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 範例1：移動X軸 → 旋轉 → 移動Y軸 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(150%) <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>) <span class="selector-tag">translateY</span>(50%);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 範例2：旋轉 → 移動X軸 → 移動Y軸 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>) <span class="selector-tag">translateX</span>(150%) <span class="selector-tag">translateY</span>(50%);</span><br></pre></td></tr></table></figure><img src="/2021/08/27/CSS-RWDlayout/transform_order.png"><p>上列 CSS 程式碼 「<em><strong>範例 1 、 範例 2</strong></em>」，<br>雖然同樣都做了「移動 X 軸、移動 Y 軸、旋轉」的動作，<br>但是因為 <strong><em>執行順序</em></strong> 不同，<br>所以二個範例呈現出來的結果也會<strong>不一樣</strong>。</p><p></p><p data-height="450" data-theme-id="dark" data-slug-hash="qBjbemP" data-default-tab="css,result" data-user="bryan-hsiao" data-embed-version="2" data-pen-title="transform_執行順序" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/qBjbemP" target="_blank" rel="noopener">transform_執行順序</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><blockquote><p><a href="https://www.great-good.tw/learn/css-transform/" target="_blank" rel="noopener">transform 基本介紹</a> &gt;<a href="https://wcc723.github.io/css/2013/10/08/css-transform/" target="_blank" rel="noopener">1.CSS transform 概觀</a> &gt;<a href="https://wcc723.github.io/css/2013/10/09/css-transform-mistake/" target="_blank" rel="noopener">2.CSS transform 軸線的謊言</a> &gt;<a href="https://wcc723.github.io/css/2013/10/10/css-transform-origin/" target="_blank" rel="noopener">3.CSS transform-origin</a> &gt;<a href="https://wcc723.github.io/css/2013/10/11/css-perspective/" target="_blank" rel="noopener">4.CSS transform-3D 的透視</a></p></blockquote><h3 id="SCSS-顏色函數範例"><a href="#SCSS-顏色函數範例" class="headerlink" title="SCSS 顏色函數範例"></a>SCSS 顏色函數範例</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: rgba(<span class="number">#000</span>, <span class="number">0.5</span>); <span class="comment">//變半透明</span></span><br><span class="line">  <span class="attribute">background</span>: invert(<span class="number">#f00</span>); <span class="comment">//變反向色彩</span></span><br><span class="line">  <span class="attribute">background</span>: lighten(<span class="number">#06c</span>, <span class="number">30%</span>); <span class="comment">//變亮</span></span><br><span class="line">  <span class="attribute">background</span>: darken(<span class="number">#06c</span>, <span class="number">15%</span>); <span class="comment">//變暗</span></span><br><span class="line">  <span class="attribute">background</span>: saturate(<span class="number">#06c</span>, <span class="number">50%</span>); <span class="comment">//提高飽和度</span></span><br><span class="line">  <span class="attribute">background</span>: desaturate(<span class="number">#06c</span>, <span class="number">50%</span>); <span class="comment">//降低飽和度</span></span><br><span class="line">  <span class="attribute">background</span>: grayscale(<span class="number">#06c</span>); <span class="comment">//灰階</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.user.today/scss/" target="_blank" rel="noopener">SCSS 相關</a></p></blockquote><h3 id="linear-gradient-讓顏色有漸層效果"><a href="#linear-gradient-讓顏色有漸層效果" class="headerlink" title="linear-gradient 讓顏色有漸層效果"></a>linear-gradient 讓顏色有漸層效果</h3><img src="/2021/08/27/CSS-RWDlayout/deg.png"><h3 id="CSS-程式碼-1"><a href="#CSS-程式碼-1" class="headerlink" title="CSS 程式碼"></a>CSS 程式碼</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image: linear-gradient(165deg, white, white 50%, $bg-color 50%);</span><br></pre></td></tr></table></figure><p>background: linear-gradient( 方向, 第一個顏色, 第二個顏色, … );</p><blockquote><p><a href="http://www.jianshu.com/p/7a2eb94c91da" target="_blank" rel="noopener">背景色  —  线性渐变</a> &gt;<a href="https://medium.com/@savemuse/%E6%87%89%E7%94%A8css3-gradients%E8%A3%BD%E4%BD%9C%E6%BC%B8%E5%B1%A4%E6%95%88%E6%9E%9C-490cf0efd634" target="_blank" rel="noopener">背景色  —  漸層效果</a></p></blockquote><h3 id="繪製幾何圖形-支援度不高"><a href="#繪製幾何圖形-支援度不高" class="headerlink" title="繪製幾何圖形(支援度不高)"></a>繪製幾何圖形(支援度不高)</h3><img src="/2021/08/27/CSS-RWDlayout/clip.png"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">polygon</span>(0 0, 280<span class="selector-tag">px</span> 0, 370<span class="selector-tag">px</span> 100%, 0% 100%);</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://www.css88.com/tool/css-clip-path" target="_blank" rel="noopener">CSS clip-path 生成器</a> &gt;<a href="https://www.webdesigns.com.tw/css_clip-path.asp" target="_blank" rel="noopener">利用 CSS 繪製更多形狀</a> &gt;<a href="https://juejin.im/entry/59a6dab4f265da24976003d3" target="_blank" rel="noopener">不可思议的 CSS 之 CLIP-PATH</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;/2021/08/27/CSS-RWDlayout/Exercise.png&quot;&gt;
&lt;font style=&quot;font-size:18px;&quot;&gt;&lt;br&gt;紀錄練習切版時，遇到卡卡的問題&lt;br&gt;&lt;/font&gt;</summary>
    
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/tags/CSS/"/>
    
    <category term="transform" scheme="hhttps://bryanhsiao.github.io/tags/transform/"/>
    
    <category term="translateX" scheme="hhttps://bryanhsiao.github.io/tags/translateX/"/>
    
    <category term="rotate" scheme="hhttps://bryanhsiao.github.io/tags/rotate/"/>
    
    <category term="translateY" scheme="hhttps://bryanhsiao.github.io/tags/translateY/"/>
    
    <category term="SCSS" scheme="hhttps://bryanhsiao.github.io/tags/SCSS/"/>
    
    <category term="linear-gradient" scheme="hhttps://bryanhsiao.github.io/tags/linear-gradient/"/>
    
    <category term="clip-path" scheme="hhttps://bryanhsiao.github.io/tags/clip-path/"/>
    
    <category term="position" scheme="hhttps://bryanhsiao.github.io/tags/position/"/>
    
  </entry>
  
  <entry>
    <title>JS-一次搞懂 JavaScript 的 this</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/26/JS-this/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/26/JS-this/</id>
    <published>2021-08-26T15:24:38.000Z</published>
    <updated>2021-08-26T15:25:40.536Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/26/JS-this/es6_js.png"></p><font style="font-size:20px;"> 一次搞懂 JavaScript 的 <font color="red">this</font> </font></blockquote><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 FB 直播看到 姚偉揚 老師再說明 javascript 各種 <font color="red">this</font> 的分辨，在此紀錄各種案例。</p><div class="note info">FB影片：<a href="https://www.facebook.com/141247613278573/videos/190238981712769/" target="_blank" rel="noopener">一次搞懂 JavaScript 的 this</a><br>主講者：<a href="https://www.facebook.com/scars.yao?fref=mentions" target="_blank" rel="noopener">姚偉揚</a></div><hr><h2 id="議程重點"><a href="#議程重點" class="headerlink" title="議程重點"></a>議程重點</h2><ol><li>一般函式的 this</li><li>ES6 箭頭函式的 this</li><li>Vue 組件的 this</li><li>bind/apply/call 的 this</li></ol><hr><h2 id="一般函式的-this"><a href="#一般函式的-this" class="headerlink" title="一般函式的 this"></a>一般函式的 this</h2><p><code>this</code> 主要是 <font color="red">看函式(function)怎麼執行</font> 的，下列為常見的分辨的方法</p><ul><li>直接執行 → global</li><li>作為物件的成員函式執行 → 該物件</li><li>作為 DOM 事件偵聽函式 → 該 DOM</li><li>作為建構函式 → 建構出來的實例</li></ul><p>下列為各種 this 的判斷</p><p><span id="inline-purple">範例 1</span></p><figure class="highlight js"><figcaption><span>直接呼叫</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a(); <span class="comment">//window</span></span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 2</span></p><figure class="highlight js"><figcaption><span>作為物件的成員函式執行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">obj.a = a;</span><br><span class="line"></span><br><span class="line">obj.a(); <span class="comment">//obj</span></span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 3</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    b();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.a(); <span class="comment">//window</span></span><br></pre></td></tr></table></figure><p>因為 <code>b()</code> 是直接執行，並不是以 <code>obj.b()</code> 方式執行。</p><p><span id="inline-purple">範例 4</span></p><figure class="highlight html"><figcaption><span>DOM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>作為 DOM 事件偵聽函式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123; a &#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, obj.a); <span class="comment">//DOM元素：&lt;button id='btn'&gt;btn&lt;/button&gt;</span></span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 5</span></p><figure class="highlight html"><figcaption><span>DOM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  b() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      a();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, obj.b()); <span class="comment">//window</span></span><br></pre></td></tr></table></figure><p>因為 <code>a()</code> 是直接執行。</p><figure class="highlight js"><figcaption><span>承上例，執行 obj.b() 後的函式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  a(); <span class="comment">//window</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 6</span></p><figure class="highlight html"><figcaption><span>DOM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  b() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, obj.b()); <span class="comment">//DOM元素：&lt;button id='btn'&gt;btn&lt;/button&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>承上例，執行 obj.b() 後的函式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 7</span></p><figure class="highlight html"><figcaption><span>DOM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a() &#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, obj.a()); <span class="comment">//DOM元素：&lt;button id='btn'&gt;btn&lt;/button&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>承上例，執行 obj.a() 後的函式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div class="note warning">可注意觀察 <strong>範例5~7</strong> 程式碼之間有些微的不同，所造成的this有所不一樣。</div><p><span id="inline-green">善用的方式</span></p><p>另外一種思考的方式，我們在寫<strong>物件內的函式</strong>時，為了確保 <font color="red">this</font> 能夠正確運作會先將它賦予在另一個變數上 (<font color="red">that, self, vm…</font>)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> auntie = &#123;</span><br><span class="line">  name: <span class="string">"漂亮阿姨"</span>,</span><br><span class="line"></span><br><span class="line">  callName() &#123;</span><br><span class="line">    <span class="comment">// 先使用另一個變數指向 this，讓內層函式可以正確使用</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(that); <span class="comment">// auntie 這個物件</span></span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">auntie.callName();</span><br></pre></td></tr></table></figure><hr><h2 id="箭頭函式的-this"><a href="#箭頭函式的-this" class="headerlink" title="箭頭函式的 this"></a>箭頭函式的 this</h2><span class="label info">口訣：</span><p>箭頭函式裡面的 this 等於 外面的 this</p><span class="label info">白話文：</span><p>箭頭函式裡的 this 主要是依據 <font color="red">外層函式(function)裡的 this</font> 是什麼就跟著是什麼。</p><p><span id="inline-yellow">規則</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span> &lt;= 外層函式的<span class="keyword">this</span>，規則參考「一般函式的<span class="keyword">this</span>」</span><br><span class="line">  <span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span> &lt;= 依據外層函式的<span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 1</span></p><figure class="highlight html"><figcaption><span>DOM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, a); <span class="comment">//window</span></span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 2</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.a(); <span class="comment">//window</span></span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 3</span></p><figure class="highlight html"><figcaption><span>DOM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, a); <span class="comment">//DOM元素：&lt;button id='btn'&gt;btn&lt;/button&gt;</span></span><br></pre></td></tr></table></figure><p>與 <strong>一般函式</strong>的<strong>範例 3</strong> 有點類似，雖然 <code>b()</code> 都是直接執行，<br>不過因為箭頭函式裡的 this 主要是依據 <font color="red">外層函式(function)裡的 this</font> 是什麼就跟著是什麼，<br>所以 <code>a()</code> 的 <code>this</code> 是 DOM 元素，所以這裡的 <code>b()</code> 的 <code>this</code> 也會跟著是 DOM 元素。</p><p><span id="inline-purple">範例 4</span></p><p><span id="inline-toc">Q：</span>包了<strong>好幾層</strong>的箭頭函數的 this 也是指向 windows 嗎?</p><p><span id="inline-toc">A：</span>從 <code>c()</code> 一層撥一層 直到 function <code>a()</code>，再參照 <code>a()</code> 的 <code>this</code> 是指向誰。</p><figure class="highlight js"><figcaption><span>洋蔥式一層一層拆解</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//this &lt;= 外層函式的this，規則參考「一般函式的this」</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> b = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> c = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//&lt;= 依據外層函式的this</span></span><br><span class="line">    &#125;;</span><br><span class="line">    c();</span><br><span class="line">  &#125;;</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Vue-組件的-this"><a href="#Vue-組件的-this" class="headerlink" title="Vue 組件的 this"></a>Vue 組件的 this</h2><p>全部皆指向 <font style="color:red;font-size:26px;">vue 實例</font> 本身</p><p><span id="inline-purple">範例 1</span></p><figure class="highlight js"><figcaption><span>一般函數</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">"Hello"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    getMessage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// this 指向 vm 实例</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    prompt: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// this 指向 vm 实例</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 2</span></p><figure class="highlight js"><figcaption><span>箭頭函數</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    test: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//window</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 3</span></p><p>若是 vue 的建立是包在 <code>函數</code> 裡面時，使用 <code>箭頭函數</code> ，則 this 要看外層函數的 this。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//this  &lt;= 外層函式的this，規則參考「一般函式的this」</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      test: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//&lt;= 依據外層函式的this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning">如果在vue裡，寫箭頭函式要使用this的話，因為vue是<font color="red">物件</font>，而不是<font color="red">函式</font>，<br>此時箭頭函式裡的this會指向<strong>外層函式的this</strong>，<br>所以在vue要使用this的話，建議使用 <font color="red">一般函式</font> 寫法。</div><hr><h2 id="bind-apply-call-的-this"><a href="#bind-apply-call-的-this" class="headerlink" title="bind/apply/call 的 this"></a>bind/apply/call 的 this</h2><ul><li><p><strong>一般函式</strong>使用 bind/apply/call 時，<code>this</code> 就是所傳入的<font color="red">物件</font></p></li><li><p><strong>箭頭函式</strong>使用 bind/apply/call 時，<code>this</code> <font color="red">不會</font>有變化，規則一樣是 <font color="red">依據外層函式(function)裡的 this</font> 是什麼就跟著是什麼。</p></li></ul><p><span id="inline-purple">範例 1</span></p><figure class="highlight html"><figcaption><span>DOM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>一般函式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = add.bind(btn);</span><br><span class="line">b(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">add.apply(btn, [<span class="number">3</span>, <span class="number">5</span>]);</span><br><span class="line">add.call(btn, <span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 2</span></p><figure class="highlight html"><figcaption><span>DOM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>箭頭函式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = add.bind(btn);</span><br><span class="line">b(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">add.apply(btn, [<span class="number">3</span>, <span class="number">5</span>]);</span><br><span class="line">add.call(btn, <span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/26/JS-this/es6_js.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt; 一次搞懂 JavaScript 的 &lt;font color=&quot;red&quot;&gt;this&lt;/font&gt; &lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="ES6" scheme="hhttps://bryanhsiao.github.io/tags/ES6/"/>
    
    <category term="this" scheme="hhttps://bryanhsiao.github.io/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>JS-Events</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/25/JS-Events/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/25/JS-Events/</id>
    <published>2021-08-25T14:40:52.000Z</published>
    <updated>2021-08-25T14:41:53.826Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/25/JS-Events/js_01.png"></p><font style="font-size:20px;">那些你知道與不知道的事件們</font></blockquote><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 2018 iT 邦幫忙鐵人賽，看到 Kuro 大的重新認識 JavaScript 系列文，仔細的閱讀後，紀錄自己觀念不足的部份，也非常推薦給大家觀看此系列文。</p><div class="note info"><a href="https://ithelp.ithome.com.tw/users/20065504/ironman/1259?page=1" target="_blank" rel="noopener">Kuro-重新認識 JavaScript 系列</a></div><hr><h2 id="表單相關事件"><a href="#表單相關事件" class="headerlink" title="表單相關事件"></a>表單相關事件</h2><ul><li><p><font color="red">input</font> 事件： 當 input、 textarea 以及帶有 contenteditable 的元素內容被改變時，就會觸發 input 事件。</p></li><li><p>change 事件： 當 input、select、textarea、radio、checkbox 等表單元素被改變時觸發。 但與 input 事件不同的是，input 事件會在輸入框輸入內容的當下觸發，而 change 事件則是在目前焦點<font color="red">離開輸入框後</font>才觸發。</p></li><li><p>submit 事件：當表單被送出時觸發，通常表單驗證都會在這一步處理，若驗證未通過則 return false;。</p></li></ul><hr><h2 id="特殊事件"><a href="#特殊事件" class="headerlink" title="特殊事件"></a>特殊事件</h2><p>透過 Composition Events 我們可以觀察使用者在輸入框內開啟<font color="red">輸入法 (Input Method Editor, IME)</font> 時，組字或選字的狀態。</p><p>這個時候就需要透過 Composition Events 來為輸入框做增強。</p><ul><li>compositionstart: 輸入框內開啟輸入法，且正在拼字時觸發。</li><li>compositionupdate: 輸入框內開啟輸入法，且正在拼字或選字時更改了內容時觸發。</li><li>compositionend: 輸入框內開啟輸入法，拼字或選字完成，正要送出至輸入框時觸發。</li></ul><p>可以看到，如果要確認使用者輸入完成並送出文字時，就可以透過 compositionend 來做最後確認。</p><p>執行的時候像這樣：</p><img src="/2021/08/25/JS-Events/js_02.png"><div class="note primary">開啟console，在input輸入文字：<a href="https://codepen.io/Kanboo/pen/ZvRayJ?editors=1010" target="_blank" rel="noopener">event觸發時機</a></div><hr><h2 id="鍵盤相關事件"><a href="#鍵盤相關事件" class="headerlink" title="鍵盤相關事件"></a>鍵盤相關事件</h2><p>鍵盤相關事件有下列三種，在大多數情況下會將鍵盤事件註冊在 input 的輸入框上。</p><ul><li><p>keydown 事件: 「壓下」鍵盤按鍵時會觸發 keydown 事件。</p></li><li><p>keypress 事件: 除了 Shift, Fn, CapsLock 這三種按鍵外按住時會觸發，若按著不放則會連續觸發。</p></li><li><p>keyup 事件: 「放開」鍵盤按鍵時觸發。</p></li></ul><p>透過 <font color="red">e.keyCode</font> 就可以判斷使用者目前按下的是哪個按鈕</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">textBox.addEventListener(</span><br><span class="line">  <span class="string">"keydown"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// enter 的 keyCode 是 13</span></span><br><span class="line">    <span class="keyword">if</span> (e.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">      formSubmit();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>註： keyCode 的對應表可以到這裡查看：<a href="https://gist.github.com/tylerbuchea/8011573" target="_blank" rel="noopener">https://gist.github.com/tylerbuchea/8011573</a></p></blockquote><hr><h2 id="滑鼠相關事件"><a href="#滑鼠相關事件" class="headerlink" title="滑鼠相關事件"></a>滑鼠相關事件</h2><ul><li><p>mousedown / mouseup 事件: 這兩個事件分別會在滑鼠點擊了某元素「按下」(mousedown) 按鈕，以及「放開」(mouseup) 按鈕時觸發。</p></li><li><p>click 事件: 當滑鼠「點擊」了某元素時觸發。</p></li><li><p>dblclick 事件: 當滑鼠「連點兩次」了某元素時觸發。</p></li><li><p>mouseenter / mousemove / mouseleave 事件：</p></li><li><p>這三個事件要放在一起看</p><ul><li><p>當滑鼠游標移入了某元素時，會先觸發 mouseenter 事件。</p></li><li><p>滑鼠游標在這個元素內「移動」時，會連續觸發 mousemove 事件。</p></li><li><p>直到滑鼠游標離開了這個元素，才觸發 mouseleave 事件。</p></li></ul></li></ul><img src="/2021/08/25/JS-Events/js_03.gif"><p>這些滑鼠相關的事件，都可以透過 <font color="red">event.pageX</font> 與 <font color="red">event.pageY</font> 屬性去取得目前在網頁對應的座標。</p><hr><h2 id="介面相關事件"><a href="#介面相關事件" class="headerlink" title="介面相關事件"></a>介面相關事件</h2><ul><li><p>load 事件：<br>註冊在 window 物件上，指的是網頁資源 (包括 CSS、JS、圖片等) 全數載入完畢後觸發。<br>如果是 img 元素的 load 事件，則表示是此圖片載入完畢後觸發。</p></li><li><p>unload 、 beforeunload 事件：<br>與 load 事件相反，unload 與 beforeunload 事件分別會在離開頁面或重新整理時觸發，而 beforeunload 會跳出對話框詢問使用者是否要離開目前頁面。</p></li><li><p><font color="red">resize</font> 事件：當瀏覽器 (window) 或指定元素 (element) 的「尺寸變更」時觸發。</p></li><li><p><font color="red">scroll</font> 事件：當瀏覽器 (window) 或指定元素 (element) 的「捲軸被拉動」時觸發。</p></li><li><p><font color="red">DOMContentLoaded</font> 事件：<br>類似於 load 事件，但不同的是，load 事件是在網頁「所有」資源都已經載入完成後才會觸發，而 DOMContentLoaded 事件是在 DOM 結構被完整的讀取跟解析後就會被觸發，不須等待外部資源讀取完成。</p></li></ul><p>簡單來說， DOMContentLoaded 與 load 的時機可以用這張圖來解釋：</p><img src="/2021/08/25/JS-Events/js_04.png">]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/25/JS-Events/js_01.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;那些你知道與不知道的事件們&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    <category term="重新認識 JavaScript" scheme="hhttps://bryanhsiao.github.io/categories/JS/重新認識-JavaScript/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="重新認識 JavaScript" scheme="hhttps://bryanhsiao.github.io/tags/重新認識-JavaScript/"/>
    
    <category term="event" scheme="hhttps://bryanhsiao.github.io/tags/event/"/>
    
  </entry>
  
  <entry>
    <title>ES6-樣板字串 (Template String)</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/24/ES6-TemplateString/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/24/ES6-TemplateString/</id>
    <published>2021-08-24T15:36:28.000Z</published>
    <updated>2021-08-24T15:37:22.079Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/24/ES6-TemplateString/ES6.jpg"></p><font style="font-size:20px;">Template String 樣板字串</font></blockquote><a id="more"></a><hr><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight js"><figcaption><span>新舊寫法比較</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [<span class="string">"老大"</span>, <span class="string">"老二"</span>, <span class="string">"老么"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//======================過去寫法======================</span></span><br><span class="line"><span class="keyword">let</span> oldUl =</span><br><span class="line">  <span class="string">"&lt;ul&gt;"</span> +</span><br><span class="line">  <span class="string">"&lt;li&gt;我叫做 "</span> +</span><br><span class="line">  people[<span class="number">0</span>] +</span><br><span class="line">  <span class="string">"&lt;/li&gt;"</span> +</span><br><span class="line">  <span class="string">"&lt;li&gt;我叫做 "</span> +</span><br><span class="line">  people[<span class="number">1</span>] +</span><br><span class="line">  <span class="string">"&lt;/li&gt;"</span> +</span><br><span class="line">  <span class="string">"&lt;li&gt;我叫做 "</span> +</span><br><span class="line">  people[<span class="number">2</span>] +</span><br><span class="line">  <span class="string">"&lt;/li&gt;"</span> +</span><br><span class="line">  <span class="string">"&lt;/ul&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(oldUl);</span><br><span class="line"><span class="comment">//"&lt;ul&gt;&lt;li&gt;我叫做 老大&lt;/li&gt;&lt;li&gt;我叫做 老二&lt;/li&gt;&lt;li&gt;我叫做 老么&lt;/li&gt;&lt;/ul&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//======================新的寫法======================</span></span><br><span class="line"><span class="keyword">let</span> newUl = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;我叫做 <span class="subst">$&#123;people[<span class="number">0</span>]&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;我叫做 <span class="subst">$&#123;people[<span class="number">1</span>]&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;我叫做 <span class="subst">$&#123;people[<span class="number">2</span>]&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newUl);</span><br><span class="line"><span class="comment">//  &lt;ul&gt;</span></span><br><span class="line"><span class="comment">//    &lt;li&gt;我叫做 老大&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//    &lt;li&gt;我叫做 老二&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//    &lt;li&gt;我叫做 老么&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//  &lt;/ul&gt;</span></span><br></pre></td></tr></table></figure><p>甚至可以在 <font color="red">${}</font> 內使用<font color="red">函式</font> (${}裡再包\${})。</p><figure class="highlight js"><figcaption><span>使用.map組字串(結果與上例一樣)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newUl = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;people.map(person =&gt; <span class="string">`&lt;li&gt;我叫做 <span class="subst">$&#123;person&#125;</span>&lt;/li&gt;`</span>).join(<span class="string">""</span>)&#125;</span></span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>也可以在函式內增添<font color="red">更多的判斷式</font>。</p><figure class="highlight js"><figcaption><span>新增if判斷式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"老大"</span>,</span><br><span class="line">    friends: <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"老二"</span>,</span><br><span class="line">    friends: <span class="number">16</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"老么"</span>,</span><br><span class="line">    friends: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newUl = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;people</span></span></span><br><span class="line"><span class="string"><span class="subst">      .map(person =&gt; &#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">        <span class="keyword">if</span> (person.friends) &#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">          <span class="keyword">return</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;person.name&#125;</span> 有 <span class="subst">$&#123;person.friends&#125;</span> 朋友&lt;/li&gt;`</span>;</span></span></span><br><span class="line"><span class="string"><span class="subst">        &#125;</span> else &#123;</span></span><br><span class="line"><span class="string">          return `</span>&lt;li&gt;$&#123;person.name&#125; 沒朋友&lt;<span class="regexp">/li&gt;`;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      &#125;)</span></span><br><span class="line"><span class="regexp">      .join("")&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/u</span>l&gt;</span><br><span class="line"><span class="string">`;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">console.log(newUl);</span></span><br><span class="line"><span class="string">//  &lt;ul&gt;</span></span><br><span class="line"><span class="string">//    &lt;li&gt;老大 有 2 朋友&lt;/li&gt;&lt;li&gt;老二 有 999 朋友&lt;/li&gt;&lt;li&gt;老么 邊緣人&lt;/li&gt;</span></span><br><span class="line"><span class="string">//  &lt;/ul&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="巢狀-String-Template"><a href="#巢狀-String-Template" class="headerlink" title="巢狀 String Template"></a>巢狀 String Template</h2><p>如同上述的方法 <font color="red">${}</font> 內可以加入<font color="red">函式</font>及其更內層的 Template String，<br>所以也可以在 <font color="red">${}</font> 插入<font color="red">另一組的函式</font>的 Template String。</p><figure class="highlight js"><figcaption><span>在$&#123;&#125;裡呼叫function</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> travelers = &#123;</span><br><span class="line">  leader: <span class="string">"爸爸"</span>,</span><br><span class="line">  partner: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"老大"</span>,</span><br><span class="line">      friends: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"老二"</span>,</span><br><span class="line">      friends: <span class="number">16</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"老么"</span>,</span><br><span class="line">      friends: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderList</span>(<span class="params">people</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;上車名單&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;people.map(person =&gt; <span class="string">`&lt;li&gt;<span class="subst">$&#123;person.name&#125;</span>&lt;/li&gt;`</span>).join(<span class="string">""</span>)&#125;</span></span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div class="template"&gt;</span></span><br><span class="line"><span class="string">  &lt;h2&gt;開車：<span class="subst">$&#123;travelers.leader&#125;</span>&lt;/h2&gt;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;renderList(travelers.partner)&#125;</span></span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(template);</span><br><span class="line"><span class="comment">// &lt;div class=\"template\"&gt;</span></span><br><span class="line"><span class="comment">// &lt;h2&gt;開車：爸爸&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   &lt;div&gt;上車名單&lt;/div&gt;</span></span><br><span class="line"><span class="comment">//   &lt;ul&gt;</span></span><br><span class="line"><span class="comment">//     &lt;li&gt;老大&lt;/li&gt;&lt;li&gt;老二&lt;/li&gt;&lt;li&gt;老么&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//   &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// &lt;/div&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="跳脫字元"><a href="#跳脫字元" class="headerlink" title="跳脫字元"></a>跳脫字元</h2><p>如果有需要插入<font color="red">特殊字元</font>，一樣可以使用 <font color="red">\</font> 反斜線來插入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`\\`</span>); <span class="comment">// "\"</span></span><br></pre></td></tr></table></figure><p>如果要計算字元數，或是需要將字串做額外處理，<font color="red">跳脫字元是不佔字符數</font>的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`\\`</span>.length); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>要取得<font color="red">含</font>特殊字元的字串可用 String.raw()：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`\\`</span>.length); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><hr><h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><div class="note info"><a href="https://ithelp.ithome.com.tw/users/20083608/ironman/1354" target="_blank" rel="noopener">邁向 JavaScript 勇者之路</a></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/24/ES6-TemplateString/ES6.jpg&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;Template String 樣板字串&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    <category term="ES6" scheme="hhttps://bryanhsiao.github.io/categories/JS/ES6/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="ES6" scheme="hhttps://bryanhsiao.github.io/tags/ES6/"/>
    
    <category term="樣板字串" scheme="hhttps://bryanhsiao.github.io/tags/樣板字串/"/>
    
    <category term="Template String" scheme="hhttps://bryanhsiao.github.io/tags/Template-String/"/>
    
  </entry>
  
  <entry>
    <title>JS-陣列(Array)</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/22/JS-Array/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/22/JS-Array/</id>
    <published>2021-08-22T15:54:00.000Z</published>
    <updated>2021-08-22T16:02:58.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/22/JS-Array/js_01.png"></p><font style="font-size:20px;">Array 複習 與 ES6 新語法</font></blockquote><a id="more"></a><hr><h2 id="push、pop、shift、unshift-差異"><a href="#push、pop、shift、unshift-差異" class="headerlink" title="push、pop、shift、unshift 差異"></a>push、pop、shift、unshift 差異</h2><ul><li>push：加到陣列末端</li><li>pop：移除最末端</li><li>shift：移除最前端</li><li>unshift：加到陣列前端</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = [<span class="string">"爸爸"</span>, <span class="string">"媽媽"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// push：加到陣列末端</span></span><br><span class="line"><span class="keyword">var</span> newLength = home.push(<span class="string">"老大"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["爸爸", "媽媽", "老大"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pop：移除最末端</span></span><br><span class="line"><span class="keyword">var</span> last = home.pop();</span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["爸爸", "媽媽"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shift：移除最前端</span></span><br><span class="line"><span class="keyword">var</span> first = home.shift();</span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["媽媽"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unshift：加到陣列前端</span></span><br><span class="line"><span class="keyword">var</span> newLength = home.unshift(<span class="string">"小花"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["小花", "媽媽"]</span></span><br></pre></td></tr></table></figure><hr><h2 id="排序與反轉-sort-與-reverse"><a href="#排序與反轉-sort-與-reverse" class="headerlink" title="排序與反轉 sort 與 reverse"></a>排序與反轉 sort 與 reverse</h2><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><blockquote class="question">arr.sort([compareFunction])</blockquote><p>如果 <code>compareFunction</code> 沒有被應用, 元素將被轉換為字串並以<code>Unicode</code>碼位來比較並排序。<br>特別一提，在數值排序中，9 會在 80 前面，但因為<font color="red">數字被轉換成字串</font>，在<code>Unicode</code>順序中 “80” 會在 “9” 前面。</p><figure class="highlight js"><figcaption><span>字串比較</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大寫英文 Unicode 排在 小寫英文 前面</span></span><br><span class="line"><span class="keyword">var</span> stringArray = [<span class="string">"blue"</span>, <span class="string">"Humpback"</span>, <span class="string">"Beluga"</span>, <span class="string">"alice"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringArray.sort()); <span class="comment">//["Beluga", "Humpback", "alice", "blue"]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>數字比較</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 數字被轉換成字串</span></span><br><span class="line"><span class="keyword">var</span> numbers_01 = [<span class="number">1</span>, <span class="number">30</span>, <span class="number">4</span>, <span class="number">21</span>];</span><br><span class="line">numbers_01.sort();</span><br><span class="line"><span class="built_in">console</span>.log(numbers_01); <span class="comment">// [1, 21, 30, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 compareFunction比較，就不會被轉成「字串」</span></span><br><span class="line"><span class="keyword">var</span> numbers_02 = [<span class="number">1</span>, <span class="number">30</span>, <span class="number">4</span>, <span class="number">21</span>];</span><br><span class="line">numbers_02.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(numbers_02); <span class="comment">// [1, 4, 21, 30]</span></span><br></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p>將整個陣列中的成員<font color="red">順序反轉</font>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> home = [<span class="string">"0.爸爸"</span>, <span class="string">"1.媽媽"</span>, <span class="string">"2.老大"</span>, <span class="string">"3.老二"</span>, <span class="string">"4.老么"</span>];</span><br><span class="line">home.reverse();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["4.老么", "3.老二", "2.老大", "1.媽媽", "0.爸爸"]</span></span><br></pre></td></tr></table></figure><p>另一個情況是<font color="red">字串</font>中的字元，如果要進行反轉的話，並沒有字串中的 reverse 方法，要用這個陣列的 reverse 方法加上字串與陣列的互相轉換的<code>split</code>與<code>join</code>方法，可以使用以下的函式:</p><figure class="highlight js"><figcaption><span>字串反轉</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseString</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">    .split(<span class="string">""</span>)</span><br><span class="line">    .reverse()</span><br><span class="line">    .join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reverseString(<span class="string">"ABCDEFG"</span>)); <span class="comment">// "GFEDCBA"</span></span><br></pre></td></tr></table></figure><hr><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><blockquote class="question">arr.slice([begin[, end]])</blockquote><p>回傳一個<font color="red">新陣列</font>，為原陣列選擇之 <code>begin</code> 至 <code>end</code>（<font color="red">不含 end</font>）部分的<font color="red">淺拷貝</font>（shallow copy）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> home = [<span class="string">"0.爸爸"</span>, <span class="string">"1.媽媽"</span>, <span class="string">"2.老大"</span>, <span class="string">"3.老二"</span>, <span class="string">"4.老么"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// begin為空或0，就是全部複製</span></span><br><span class="line"><span class="built_in">console</span>.log(home.slice()); <span class="comment">//["0.爸爸", "1.媽媽", "2.老大", "3.老二", "4.老么"]</span></span><br><span class="line"><span class="built_in">console</span>.log(home.slice(<span class="number">0</span>)); <span class="comment">//["0.爸爸", "1.媽媽", "2.老大", "3.老二", "4.老么"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 僅 begin 參數</span></span><br><span class="line"><span class="built_in">console</span>.log(home.slice(<span class="number">2</span>)); <span class="comment">//["2.老大", "3.老二", "4.老么"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加 end 參數，擷取到 end 的 index「前」</span></span><br><span class="line"><span class="built_in">console</span>.log(home.slice(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">//["2.老大"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加 end 參數，end index值 超過原陣列個數，沒有關係</span></span><br><span class="line"><span class="built_in">console</span>.log(home.slice(<span class="number">2</span>, <span class="number">9999</span>)); <span class="comment">//["2.老大", "3.老二", "4.老么"]</span></span><br></pre></td></tr></table></figure><hr><h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><blockquote class="question">array.splice(start[, deleteCount[, item1[, item2[, …]]]])</blockquote><p>可刪除既有元素並／或加入新元素來改變一個陣列的內容(<font color="red">會改變原陣列值</font>)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> home = [<span class="string">"0.爸爸"</span>, <span class="string">"1.媽媽"</span>, <span class="string">"2.老大"</span>, <span class="string">"3.老二"</span>, <span class="string">"4.老么"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 會改變原陣例值</span></span><br><span class="line">home.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">"小花"</span>); <span class="comment">//在索引 2 開始，插入新增字串 '小花'</span></span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["0.爸爸", "1.媽媽", "小花", "2.老大", "3.老二", "4.老么"]</span></span><br><span class="line"></span><br><span class="line">home.splice(<span class="number">2</span>, <span class="number">1</span>); <span class="comment">//在索引 2 開始，刪除 1個 元素</span></span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["0.爸爸", "1.媽媽", "2.老大", "3.老二", "4.老么"]</span></span><br><span class="line"></span><br><span class="line">home.splice(<span class="number">2</span>, <span class="number">3</span>, <span class="string">"巧虎"</span>, <span class="string">"琪琪"</span>, <span class="string">"桃樂比"</span>); <span class="comment">//在索引 2 開始，刪除 3個 元素後，再新增 3個 新元素</span></span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["0.爸爸", "1.媽媽", "巧虎", "琪琪", "桃樂比"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 展開運算子( Spread Operator )</span></span><br><span class="line"><span class="keyword">const</span> addArr = [<span class="string">"巧虎"</span>, <span class="string">"琪琪"</span>, <span class="string">"桃樂比"</span>];</span><br><span class="line">home.splice(<span class="number">2</span>, <span class="number">3</span>, ...addArr); <span class="comment">//在索引 2 開始，刪除 3個 元素後，再新增 3個 新元素</span></span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["0.爸爸", "1.媽媽", "巧虎", "琪琪", "桃樂比"]</span></span><br></pre></td></tr></table></figure><hr><h2 id="淺拷貝作法"><a href="#淺拷貝作法" class="headerlink" title="淺拷貝作法"></a>淺拷貝作法</h2><p><span id="inline-toc">1.</span> ES6 展開運算子( Spread Operator )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> copyArray = [...aArray];</span><br></pre></td></tr></table></figure><p>它也可以用來組合陣列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> bArray = [<span class="number">5</span>, <span class="number">6</span>, ...aArray, <span class="number">8</span>, <span class="number">9</span>]; <span class="comment">// [5, 6, 1, 2, 3, 8, 9]</span></span><br></pre></td></tr></table></figure><p><span id="inline-toc">2.</span> slice</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const oldArray = [1, 2, 3];</span><br><span class="line"></span><br><span class="line">const newArray = oldArray.slice(0); // [1, 2, 3]</span><br><span class="line">const newArray = oldArray.slice();  // [1, 2, 3]</span><br></pre></td></tr></table></figure><p><span id="inline-toc">3.</span> concat</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oldArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> newArray = [].concat(oldArray); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><hr><h2 id="ES6-find-與-findIndex"><a href="#ES6-find-與-findIndex" class="headerlink" title="ES6- find 與 findIndex"></a>ES6- find 與 findIndex</h2><ul><li>find =&gt; 回傳 value</li><li>findIndex =&gt; 回傳 index</li></ul><h3 id="基本寫法"><a href="#基本寫法" class="headerlink" title="基本寫法"></a>基本寫法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aArray = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">22</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// find</span></span><br><span class="line"><span class="keyword">const</span> bValue = aArray.find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">6</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bValue); <span class="comment">//回傳第一個滿足條件的「value」：7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// findIndex</span></span><br><span class="line"><span class="keyword">const</span> cIndex = aArray.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">6</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cIndex); <span class="comment">//回傳第一個滿足條件的「index」：3</span></span><br></pre></td></tr></table></figure><h3 id="進階應用"><a href="#進階應用" class="headerlink" title="進階應用"></a>進階應用</h3><p>不過當會用到 <code>find</code> 或 <code>findIndex</code> 時，表示要尋找的條件通常比較複雜一點，才能顯現他們比 <code>indexOf</code> 強大之處。</p><p><span id="inline-purple">範例 1</span></p><p>從陣列中找出符合條件的 物件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inventory = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"apples"</span>, <span class="attr">quantity</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"bananas"</span>, <span class="attr">quantity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"cherries"</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isCherries</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruit.name === <span class="string">"cherries"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// find 回傳第一個滿足條件的「value」</span></span><br><span class="line"><span class="built_in">console</span>.log(inventory.find(isCherries)); <span class="comment">// &#123; name: 'cherries', quantity: 5 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// findIndex 回傳第一個滿足條件的「index」</span></span><br><span class="line"><span class="built_in">console</span>.log(inventory.findIndex(isCherries)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 2</span></p><p>找出質數</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">while</span> (start &lt;= <span class="built_in">Math</span>.sqrt(element)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (element % start++ <span class="xml"><span class="tag">&lt; <span class="attr">1</span>) &#123;</span></span></span><br><span class="line"><span class="xml">      return false;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  return element &gt; 1;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// find 回傳第一個滿足條件的「value」</span></span><br><span class="line"><span class="xml">console.log([4, 6, 8, 12].find(isPrime)); // undefined, not found</span></span><br><span class="line"><span class="xml">console.log([4, 5, 8, 12].find(isPrime)); // 5</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// findIndex 回傳第一個滿足條件的「index」</span></span><br><span class="line"><span class="xml">console.log([4, 6, 8, 12].findIndex(isPrime)); // -1, not found</span></span><br><span class="line"><span class="xml">console.log([4, 6, 7, 12].findIndex(isPrime)); // 2</span></span><br></pre></td></tr></table></figure><hr><h2 id="ES6-includes"><a href="#ES6-includes" class="headerlink" title="ES6-includes"></a>ES6-includes</h2><p>在陣列中尋找是否<font color="red">包含</font>這個值，如果有就會回傳 true，沒有則會回傳 false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 數字</span></span><br><span class="line"><span class="keyword">const</span> numArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(numArr.includes(<span class="number">2</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字串</span></span><br><span class="line"><span class="keyword">const</span> strArr = [<span class="string">"老大"</span>, <span class="string">"老二"</span>, <span class="string">"老么"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(strArr.includes(<span class="string">"老二"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(strArr.includes(<span class="string">"小花"</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><div class="note info"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">MDN-Array</a><br><a href="https://ithelp.ithome.com.tw/articles/10193776" target="_blank" rel="noopener">ES6 陣列語法糖</a><br><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part3/array.html" target="_blank" rel="noopener">ES6學習-陣列</a><br><a href="http://es6.ruanyifeng.com/#docs/array" target="_blank" rel="noopener">数组的扩展</a><br></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/22/JS-Array/js_01.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;Array 複習 與 ES6 新語法&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="ES6" scheme="hhttps://bryanhsiao.github.io/tags/ES6/"/>
    
    <category term="Array" scheme="hhttps://bryanhsiao.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>JS-立即被呼叫的函式 (IIFE)</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/22/JS-IIFE/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/22/JS-IIFE/</id>
    <published>2021-08-22T15:39:20.000Z</published>
    <updated>2021-08-22T16:27:59.752Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/22/JS-IIFE/js_01.png"></p><font style="font-size:20px;">立即被呼叫的函式 (Immediately Invoked Function Expression, IIFE)</font></blockquote><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 2018 iT 邦幫忙鐵人賽，看到 Kuro 大的重新認識 JavaScript 系列文，仔細的閱讀後，紀錄自己觀念不足的部份，也非常推薦給大家觀看此系列文。</p><div class="note info"><a href="https://ithelp.ithome.com.tw/users/20065504/ironman/1259?page=1" target="_blank" rel="noopener">Kuro-重新認識 JavaScript 系列</a></div><hr><h2 id="立即被呼叫的函式-IIFE"><a href="#立即被呼叫的函式-IIFE" class="headerlink" title="立即被呼叫的函式 (IIFE)"></a>立即被呼叫的函式 (IIFE)</h2><p>IIFE 的好處，就是可以<strong>減少「全域變數」的產生，同時也避免了變數名稱衝突的機會</strong>。</p><p>如果你有去看過 jQuery 的原始碼，就會發現 jQuery 也用了相同的手法將 window 與 undefined 保留起來：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 略...</span></span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="當迴圈遇到-function"><a href="#當迴圈遇到-function" class="headerlink" title="當迴圈遇到 function"></a>當迴圈遇到 function</h2><p>題目：<br>假設想透過迴圈 + setTimeout 來做到，在五秒之內，每秒鐘依序透過<font color="red">console.log</font>印出：<font color="red">0 1 2 3 4</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假設想透過迴圈 + setTimeout 來做到</span></span><br><span class="line"><span class="comment">// 每秒鐘將 i 的值 console 出來</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真的是這樣嗎？ 我們來看看執行的結果。</p><p>執行的結果是， <font color="red">console.log()</font> 會在「一秒鐘之後」同時印出「五次 <font color="red">5</font>」。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>;</span><br><span class="line"><span class="number">5</span>;</span><br><span class="line"><span class="number">5</span>;</span><br><span class="line"><span class="number">5</span>;</span><br><span class="line"><span class="number">5</span>;</span><br></pre></td></tr></table></figure><font color="red">「切分變數有效範圍的最小單位是 “function” 」</font><br><font color="red">「切分變數有效範圍的最小單位是 “function” 」</font><br><font color="red">「切分變數有效範圍的最小單位是 “function” 」</font><p>很重要，所以要再講三次。</p><p>所以我們利用 <font color="red">IIFE</font> 稍微修改一下：</p><figure class="highlight js"><figcaption><span>IIFE</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 將原本的 1000 改成 1000 * x</span></span><br><span class="line">    <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x);</span><br><span class="line">    &#125;, <span class="number">1000</span> * x);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像這樣，就可以依序印出我們要的結果囉！</p><hr><h2 id="ES6-let、const"><a href="#ES6-let、const" class="headerlink" title="ES6-let、const"></a>ES6-let、const</h2><p><font color="red">ES6</font> 以後新增了 <font color="red">let</font> 與 <font color="red">const</font>，且改以 <font color="red">{ }</font> 作為它的 Scope。</p><p>換句話說，將範例中的 for 改為 let 就可以做到保留 i 在執行迴圈當下的「值」的效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/22/JS-IIFE/js_01.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;立即被呼叫的函式 (Immediately Invoked Function Expression, IIFE)&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 - 語義元素</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/22/HTML5-Semantics/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/22/HTML5-Semantics/</id>
    <published>2021-08-22T15:19:37.000Z</published>
    <updated>2021-08-22T15:21:43.924Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/22/HTML5-Semantics/HTML5_01.jpg"><br>重新認識 HTML5 的語義元素</p></blockquote><a id="more"></a><hr><h2 id="常用元素"><a href="#常用元素" class="headerlink" title="常用元素"></a>常用元素</h2><h3 id="lt-header-gt"><a href="#lt-header-gt" class="headerlink" title="&lt;header&gt;"></a><code>&lt;header&gt;</code></h3><p>區塊標題，不要把它只用來取代 <code>&lt;div class=”header”&gt;</code><br>它也可以是文章的標題，一頁可以有好多個 <code>&lt;header&gt;</code>，<code>&lt;header&gt;</code> 裡面至少要有一個 h1~h6。</p><h3 id="lt-nav-gt"><a href="#lt-nav-gt" class="headerlink" title="&lt;nav&gt;"></a><code>&lt;nav&gt;</code></h3><p>導覽列。裡面裝的東西應該只有 <strong>_主要_</strong> 的 navigation links，不要把各種 link 都丟到<code>&lt;nav&gt;</code>裡面。<br>舉例來說，footer 裡面常常會有一排 link，那個就不需要包進<code>&lt;nav&gt;</code>。</p><h3 id="lt-main-gt"><a href="#lt-main-gt" class="headerlink" title="&lt;main&gt;"></a><code>&lt;main&gt;</code></h3><p>一個頁面只有一個! 任何 global 都不能放在 main 裡面( e.g. <code>&lt;header&gt;</code> <code>&lt;footer&gt;</code> logo)</p><h3 id="lt-section-gt"><a href="#lt-section-gt" class="headerlink" title="&lt;section&gt;"></a><code>&lt;section&gt;</code></h3><p>通常用來把一些<strong><em>相關的元素組合在一起</em></strong>，一般來說，裡面都會包含 heading。<br>如果這個區塊的內容可以分成幾個部分的話，那應該使用 article。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Section title<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec viverra nec</span><br><span class="line">    nulla vitae mollis.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-article-gt"><a href="#lt-article-gt" class="headerlink" title="&lt;article&gt;"></a><code>&lt;article&gt;</code></h3><p>文章中可以脫離其他部分，獨立出來而又完整，甚至可以復用的一部分，通常有自己的標題，當 article 內嵌 article 時，裡外層的內容應該是相關的，比如一篇文章和它的留言，<br>而 section 雖然也具有獨立表達內容的能力，但是對外層有一定的相依性，例如這篇文章中的一個章節。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/my-blog-post"</span>&gt;</span>My blog post<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec viverra nec</span><br><span class="line">      nulla vitae mollis.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span></span><br><span class="line">      Posted on <span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"2017-04-29T19:00"</span>&gt;</span>Apr 29<span class="tag">&lt;/<span class="name">time</span>&gt;</span> in</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/category/code"</span>&gt;</span>Code<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-aside-gt"><a href="#lt-aside-gt" class="headerlink" title="&lt;aside&gt;"></a><code>&lt;aside&gt;</code></h3><p>通常用來包含一些和當前頁面內容有關的額外信息，比如廣告、個人資料信息或相關連結。</p><h3 id="lt-footer-gt"><a href="#lt-footer-gt" class="headerlink" title="&lt;footer&gt;"></a><code>&lt;footer&gt;</code></h3><p>通常包含作者、版權信息或者相關鏈接等。</p><h2 id="簡易分辦-lt-section-gt-lt-article-gt"><a href="#簡易分辦-lt-section-gt-lt-article-gt" class="headerlink" title="簡易分辦 &lt;section&gt;&lt;article&gt;"></a>簡易分辦 <code>&lt;section&gt;&lt;article&gt;</code></h2><p><code>&lt;article&gt;</code>: 就算脫離了整體也是一個可以獨立存在、具有完整內容的區塊，例如這篇文章。<br><code>&lt;section&gt;</code>: 具有獨立表達內容的能力，但是對外層有一定的相依性，例如這篇文章中的一個章節。</p><p>下面是簡單的問題，讓我們決定要用 <code>&lt;section&gt; / &lt;article&gt; / &lt;div&gt;</code></p><ul><li>具有完整內容的區塊，而且可以出現在你的<strong>閱讀器</strong>內嗎? 是的話就是 <code>&lt;article&gt;</code></li><li>跟主要內容是有相關並且列入 outline 裡不會奇怪的? 是的話就是 <code>&lt;section&gt;</code></li><li>跟內容無關或只用來 styling 的? 是的話就是 <code>&lt;div&gt;</code></li></ul><h2 id="建議的架構範例"><a href="#建議的架構範例" class="headerlink" title="建議的架構範例"></a>建議的架構範例</h2><img src="/2021/08/22/HTML5-Semantics/HTML5_02.jpg"><img src="/2021/08/22/HTML5-Semantics/HTML5_03.png"><hr><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><div class="note info"><a href="http://techbrood.com/h5b2a?p=html-structure" target="_blank" rel="noopener">结构性元素</a><br><a href="http://apolkingg8.logdown.com/posts/2014/02/04/note-of-semantic-html" target="_blank" rel="noopener">HTML5 Semantic Elements</a><br><a href="http://www.hannahpun.me/performance-optimize2/" target="_blank" rel="noopener">HTML5 Semantics</a><br><a href="http://htmlreference.io/semantic/" target="_blank" rel="noopener">Semantic in HTML5</a><br></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/22/HTML5-Semantics/HTML5_01.jpg&quot;&gt;&lt;br&gt;重新認識 HTML5 的語義元素&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="HTML5" scheme="hhttps://bryanhsiao.github.io/categories/HTML5/"/>
    
    
    <category term="HTML5" scheme="hhttps://bryanhsiao.github.io/tags/HTML5/"/>
    
    <category term="語義架構" scheme="hhttps://bryanhsiao.github.io/tags/語義架構/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 常用筆記</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/21/CSS-ForgetfulNotes/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/21/CSS-ForgetfulNotes/</id>
    <published>2021-08-21T14:57:52.000Z</published>
    <updated>2021-08-22T16:30:35.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景圖"><a href="#背景圖" class="headerlink" title="背景圖"></a>背景圖</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 圖片滿版 */</span></span><br><span class="line"><span class="selector-class">.img-cover</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(./bg.png);</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 圖片居中 */</span></span><br><span class="line"><span class="selector-class">.img-contain</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(./bg.png);</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">  <span class="attribute">background-size</span>: contain;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其他背景圖範例：<a href="https://codepen.io/Kanboo/pen/boKpwG" target="_blank" rel="noopener">固定、滿版、置中</a><br>background-attachment 是背景固定模式的屬性<br>註：作為背景的圖片是撑不起元素的，需要額外給 div 新增「寬、高」</p></blockquote><a id="more"></a><h2 id="圓角"><a href="#圓角" class="headerlink" title="圓角"></a>圓角</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.circle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2 個重點：</li></ul><ul><li>圓的直徑，長寬 一定要等長</li><li>border-radius:50%</li></ul><blockquote><p>參考網址： <a href="http://www.jianshu.com/p/7f46b8e29b1b" target="_blank" rel="noopener">圓角詳解</a>、<a href="https://kknews.cc/zh-tw/news/aezgo8v.html" target="_blank" rel="noopener">CSS3 技巧之形狀</a></p></blockquote><h2 id="區塊陰影、文字立體感"><a href="#區塊陰影、文字立體感" class="headerlink" title="區塊陰影、文字立體感"></a>區塊陰影、文字立體感</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 外層的陰影 */</span></span><br><span class="line"><span class="selector-tag">box-shadow</span>: 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 內層的陰影(多加 inset) */</span></span><br><span class="line"><span class="selector-tag">box-shadow</span>: <span class="selector-tag">inset</span> 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文字的陰影 */</span></span><br><span class="line"><span class="selector-tag">text-shadow</span>: 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.5</span>);</span><br></pre></td></tr></table></figure><blockquote><p>參考網址： <a href="http://www.jianshu.com/p/18bdcd17b4f2" target="_blank" rel="noopener">玩转 box-shadow</a>、<a href="http://www.jianshu.com/p/34d8dcb75dd8" target="_blank" rel="noopener">文字立體感</a></p></blockquote><h2 id="a-連結"><a href="#a-連結" class="headerlink" title="a 連結"></a>a 連結</h2><h3 id="取消-a-連結下底線"><a href="#取消-a-連結下底線" class="headerlink" title="取消 a 連結下底線"></a>取消 a 連結下底線</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line"> <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hover-移至-a-連結的效果"><a href="#hover-移至-a-連結的效果" class="headerlink" title=":hover 移至 a 連結的效果"></a>:hover 移至 a 連結的效果</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"> <span class="attribute">border-bottom</span>: <span class="number">3px</span> solid <span class="number">#00cc99</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>註：a 連結 預設 display 為 inline，但為了讓 User 有更好的操作體驗，<br>會變更成 block，增加「寬、高」範圍，讓 User 較易點擊到目標連結。</p></blockquote><h2 id="斷點"><a href="#斷點" class="headerlink" title="斷點"></a>斷點</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> (max-width: <span class="number">768px</span>) &#123;</span><br><span class="line"> //iPad</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> (max-width: <span class="number">767px</span>) &#123;</span><br><span class="line"> //iPhone</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新單位：高度-vh、寬度-vw"><a href="#新單位：高度-vh、寬度-vw" class="headerlink" title="新單位：高度 vh、寬度 vw"></a>新單位：高度 vh、寬度 vw</h2><p><strong>vh</strong> 代表的是 view height，也就是螢幕可視範圍高度的百分比；<br><strong>vw</strong> 表示的是 view width，也就是螢幕可是範圍寬度的百分比。</p><h2 id="ul-ol-list-style"><a href="#ul-ol-list-style" class="headerlink" title="ul ol list-style"></a>ul ol list-style</h2><h3 id="取消樣式"><a href="#取消樣式" class="headerlink" title="取消樣式"></a>取消樣式</h3><p><code>ol,ul {list-style: none;}</code></p><h3 id="設定樣式"><a href="#設定樣式" class="headerlink" title="設定樣式"></a>設定樣式</h3><p><code>list-style: circle;</code></p><blockquote><p>其他樣式參考：<a href="http://www.w3school.com.cn/cssref/pr_list-style-type.asp" target="_blank" rel="noopener">CSS list-style</a></p></blockquote><h2 id="指定滑鼠游標的型態"><a href="#指定滑鼠游標的型態" class="headerlink" title="指定滑鼠游標的型態"></a>指定滑鼠游標的型態</h2><p><code>cursor: pointer; /*手指圖示，表示超連結*/</code></p><img src="/2021/08/21/CSS-ForgetfulNotes/cursor.png"><blockquote><p>參考網址： <a href="http://www.eion.com.tw/Blogger/?Pid=1117" target="_blank" rel="noopener">游標的型態</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景圖&quot;&gt;&lt;a href=&quot;#背景圖&quot; class=&quot;headerlink&quot; title=&quot;背景圖&quot;&gt;&lt;/a&gt;背景圖&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 圖片滿版 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.img-cover&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(./bg.png);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-position&lt;/span&gt;: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-size&lt;/span&gt;: cover;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-repeat&lt;/span&gt;: no-repeat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 圖片居中 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.img-contain&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;(./bg.png);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-position&lt;/span&gt;: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-size&lt;/span&gt;: contain;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-repeat&lt;/span&gt;: no-repeat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;其他背景圖範例：&lt;a href=&quot;https://codepen.io/Kanboo/pen/boKpwG&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;固定、滿版、置中&lt;/a&gt;&lt;br&gt;background-attachment 是背景固定模式的屬性&lt;br&gt;註：作為背景的圖片是撑不起元素的，需要額外給 div 新增「寬、高」&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS - Flex</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/20/CSS-Flex/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/20/CSS-Flex/</id>
    <published>2021-08-20T14:57:39.000Z</published>
    <updated>2021-08-20T15:05:45.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用屬性"><a href="#常用屬性" class="headerlink" title="常用屬性"></a>常用屬性</h2><img src="/2021/08/20/CSS-Flex/flex-property.png"><a id="more"></a><h2 id="概念圖"><a href="#概念圖" class="headerlink" title="概念圖"></a>概念圖</h2><img src="/2021/08/20/CSS-Flex/flex-direction.png"><img src="/2021/08/20/CSS-Flex/flex-direction2.png"><h2 id="Flex-外容器屬性："><a href="#Flex-外容器屬性：" class="headerlink" title="Flex 外容器屬性："></a>Flex 外容器屬性：</h2><h3 id="flex-direction：決定-flex-主軸線-方向"><a href="#flex-direction：決定-flex-主軸線-方向" class="headerlink" title="flex-direction：決定 flex 主軸線 方向"></a>flex-direction：決定 flex 主軸線 方向</h3><p>[ row | row-reverse | column | column-reverse ]</p><h3 id="justify-content：主要軸線-左右-的對齊"><a href="#justify-content：主要軸線-左右-的對齊" class="headerlink" title="justify-content：主要軸線(左右)的對齊"></a>justify-content：主要軸線(左右)的對齊</h3><p>[ flex-start | flex-end | center | space-between | space-around ]</p><img src="/2021/08/20/CSS-Flex/justify-content.png"><h3 id="align-items：交錯軸線-上下-的對齊"><a href="#align-items：交錯軸線-上下-的對齊" class="headerlink" title="align-items：交錯軸線(上下)的對齊"></a>align-items：交錯軸線(上下)的對齊</h3><p>[ flex-start | flex-end | center | baseline | stretch ]</p><img src="/2021/08/20/CSS-Flex/align-items.png"><h2 id="Flex-內元件屬性："><a href="#Flex-內元件屬性：" class="headerlink" title="Flex 內元件屬性："></a>Flex 內元件屬性：</h2><h3 id="align-self：單一個物件的交錯軸對齊"><a href="#align-self：單一個物件的交錯軸對齊" class="headerlink" title="align-self：單一個物件的交錯軸對齊"></a>align-self：單一個物件的交錯軸對齊</h3><p>[ auto | flex-start | flex-end | center | baseline | stretch ]</p><img src="/2021/08/20/CSS-Flex/align-self.png"><hr><h2 id="參考網站"><a href="#參考網站" class="headerlink" title="參考網站"></a>參考網站</h2><p><a href="https://wcc723.github.io/css/2017/07/21/css-flex/" target="_blank" rel="noopener">圖解：CSS Flex 屬性一點也不難</a></p><p><a href="http://sweeteason.pixnet.net/blog/post/42781628-css-flexbox-layout-%E5%AD%B8%E7%BF%92%E5%BF%83%E5%BE%97" target="_blank" rel="noopener">CSS Flexbox Layout 學習心得筆記</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;常用屬性&quot;&gt;&lt;a href=&quot;#常用屬性&quot; class=&quot;headerlink&quot; title=&quot;常用屬性&quot;&gt;&lt;/a&gt;常用屬性&lt;/h2&gt;&lt;img src=&quot;/2021/08/20/CSS-Flex/flex-property.png&quot;&gt;</summary>
    
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/tags/CSS/"/>
    
    <category term="Flex" scheme="hhttps://bryanhsiao.github.io/tags/Flex/"/>
    
    <category term="排版" scheme="hhttps://bryanhsiao.github.io/tags/排版/"/>
    
  </entry>
  
  <entry>
    <title>CSS - Float排版問題</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/20/CSS-float/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/20/CSS-float/</id>
    <published>2021-08-20T14:25:08.000Z</published>
    <updated>2021-08-20T15:37:11.782Z</updated>
    
    <content type="html"><![CDATA[<p>紀錄一下 Float 排版問題</p><a id="more"></a><h2 id="問題："><a href="#問題：" class="headerlink" title="問題："></a>問題：</h2><p>在練習 Bootstrap3 將表單驗證功能加進去，卻遇到畫面「跑版」的問題，<br>目前是查到 「名稱」底下的<br><code>&lt;div class=&quot;help-block with-errors&quot;&gt;&lt;/div&gt;</code><br>所導致。</p><p>可能原因為 float？ margin？</p><p>問題點： 1.單點 「名稱」欄位，就會造成下方欄位跑版。<br><img src="/2021/08/20/CSS-float/Q1.jpg"> 2.若同時有驗證 左右二邊，欄位又有對齊了。<br><img src="/2021/08/20/CSS-float/Q2.jpg"></p><h3 id="codepen：排版偏移程式碼"><a href="#codepen：排版偏移程式碼" class="headerlink" title="codepen：排版偏移程式碼"></a>codepen：<a href="https://codepen.io/bryan-hsaio/pen/NWjQeNy?editors=1000" target="_blank" rel="noopener">排版偏移程式碼</a></h3><h2 id="解決："><a href="#解決：" class="headerlink" title="解決："></a>解決：</h2><img src="/2021/08/20/CSS-float/A1.jpg"><p><br><br>如上圖所述，第一個「名稱」腳變長，造成第三個「Email」排不進去被往後推，<br>導致第四個「聯絡電話」也被往後推擠，造成排版歪掉。</p><img src="/2021/08/20/CSS-float/A2.jpg"><p><br><br>解法為 外層用 row 包起來，<strong>清除 float 的浮動(clearfix)</strong>。</p><h3 id="codepen：修正後程式碼"><a href="#codepen：修正後程式碼" class="headerlink" title="codepen：修正後程式碼"></a>codepen：<a href="https://codepen.io/bryan-hsaio/pen/Vwboqja" target="_blank" rel="noopener">修正後程式碼</a></h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;紀錄一下 Float 排版問題&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/tags/CSS/"/>
    
    <category term="排版" scheme="hhttps://bryanhsiao.github.io/tags/排版/"/>
    
    <category term="float" scheme="hhttps://bryanhsiao.github.io/tags/float/"/>
    
  </entry>
  
  <entry>
    <title>ES6-箭頭函式 (Arrow functions)</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/18/ES6-Arrowfunctions/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/18/ES6-Arrowfunctions/</id>
    <published>2021-08-18T15:58:45.000Z</published>
    <updated>2021-08-18T16:04:22.845Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/18/ES6-Arrowfunctions/ES6.jpg"></p><font style="font-size:20px;">箭頭函式 () =&gt; {} </font></blockquote><a id="more"></a><hr><h2 id="簡短的語法"><a href="#簡短的語法" class="headerlink" title="簡短的語法"></a>簡短的語法</h2><p>一般使用箭頭函式與 function 的用法大致一致，可以傳入參數、也有大括號包起來，<br>除此之外箭頭函式也有更簡短的寫法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常寫法</span></span><br><span class="line"><span class="keyword">var</span> callSomeone = <span class="function"><span class="params">someone</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> someone + <span class="string">"上工了"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(callSomeone(<span class="string">"伙計"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 縮寫，單一行陳述不需要 &#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> callSomeone = <span class="function"><span class="params">someone</span> =&gt;</span> someone + <span class="string">"上工了"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(callSomeone(<span class="string">"伙計"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有一個參數可以不加括號</span></span><br><span class="line"><span class="keyword">var</span> callSomeone = <span class="function"><span class="params">someone</span> =&gt;</span> someone + <span class="string">"上工了"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(callSomeone(<span class="string">"伙計"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 沒有參數時，一定要有括號</span></span><br><span class="line"><span class="keyword">var</span> callSomeone = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">"伙計"</span> + <span class="string">"上工了"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(callSomeone(<span class="string">"伙計"</span>));</span><br></pre></td></tr></table></figure><p><span id="inline-toc">注意</span><br>不過這個上述有個小地方也要注意一下，在大括號內的 <font color="red">{}</font> 是需要自行加入 <font color="red">return</font>，<br>如果沒有傳入值則會出現 <font color="red">undefined</font>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> callSomeone = <span class="function"><span class="params">someone</span> =&gt;</span> &#123;</span><br><span class="line">  someone + <span class="string">"上工了"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(callSomeone(<span class="string">"伙計"</span>)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><hr><h2 id="綁定的-this-不同"><a href="#綁定的-this-不同" class="headerlink" title="綁定的 this 不同"></a>綁定的 this 不同</h2><span class="label info">口訣：</span><p>箭頭函式裡面的 this 等於 外面的 this</p><span class="label info">白話文：</span><p>箭頭函式裡的 this 主要是依據 <font color="red">外層函式(function)裡的 this</font> 是什麼就跟著是什麼。</p><p><span id="inline-yellow">規則</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span> &lt;= 外層函式的<span class="keyword">this</span>，規則參考「一般函式的<span class="keyword">this</span>」</span><br><span class="line">  <span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span> &lt;= 依據外層函式的<span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例</span></p><p>callName 是使用 一般函式<br>callName2 是使用 箭頭函式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"全域阿婆"</span>;</span><br><span class="line"><span class="keyword">var</span> auntie = &#123;</span><br><span class="line">  name: <span class="string">"漂亮阿姨"</span>,</span><br><span class="line">  callName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 注意，這裡是 function，以此為基準產生一個作用域</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"1"</span>, <span class="keyword">this</span>.name); <span class="comment">// 1 漂亮阿姨(外層函式)</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"2"</span>, <span class="keyword">this</span>.name); <span class="comment">// 2 漂亮阿姨(依據外層函式的this)</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"3"</span>, <span class="keyword">this</span>); <span class="comment">// 3 auntie 這個物件(依據外層函式的this)</span></span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  callName2: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 注意，如果使用箭頭函式，this 依然指向 window</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"4"</span>, <span class="keyword">this</span>.name); <span class="comment">// 4 全域阿婆(依據外層函式的this)</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"5"</span>, <span class="keyword">this</span>.name); <span class="comment">// 5 全域阿婆(依據外層函式的this)</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"6"</span>, <span class="keyword">this</span>); <span class="comment">// 6 window 物件(依據外層函式的this)</span></span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">auntie.callName();</span><br><span class="line">auntie.callName2();</span><br></pre></td></tr></table></figure><div class="note primary">補充：<br>因為 <font color="red">callName2</font> 的 <font color="red">4</font> 使用箭頭函式，所以 <font color="red">依據外層函式的this</font> 的規則，就指向最外層window。</div><hr><h2 id="沒有-arguments-參數"><a href="#沒有-arguments-參數" class="headerlink" title="沒有 arguments 參數"></a>沒有 arguments 參數</h2><p>注意:箭頭函數裡沒有 argument 物件，可使用 <font color="red">其餘參數(Rest Operator)</font> 替代</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> other = <span class="function">(<span class="params">...others</span>) =&gt;</span> others;</span><br><span class="line"><span class="built_in">console</span>.log(other(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>)); <span class="comment">// [10, 20, 30, 40, 50]</span></span><br></pre></td></tr></table></figure><hr><h2 id="apply-call-bind-無效"><a href="#apply-call-bind-無效" class="headerlink" title="apply, call, bind 無效"></a>apply, call, bind 無效</h2><p><font color="red">this</font> 在 Arrow function 中是被綁定的，所以套用 <font color="red">apply, call, bind</font> 的方法時是無法修改 <font color="red">this</font>。</p><hr><h2 id="不能用在建構式"><a href="#不能用在建構式" class="headerlink" title="不能用在建構式"></a>不能用在建構式</h2><p>由於 this 的是在物件下建立，所以箭頭函式不能像 function 一樣作為建構式的函式，<br>如果嘗試使用此方法則會出現錯誤 (<font color="red">… is not a constructor</font>)。</p><hr><h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><div class="note info"><a href="https://ithelp.ithome.com.tw/users/20083608/ironman/1354" target="_blank" rel="noopener">邁向 JavaScript 勇者之路</a></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/18/ES6-Arrowfunctions/ES6.jpg&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;箭頭函式 () =&amp;gt; {} &lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    <category term="ES6" scheme="hhttps://bryanhsiao.github.io/categories/JS/ES6/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="ES6" scheme="hhttps://bryanhsiao.github.io/tags/ES6/"/>
    
    <category term="箭頭函式" scheme="hhttps://bryanhsiao.github.io/tags/箭頭函式/"/>
    
    <category term="Arrow functions" scheme="hhttps://bryanhsiao.github.io/tags/Arrow-functions/"/>
    
  </entry>
  
  <entry>
    <title>ES6-Promise-asnyc-await</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/17/ES6-Promise-asnyc-await/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/17/ES6-Promise-asnyc-await/</id>
    <published>2021-08-17T15:34:23.000Z</published>
    <updated>2021-08-17T15:38:10.746Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/17/ES6-Promise-asnyc-await/Async.png"></p><font style="font-size:20px;">Promise 與 asnyc-await 的運用</font></blockquote><a id="more"></a><hr><h2 id="Promise-Chain"><a href="#Promise-Chain" class="headerlink" title="Promise Chain"></a>Promise Chain</h2><p>下列為連續執行任務時，全部成功執行完畢的情況</p><figure class="highlight js"><figcaption><span>Promise Chain</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> task01 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"OK"</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> task02 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"OK"</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> task03 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"OK"</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">task01()</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task01=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> task02();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task02=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> task03();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task03=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"done！！"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出訊息</span></span><br><span class="line"><span class="comment">// task01=&gt;OK</span></span><br><span class="line"><span class="comment">// task02=&gt;OK</span></span><br><span class="line"><span class="comment">// task03=&gt;OK</span></span><br><span class="line"><span class="comment">// done！！</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="http://jsbin.com/netepopema/1/edit?js,console" target="_blank" rel="noopener">JSBin</a></p></blockquote><hr><h2 id="Promise-Chain-如何截取錯誤"><a href="#Promise-Chain-如何截取錯誤" class="headerlink" title="Promise Chain 如何截取錯誤"></a>Promise Chain 如何截取錯誤</h2><p>若執行任務過程中有 <font color="red">失敗</font> 的話，就會統一使用 <code>catch</code> 截取錯誤的訊息。</p><figure class="highlight js"><figcaption><span>截取錯誤</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> task01 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"01 OK"</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> task02 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="string">"02 failed"</span>); <span class="comment">// 這裡出錯了...</span></span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> task03 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"01 OK"</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">task01()</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task01=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(task02)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task02=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(task03)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task03=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 統一截取錯誤</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`error=&gt;<span class="subst">$&#123;e&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出訊息</span></span><br><span class="line"><span class="comment">// task01=&gt;01 OK</span></span><br><span class="line"><span class="comment">// error=&gt;02 failed</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="http://jsbin.com/xazupow/edit?js,console" target="_blank" rel="noopener">JSBin</a></p></blockquote><hr><h2 id="asnyc-await"><a href="#asnyc-await" class="headerlink" title="asnyc-await"></a>asnyc-await</h2><p>下列為連續執行任務時，全部成功執行完畢的情況</p><figure class="highlight js"><figcaption><span>asnyc-await chain</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">await</span> fn1();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn1：<span class="subst">$&#123;a&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn1做完...才往下`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">await</span> fn2();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn2：<span class="subst">$&#123;b&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn2做完...才往下`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> c = <span class="keyword">await</span> fn3();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn3：<span class="subst">$&#123;c&#125;</span>`</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出訊息</span></span><br><span class="line"><span class="comment">// fn1：ok</span></span><br><span class="line"><span class="comment">// fn1做完...才往下</span></span><br><span class="line"><span class="comment">// fn2：ok</span></span><br><span class="line"><span class="comment">// fn2做完...才往下</span></span><br><span class="line"><span class="comment">// fn3：ok</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="http://jsbin.com/nilivaxali/1/edit?js,console" target="_blank" rel="noopener">JSBin</a></p></blockquote><hr><h2 id="asnyc-await-如何截取錯誤"><a href="#asnyc-await-如何截取錯誤" class="headerlink" title="asnyc-await 如何截取錯誤"></a>asnyc-await 如何截取錯誤</h2><p>在 Promise 中，我們知道是通過 <code>catch</code> 的方式來捕獲異常，<br>而當我們使用 <code>async</code> 時，則通過 <code>try/catch</code> 來截取錯誤。</p><figure class="highlight js"><figcaption><span>截取錯誤</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"fn1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"error：fn2"</span>; <span class="comment">//送出錯誤</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"fn3"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">await</span> fn1();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 截取錯誤</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="keyword">await</span> fn2();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> c = <span class="keyword">await</span> fn3();</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出訊息</span></span><br><span class="line"><span class="comment">// error：fn2</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="http://jsbin.com/yiyazunusi/1/edit?js,console" target="_blank" rel="noopener">JSBin</a></p></blockquote><p>但是依上列情況來說，當有多個 <code>await</code> 時，包太多 <code>try/catch</code> 的話，就會顯示程式碼不好看也不好閱讀</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"error：fn1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"error：fn2"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"error：fn3"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="keyword">await</span> fn1();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="keyword">await</span> fn2();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> c = <span class="keyword">await</span> fn3();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出訊息</span></span><br><span class="line"><span class="comment">// error：fn1</span></span><br><span class="line"><span class="comment">// error：fn2</span></span><br><span class="line"><span class="comment">// error：fn3</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="http://jsbin.com/zoroyuyuje/1/edit?js,console" target="_blank" rel="noopener">JSBin</a></p></blockquote><p>這時我們可以換個寫法，將 <code>try/catch</code> 移位至 <code>function</code> 裡，而不是包在 <code>await</code> 外層</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 方式1：分別在 try 和 catch 裡，return不同的結果</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"fail"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 方式2：用一個變數紀錄，最後再return結果</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    result = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result; <span class="comment">//回傳結果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"error"</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">await</span> fn1();</span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">await</span> fn2();</span><br><span class="line">  <span class="keyword">let</span> c = <span class="keyword">await</span> fn3();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn1：<span class="subst">$&#123;a&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn2：<span class="subst">$&#123;b&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn3：<span class="subst">$&#123;c&#125;</span>`</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出訊息</span></span><br><span class="line"><span class="comment">// fn1：ok</span></span><br><span class="line"><span class="comment">// fn2：true</span></span><br><span class="line"><span class="comment">// fn3：false</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="http://jsbin.com/zarupuduzo/1/edit?js,console" target="_blank" rel="noopener">JSBin</a></p></blockquote><hr><h2 id="何時要用-Promise-還是-asnyc-await-呢？"><a href="#何時要用-Promise-還是-asnyc-await-呢？" class="headerlink" title="何時要用 Promise 還是 asnyc-await 呢？"></a>何時要用 Promise 還是 asnyc-await 呢？</h2><p>先說結論(個人看法)：</p><ul><li>任務<font color="red">有</font>前後關係的話，使用 <code>Promise Chain</code> 寫法</li><li>任務<font color="red">無</font>前後關係的話，使用 <code>asnyc-await</code> 寫法</li></ul><p>下面用不同情況來說明</p><p><span id="inline-blue">情境 1</span></p><p>因 task01、task02、task03 <font color="red">有前後關係</font>的話，<br>執行的順序需要先完成 task01 → task02 → task03，<br>當執行任務過程中，有錯的話，就不必再繼續往下執行。</p><figure class="highlight js"><figcaption><span>Promise Chain 寫法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> task01 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"01 OK"</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> task02 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="string">"02 failed"</span>); <span class="comment">// 這裡出錯了</span></span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> task03 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"01 OK"</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">task01()</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task01=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(task02)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task02=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(task03)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`task03=&gt;<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`error=&gt;<span class="subst">$&#123;e&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出訊息</span></span><br><span class="line"><span class="comment">// task01=&gt;01 OK</span></span><br><span class="line"><span class="comment">// error=&gt;02 failed</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="http://jsbin.com/xazupow/edit?js,console" target="_blank" rel="noopener">JSBin</a></p></blockquote><p>若是我們改用 <code>asnyc-await</code> 寫的話，如下</p><figure class="highlight js"><figcaption><span>asnyc-await 寫法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    result = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"error"</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">await</span> fn1();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判斷 fn1 是否成功</span></span><br><span class="line">  <span class="keyword">if</span> (a) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`fn1：<span class="subst">$&#123;a&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`fn1：out.....`</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"out..."</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">await</span> fn2();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判斷 fn2 是否成功</span></span><br><span class="line">  <span class="keyword">if</span> (b) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`fn2：<span class="subst">$&#123;b&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`fn2：out.....`</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"out..."</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> c = <span class="keyword">await</span> fn3();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判斷 fn3 是否成功</span></span><br><span class="line">  <span class="keyword">if</span> (c) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`fn3：<span class="subst">$&#123;c&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`fn3：out.....`</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"out..."</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出訊息</span></span><br><span class="line"><span class="comment">// fn1：true</span></span><br><span class="line"><span class="comment">// fn2：out.....</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="http://jsbin.com/cuseroc/edit?js,console" target="_blank" rel="noopener">JSBin</a></p></blockquote><p>雖然<code>asnyc-await</code>一樣可以完成同樣的事情，<br>不過程式碼與<code>Promise</code>的寫法來看，就稍微雜亂了一點，<br>主要是因為執行每個任務時，需要在任務之間，穿插 <code>if</code> 的判斷來確認上個任務是否完成，<br>才能繼續往下執行，不像<code>Promise</code>統一使用一個 <code>catch</code> 截取錯誤的訊息。</p><p><span id="inline-blue">情境 2</span></p><p>若任務<font color="red">沒有</font>相依關係的話，使用 <code>asnyc-await</code> 的寫法，這樣程式碼看起來就簡潔一點。</p><figure class="highlight js"><figcaption><span>asnyc-await</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"fail"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    result = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"error"</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">await</span> fn1();</span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">await</span> fn2();</span><br><span class="line">  <span class="keyword">let</span> c = <span class="keyword">await</span> fn3();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn1：<span class="subst">$&#123;a&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn2：<span class="subst">$&#123;b&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fn3：<span class="subst">$&#123;c&#125;</span>`</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行任務</span></span><br><span class="line"><span class="comment">// fn1：ok</span></span><br><span class="line"><span class="comment">// fn2：true</span></span><br><span class="line"><span class="comment">// fn3：false</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="http://jsbin.com/badaqenomu/edit?js,console" target="_blank" rel="noopener">JSBin</a></p></blockquote><hr><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><div class="note info"><a href="https://youtu.be/TNTIKEWoD_Q" target="_blank" rel="noopener">Alex 宅幹嘛-這些年經歷過的同步非同步 with Tommy</a><br><a href="https://juejin.im/post/5ae57d8d6fb9a07aa6318a20" target="_blank" rel="noopener">帮助你开始理解async/await</a></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/17/ES6-Promise-asnyc-await/Async.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;Promise 與 asnyc-await 的運用&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    <category term="ES6" scheme="hhttps://bryanhsiao.github.io/categories/JS/ES6/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="ES6" scheme="hhttps://bryanhsiao.github.io/tags/ES6/"/>
    
    <category term="Promise" scheme="hhttps://bryanhsiao.github.io/tags/Promise/"/>
    
    <category term="asnyc-await" scheme="hhttps://bryanhsiao.github.io/tags/asnyc-await/"/>
    
  </entry>
  
  <entry>
    <title>VueJS</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/15/VueJS/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/15/VueJS/</id>
    <published>2021-08-15T04:21:57.000Z</published>
    <updated>2021-08-15T06:47:43.287Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/15/VueJS/vue.png"></p><font style="font-size:20px;">整理 Vue.js 筆記</font></blockquote><a id="more"></a><hr><h2 id="v-model-資料綁定"><a href="#v-model-資料綁定" class="headerlink" title="v-model 資料綁定"></a>v-model 資料綁定</h2><p>基本上 Vue 的資料綁定，就是直接用 <code>v-model</code> 加上 data 裡的變數名稱，即可完成綁定。</p><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- v-model 綁定 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">v-model</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 即時呈現 --&gt;</span></span><br><span class="line">  &#123;&#123; text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">      text: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不過唯一要注意的事情，就是綁定的是什麼元素，如：<code>input</code>、<code>Checkbox</code>、<code>radio</code>、<code>select</code>..等，<br>我們需要依照不同的狀況綁定不同的資料格式，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    text: <span class="string">""</span>, <span class="comment">// input標籤</span></span><br><span class="line">    textarea: <span class="string">""</span>, <span class="comment">// textarea標籤</span></span><br><span class="line">    checkbox: <span class="literal">false</span>, <span class="comment">// 單選的checkbox</span></span><br><span class="line">    checkboxArray: [], <span class="comment">// 多選的checkbox</span></span><br><span class="line">    singleRadio: <span class="string">""</span>, <span class="comment">// radio標籤</span></span><br><span class="line">    selected: <span class="string">""</span> <span class="comment">// select標籤</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由上例來看，我們需特別注意的是 HTML-<font color="red"><strong>checkbox 標籤</strong></font></p><ul><li><code>單選</code>的 checkbox，資料儲放的格式需為<code>boolean</code>型態。</li><li><code>多選</code>的 checkbox，資料儲放的格式需為<code>array</code>型態。</li></ul><blockquote><p>官方：<a href="https://cn.vuejs.org/v2/guide/forms.html#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95" target="_blank" rel="noopener">表單控件綁定</a></p></blockquote><hr><h2 id="表單元素绑定-value"><a href="#表單元素绑定-value" class="headerlink" title="表單元素绑定 value"></a>表單元素绑定 value</h2><p>有時我們使用 <code>radio</code>、<code>checkbox</code>、<code>selected</code>時，<br>要達成<font color="red">呈現文字</font>及<font color="red">儲存的資料</font>要有所不一樣的話，<br>我們就可以透過<code>value</code>來設定，<br>另外若需要綁定 <code>value</code> 到 Vue 實例的一個動態屬性上，這時可以用<code>v-bind</code>實現。</p><h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 當選中時，`picked` 為字符串"a" --&gt;</span></span><br><span class="line"><span class="tag">&lt; <span class="attr">input</span>  <span class="attr">type</span> = <span class="string">"radio"</span>  <span class="attr">v-model</span> = <span class="string">"picked"</span>  <span class="attr">value</span> = <span class="string">"a"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- `toggle` 為true 或false --&gt;</span></span><br><span class="line"><span class="tag">&lt; <span class="attr">input</span>  <span class="attr">type</span> = <span class="string">"checkbox"</span>  <span class="attr">v-model</span> = <span class="string">"toggle"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 當選中時，`selected` 為字符串"abc" --&gt;</span></span><br><span class="line"><span class="tag">&lt; <span class="attr">select</span>  <span class="attr">v-model</span> = <span class="string">"selected"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt; <span class="attr">option</span>  <span class="attr">value</span> = <span class="string">"abc"</span> &gt;</span> ABC <span class="tag">&lt;/ <span class="attr">option</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/ <span class="attr">select</span> &gt;</span></span><br></pre></td></tr></table></figure><h3 id="select-使用-v-for-渲染"><a href="#select-使用-v-for-渲染" class="headerlink" title="select 使用 v-for 渲染"></a>select 使用 v-for 渲染</h3><p>主要重點在於賦予<code>option</code>的 value 時，記得要加<code>:</code>符號，如下例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"selected2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>請選擇<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">:value</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"item in selectData"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>官方：<a href="https://cn.vuejs.org/v2/guide/forms.html#%E5%80%BC%E7%BB%91%E5%AE%9A" target="_blank" rel="noopener">值绑定</a></p></blockquote><h3 id="v-model-修飾符"><a href="#v-model-修飾符" class="headerlink" title="v-model 修飾符"></a>v-model 修飾符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- lazy 就像 onchange 一樣，離開欄位才會觸發 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"lazyMsg"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 將值轉型為 數字型態 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 去頭去尾多餘的空白 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trim</span>=<span class="string">"trimMsg"</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>官方：<a href="https://cn.vuejs.org/v2/guide/forms.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6" target="_blank" rel="noopener">修飾符</a></p></blockquote><h3 id="複選框"><a href="#複選框" class="headerlink" title="複選框"></a>複選框</h3><p>主要是在 <code>select</code>的標籤上，新增<code>multiple</code>這個屬性即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">multiple</span> <span class="attr">v-model</span>=<span class="string">"multiSelected"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Kanboo"</span>&gt;</span>Kanboo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Lucas"</span>&gt;</span>Lucas<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Mary"</span>&gt;</span>Mary<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>連結：<a href="http://jsbin.com/xicuyibaje/1/edit?html,js,output" target="_blank" rel="noopener">JSBin</a></p></blockquote><hr><h2 id="呈現文字的方式"><a href="#呈現文字的方式" class="headerlink" title="呈現文字的方式"></a>呈現文字的方式</h2><p>簡單來說有下列幾種</p><ul><li>直接輸出：<code>{ {message;}}</code></li><li>綁定在<code>HTML Tag標籤</code>上<ul><li>純文字： <code>v-text</code></li><li>HTML： <code>v-html</code></li></ul></li></ul><h3 id="範例-2"><a href="#範例-2" class="headerlink" title="範例"></a>範例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 直接輸出 --&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- v-text  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- v-html --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">di</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="v-bind-標籤屬性綁定"><a href="#v-bind-標籤屬性綁定" class="headerlink" title="v-bind 標籤屬性綁定"></a>v-bind 標籤屬性綁定</h2><p>經過上面的解說與示範，<br>我們如何要將資料綁定在 <code>HTML Tag標籤</code> <code>HTML Tag標籤</code> <code>HTML Tag標籤</code>上的話，<br>可能就很直接的使用下列的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"&#123;&#123; imgSrc &#125;&#125;"</span> alt=<span class="string">""</span>&gt;</span><br></pre></td></tr></table></figure><p>在 src 的地方，直接使用 <code>{ { imgSrc }}</code> 就以為可以自動綁定好了。</p><h3 id="錯誤範例"><a href="#錯誤範例" class="headerlink" title="錯誤範例"></a>錯誤範例</h3><figure class="highlight html"><figcaption><span>錯誤範例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 錯誤使用方式，須使用 v-bind --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; imgSrc &#125;&#125;"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">      imgSrc:</span></span><br><span class="line"><span class="javascript">        <span class="string">"https://images.unsplash.com/photo-1479568933336-ea01829af8de?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=d9926ef56492b20aea8508ed32ec6030&amp;auto=format&amp;fit=crop&amp;w=2250&amp;q=80"</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>But…人生總是不如意，上例案例並無法將圖片網址正確的綁上 <code>img 標籤</code> 上，<br>正確的使用方式，應該要使用 <code>v-bind</code> 這功能，如下例</p><p><code>&lt;img v-bind:src=&quot;imgSrc&quot; alt=&quot;&quot;&gt;</code></p><p>所以要在 <code>img 標籤</code> 針對 <code>Attributes</code> 做綁定的話，就要加上 <code>v-bind</code></p><h3 id="正確範例"><a href="#正確範例" class="headerlink" title="正確範例"></a>正確範例</h3><figure class="highlight html"><figcaption><span>正確範例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 針對 Attributes 做綁定的話，就要加上 v-bind --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imgSrc"</span> <span class="attr">v-bind:class</span>=<span class="string">"className"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">      imgSrc:</span></span><br><span class="line"><span class="javascript">        <span class="string">"https://images.unsplash.com/photo-1479568933336-ea01829af8de?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=d9926ef56492b20aea8508ed32ec6030&amp;auto=format&amp;fit=crop&amp;w=2250&amp;q=80"</span>,</span></span><br><span class="line"><span class="javascript">      className: <span class="string">"img-fluid"</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="圖片連結"><a href="#圖片連結" class="headerlink" title="圖片連結"></a>圖片連結</h3><p>當我們要讀取<font color="red">本地端</font>的圖片時，如果直接輸入路徑時，會造成它無法正常顯示，<br>主要是因為 <font color="red">vue-loader 的編譯規則</font> 所導致，我們可以改寫用<code>require</code>方式，來取得本地端圖片的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 失效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"@/assets/img_bg.png"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 正常 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"require('@/assets/img_bg.png')"</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://stackoverflow.com/questions/48847644/how-to-bind-img-src-to-data-in-vue" target="_blank" rel="noopener">How to bind img src to data in Vue</a> &gt; <a href="http://www.ptbird.cn/webpack-simple-vue-html-img.html" target="_blank" rel="noopener">vue tempalte 中的 img 标签无法打包出来</a> &gt; <a href="https://blog.csdn.net/MoLvSHan/article/details/78204972" target="_blank" rel="noopener">vue 踩坑系列——backgroundImage 路径问题</a></p></blockquote><hr><h2 id="有無冒號的區別"><a href="#有無冒號的區別" class="headerlink" title="有無冒號的區別"></a>有無冒號的區別</h2><h3 id="有冒號"><a href="#有冒號" class="headerlink" title="有冒號"></a>有冒號</h3><p>有冒號為 <strong>v-bind</strong> 的縮寫，所以有冒號時，這時資料是綁定一個「<strong>變數</strong>」，<br>所以此時 <code>hello</code> 就代表綁定 Vue Data 裡的 <code>hello</code> 變數。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 有冒號 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:message</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">      hello: <span class="string">"Hi"</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有時不一定是變數，直接寫<strong>運算式</strong>也行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有冒號</span></span><br><span class="line">:message=<span class="string">"1==1"</span></span><br><span class="line">:message=<span class="string">"1==1?'abc':'xyz'"</span></span><br></pre></td></tr></table></figure><h3 id="無冒號"><a href="#無冒號" class="headerlink" title="無冒號"></a>無冒號</h3><p>無冒號代表無綁定，所以此時 <code>message</code> 變數的值，就是一個 <code>hello</code> 的字串。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 無冒號 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">message</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="v-for-重覆渲染"><a href="#v-for-重覆渲染" class="headerlink" title="v-for 重覆渲染"></a>v-for 重覆渲染</h2><p>在呈現多筆資料時，可使用 <code>v-for</code> 功能，來實現重覆渲染畫面，</p><p>一般使用時，可使用 <code>v-for=&quot;item in list&quot;</code>，</p><p>但若有需要資料的<font color="red"><strong>索引值</strong></font>的話，可改寫為 <code>v-for=&quot;(item, index) in list&quot;</code>，</p><p>這樣就可以利用 <code>index</code> 取得目前的<font color="red"><strong>索引值</strong></font>。</p><h3 id="範例-3"><a href="#範例-3" class="headerlink" title="範例"></a>範例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span>&gt;</span></span><br><span class="line">      &#123;&#123; index + 1 &#125;&#125; - &#123;&#123; item.name &#125;&#125;，年齡：&#123;&#123; item.age &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">      list: [</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          name: <span class="string">"小明"</span>,</span></span><br><span class="line"><span class="undefined">          age: 16</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          name: <span class="string">"媽媽"</span>,</span></span><br><span class="line"><span class="undefined">          age: 38</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          name: <span class="string">"漂亮阿姨"</span>,</span></span><br><span class="line"><span class="undefined">          age: 24</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      ]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="v-for-key-的用途"><a href="#v-for-key-的用途" class="headerlink" title="v-for :key 的用途"></a>v-for :key 的用途</h2><p>由於 Vue.js 在效能考量，在<font color="red">預設</font>的狀況下，Vue.js 會儘量重覆使用已渲染好的元素。<br>若不設定 key 值，不會重新渲染元素，只會 <font color="red"><strong>部份更新</strong> <strong>部份更新</strong> <strong>部份更新</strong></font>。</p><h3 id="無-key-範例"><a href="#無-key-範例" class="headerlink" title="無 key 範例"></a>無 key 範例</h3><p>在 HTML 的綁定 <code>li</code> 的部份，後面並無加 <code>:key</code> 的設定，<br>然後我們在 <code>li</code> 裡的 <code>input</code> 欄位裡，分別打上 1111、2222、3333 的值後，<br>這時我們點擊按鈕(<strong>反轉陣列</strong>)時，你會看到資料有二種變化的情況，</p><ol><li><code>{ { index }} - { { item.id }} { { item.name }}</code> 的值，有正常的反轉變化。</li><li><code>input</code>欄位，卻沒有跟著變化。</li></ol><figure class="highlight html"><figcaption><span>無 key 範例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 這裡無設定 :key --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span>&gt;</span></span><br><span class="line">      &#123;&#123; item.id &#125;&#125; &#123;&#123; item.name &#125;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"自己手打加上數字"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"reverseArray"</span>&gt;</span>反轉陣列<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">      list: [</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">"01"</span>, <span class="attr">name</span>: <span class="string">"甲甲甲"</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">"02"</span>, <span class="attr">name</span>: <span class="string">"乙乙乙"</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">"03"</span>, <span class="attr">name</span>: <span class="string">"丙丙丙"</span> &#125;</span></span><br><span class="line"><span class="undefined">      ]</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">      reverseArray: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.list.reverse();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.list);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>無 Key 範例：<a href="http://jsbin.com/korajojomi/1/edit?html,js,output" target="_blank" rel="noopener">JSBin</a></p></blockquote><h3 id="綁定-key-範例"><a href="#綁定-key-範例" class="headerlink" title="綁定 key 範例"></a>綁定 key 範例</h3><p>下面範例為有使用 <code>:key</code>，可以在範例看到資料變化時，整個<code>li</code> 裡面的元素，也會跟著一起變化。</p><figure class="highlight html"><figcaption><span>綁定 key 範例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 綁定 Key ，Key須是 唯一值 uniqueKey --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">      &#123;&#123; item.id &#125;&#125; &#123;&#123; item.name &#125;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"自己手打加上數字"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"reverseArray"</span>&gt;</span>反轉陣列<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>綁定 Key 範例：<a href="http://jsbin.com/lukubovano/1/edit?html,js,output" target="_blank" rel="noopener">JSBin</a></p></blockquote><div class="note warning">使用建議：<br>1.  有使用 <code>v-for</code> 的話，建議都要配合 <code>key</code>。<br>2.  <code>key</code>最好是都是 <font color="red"><strong>唯一值 uniqueKey</strong></font>。<br>3.  <code>key</code>的值可以自訂，只要不一樣即可。</div><hr><h2 id="v-if-判斷式"><a href="#v-if-判斷式" class="headerlink" title="v-if 判斷式"></a>v-if 判斷式</h2><p>由上例延伸，如果想要在某種條件下，不顯示資料的話，</p><p>我們就可以加上 <code>v-if</code> 來加上判斷式，</p><h3 id="範例-4"><a href="#範例-4" class="headerlink" title="範例"></a>範例</h3><p>條件為 年齡小於 25 歲不顯示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span> <span class="attr">v-if</span>=<span class="string">"item.age &lt; 25"</span>&gt;</span></span><br><span class="line">    &#123;&#123; index + 1 &#125;&#125; - &#123;&#123; item.name &#125;&#125;，年齡：&#123;&#123; item.age &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note primary">補充：<br>不過良好的撰寫習慣的話，盡量避免 <font color="red">v-for</font>配 <font color="red">v-if</font>一起使用，<br>主要原因是會 <strong>耗效能</strong>，可以利用 <font color="red">computed</font> 計算，<br>先過濾掉不要的的物件後，再渲染出結果。</div><hr><h2 id="避免-v-if-與-v-for-一起使用"><a href="#避免-v-if-與-v-for-一起使用" class="headerlink" title="避免 v-if 與 v-for 一起使用"></a>避免 v-if 與 v-for 一起使用</h2><p>最主要的原因是「<strong>效能</strong>」的考量。</p><h3 id="情境說明："><a href="#情境說明：" class="headerlink" title="情境說明："></a>情境說明：</h3><p>假設我有 100 個 User(90 男、10 女)，此時我只想顯示 <strong>10 女</strong> 的資料就好。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;u in Users&quot; v-if=&quot;u.sex === &apos;female&apos;&quot; :key=&quot;u._id&quot;&gt;</span><br><span class="line">    &#123;&#123; u.name &#125;&#125; - &#123;&#123; u.isActive &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>不過上例的程式的執行，會跑 100 次 forloop 及判斷，<br>所以當有更新資料時，又會重新跑 100 次，這樣效能上就顯得不優。</p><p>這時我們就可以使用 <code>computed</code> 先將資料過濾好後，<br>再丟給 <code>v-for</code> 去渲染畫面，這樣就可以優化效能的部份。</p><hr><h2 id="v-if-與-v-show"><a href="#v-if-與-v-show" class="headerlink" title="v-if 與 v-show"></a>v-if 與 v-show</h2><ul><li>v-if：若為<code>flase</code>時，DOM 元素是不會被渲染出來，會整個消失的。</li><li>v-show：若為<code>flase</code>時，則是使用 <code>disply:none</code> 將元素隱藏。</li></ul><hr><h2 id="v-on-事件綁定"><a href="#v-on-事件綁定" class="headerlink" title="v-on 事件綁定"></a>v-on 事件綁定</h2><p>以往我們要將某個 DOM 元素綁上事件的話，會使用 <code>EventTarget.addEventListener()</code> 來賦予功能，<br>而在 <code>Vue</code> 要綁上事件監聽的話，實現步驟如下</p><ol><li>在 DOM 元素，宣告<strong>綁定事件</strong></li><li>在 Vue 的 methods 裡，建立<strong>函式</strong></li></ol><h3 id="範例-5"><a href="#範例-5" class="headerlink" title="範例"></a>範例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1. 在DOM元素，宣告 綁定事件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"reverseText"</span>&gt;</span>反轉字串<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">      text: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 2. 在Vue的methods裡，建立 函式</span></span></span><br><span class="line"><span class="javascript">      reverseText: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"Click me"</span>);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>HTML 各種事件屬性：<a href="https://www.w3schools.com/tags/ref_eventattributes.asp" target="_blank" rel="noopener">HTML Event Attributes</a></p></blockquote><hr><h2 id="v-on-進階指令-修飾符"><a href="#v-on-進階指令-修飾符" class="headerlink" title="v-on 進階指令(修飾符)"></a>v-on 進階指令(修飾符)</h2><p>下列介紹一些 <code>修飾符</code> 的使用，可協助縮短我們的程式碼。</p><h3 id="事件修飾符"><a href="#事件修飾符" class="headerlink" title="事件修飾符"></a>事件修飾符</h3><p>最常見的例子，就是 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code>，</p><p>有時我們在監聽事件時，會需要取消一些 HTML 標籤 <font color="red"><strong>預設的行為</strong></font>或是<font color="red"><strong>停止事件冒泡</strong></font>，</p><p>一般情況下，我們會像下列範例這樣撰寫</p><figure class="highlight javascript"><figcaption><span>取消預設行為</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reverseText(event) &#123;</span><br><span class="line">  event.preventDefault(); <span class="comment">// 取消預設行為</span></span><br><span class="line">  <span class="keyword">this</span>.newText = <span class="keyword">this</span>.text.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不過在 Vue 裡，有提供我們另外的寫法，如下</p><h4 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h4><figure class="highlight html"><figcaption><span>事件修飾符</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--阻止單擊事件繼續傳播--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--提交事件不再重載頁面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--修飾符可以串聯--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--只有修飾符--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--添加事件監聽器時使用事件捕獲模式--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--即元素自身觸發的事件先在此處處理，然後才交由內部元素進行處理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--只當在event.target是當前元素自身時觸發處理函數--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--即事件不是從內部元素觸發的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>官方說明：<a href="https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6" target="_blank" rel="noopener">事件修飾符</a></p></blockquote><h4 id="範例-6"><a href="#範例-6" class="headerlink" title="範例"></a>範例</h4><ul><li><p>stop - 調用 event.stopPropagation()，停止事件冒泡 (Event Bubbling)行為。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>將此範例加上 stopPropagation (防止向外尋找)<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"trigger('div')"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 新增 event.stopPropagation() --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click.stop</span>=<span class="string">"trigger('box')"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>stop 範例：<a href="http://jsbin.com/qicogatibu/edit?html,js,console,output" target="_blank" rel="noopener">JSBin</a></p></blockquote></li><li><p>capture - 將監聽事件模式，更改為使用 事件捕獲 (Event Capturing) 模式，。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>事件偵聽器時使用 capture 模式 (事件改為由外而內)<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.capture</span>=<span class="string">"trigger('div')"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click.capture</span>=<span class="string">"trigger('box')"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.capture</span>=<span class="string">"trigger('button')"</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>capture 範例：<a href="http://jsbin.com/zogayenowi/1/edit?html,js,console,output" target="_blank" rel="noopener">JSBin</a></p></blockquote></li><li><p><font color="red"><strong>self</strong></font> - 只會觸發自己綁定的 DOM 元素，不會有<code>Event Capturing</code>和<code>Event Bubbling</code>，這樣就不用再新增<code>event.stopPropagation()</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>事件偵聽器時使用 self 模式 (只會觸發自己範圍內的)<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.self</span>=<span class="string">"trigger('div')"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click.self</span>=<span class="string">"trigger('box')"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.self</span>=<span class="string">"trigger('button')"</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>self 範例：<a href="http://jsbin.com/viqugihoye/1/edit?html,js,console,output" target="_blank" rel="noopener">JSBin</a></p></blockquote></li><li><p>once - 只觸發一次回調。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>事件偵聽器只觸發一次<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.once</span>=<span class="string">"trigger('div')"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click.once</span>=<span class="string">"trigger('box')"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">"trigger('button')"</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>once 範例：<a href="http://jsbin.com/dukohetiwi/1/edit?html,js,console,output" target="_blank" rel="noopener">JSBin</a></p></blockquote></li></ul><h3 id="按鍵修飾符"><a href="#按鍵修飾符" class="headerlink" title="按鍵修飾符"></a>按鍵修飾符</h3><p>以往我們在監聽<font color="red">鍵盤的事件</font>時，都是使用 <code>event.keyCode</code> 進行判斷，如下例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runScript</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判斷是否有按 Enter 鍵</span></span><br><span class="line">  <span class="keyword">if</span> (e.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">    <span class="comment">// your code</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一樣 Vue 也有提供我們另外的寫法，如下</p><h4 id="說明-1"><a href="#說明-1" class="headerlink" title="說明"></a>說明</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `keyCode` 是 13 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">"submit"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>另外也有提供常見的按鍵別名，如：<code>enter</code>、<code>esc</code>、<code>tab</code>…等。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>官方說明：<a href="https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6" target="_blank" rel="noopener">按键修飾符</a></p></blockquote><h4 id="範例-7"><a href="#範例-7" class="headerlink" title="範例"></a>範例</h4><ul><li><p>{keyCode | keyAlias} - 只當事件是從特定鍵觸發時才觸發回調。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.13</span>=<span class="string">"trigger('按下Enter鍵')"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>別名修飾 - .enter, .tab, .delete, .esc, .space, .up, .down, .left, .right</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.enter</span>=<span class="string">"trigger('按下Enter鍵')"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>特殊按鍵，可同時加<strong>二個</strong>修飾符，達到特殊動作才觸發事件 - .ctrl, .alt, .shift, .meta</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.shift.enter</span>=<span class="string">"trigger('shift + Enter')"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="滑鼠修飾符"><a href="#滑鼠修飾符" class="headerlink" title="滑鼠修飾符"></a>滑鼠修飾符</h3><ul><li>.left - (2.2.0) 只當點擊鼠標左鍵時觸發。</li><li>.right - (2.2.0) 只當點擊鼠標右鍵時觸發。</li><li>.middle - (2.2.0) 只當點擊鼠標中鍵時觸發。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"box"</span> @<span class="attr">click.middle</span>=<span class="string">"trigger('點擊鼠標-中鍵')"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="v-on-amp-v-bind-縮寫"><a href="#v-on-amp-v-bind-縮寫" class="headerlink" title="v-on &amp; v-bind 縮寫"></a>v-on &amp; v-bind 縮寫</h2><p>身為專業的懶人的話，能少寫一個字就絕對不多打一個字，<br>下列分別介紹 <code>v-on</code> 和 <code>v-bind</code> 的縮寫。</p><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>原先的寫法 <code>v-on:</code> 改為 <code>@</code> 代表，參考下例。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 原始寫法</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">v-on:click.prevent</span>=<span class="string">"reverseText"</span>&gt;</span>反轉字串<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 縮寫</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click.prevent</span>=<span class="string">"reverseText"</span>&gt;</span>反轉字串<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>原先的寫法 <code>v-bind:</code> 只留下 <code>:</code> 代表即可，參考下例。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 原始寫法</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imgSrc"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// 縮寫</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgSrc"</span> /&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="v-class-動態切換-ClassName"><a href="#v-class-動態切換-ClassName" class="headerlink" title="v-class 動態切換 ClassName"></a>v-class 動態切換 ClassName</h2><p>有時我們會針對 DOM 元素，動態的新增移除 CSS 屬性，而在 Vue 裡，我們實現的方式，</p><p>除了使用 <code>v-bind:</code> 綁定資料外，也需要在後面<strong>新增條件式的判斷</strong>，</p><p>這樣我們才能達到<strong>動態切換 ClassName</strong>，如下例所示</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 額外新增判斷式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; '要加入的 ClassName' : 判斷式 &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="物件寫法"><a href="#物件寫法" class="headerlink" title="物件寫法"></a>物件寫法</h3><ul><li><p>方法 1：直接寫<br>直接使用 <code>{ &#39;屬性名稱&#39;: 判斷式 }</code> 寫入，若是有多個的話，可用「<font color="red"><strong>逗號</strong></font>」隔開。</p></li><li><p>方法 2：物件<br>有時超過二個以上的話，會大大降低可讀性， 所以將多個的 <code>&#39;屬性名稱&#39;: 判斷式</code> 寫在 Vue 的 Data 裡。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法1：直接寫 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"&#123; 'rotate': isTransform, 'bg-orange':  boxColor &#125;"</span>&gt;</span></span><br><span class="line">  Style</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 方法2：物件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"objectClass"</span>&gt;</span></span><br><span class="line">  Object</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">      isTransform: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      boxColor: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 物件</span></span></span><br><span class="line"><span class="undefined">      objectClass: &#123;</span></span><br><span class="line"><span class="javascript">        rotate: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">"bg-orange"</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>程式範例：<a href="http://jsbin.com/keqimunewu/1/edit?html,js,output" target="_blank" rel="noopener">JSBin</a></p></blockquote><h3 id="更改-CSS-物件之判斷式"><a href="#更改-CSS-物件之判斷式" class="headerlink" title="更改 CSS 物件之判斷式"></a>更改 CSS 物件之判斷式</h3><p>若是 CSS 採用物件寫法的話，不過當要更改<code>判斷式</code>的值時，要稍微注意一下<font color="red"><strong>取值的寫法</strong></font>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法2：物件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"objectClass"</span>&gt;</span></span><br><span class="line">  Object</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 取物件裡，單個屬性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"objectClass.rotate = !objectClass.rotate"</span>&gt;</span></span><br><span class="line">  rotate</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意，若有「-」字號，要用「中括號」方式寫法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"objectClass['bg-orange']"</span>&gt;</span></span><br><span class="line">  bg-orange</span><br><span class="line"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    objectClass: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">'rotate'</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">    <span class="string">'bg-orange'</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>程式範例：<a href="http://jsbin.com/pixuyonixi/1/edit?html,js,output" target="_blank" rel="noopener">JSBin</a></p></blockquote><h3 id="陣列寫法"><a href="#陣列寫法" class="headerlink" title="陣列寫法"></a>陣列寫法</h3><p>直接利用陣列的方式，將<code>ClassName</code>寫進<code>Array</code>裡，記得要是「<font color="red">字串</font>」。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 陣列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"['rotate', 'bg-orange']"</span>&gt;</span></span><br><span class="line">  Array</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>程式範例：<a href="http://jsbin.com/famuvajoja/1/edit?html,css,output" target="_blank" rel="noopener">JSBin</a></p></blockquote><h3 id="動態更新-CSS-陣列寫法"><a href="#動態更新-CSS-陣列寫法" class="headerlink" title="動態更新 CSS 陣列寫法"></a>動態更新 CSS 陣列寫法</h3><p>可透過 <font color="red"><strong>checkbox</strong></font> 的特性，可動態新增移除<code>ClassName</code>是否寫進 <code>Array</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 陣列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"arrayClass"</span>&gt;</span></span><br><span class="line">  Array</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1. 先綁定 v-model 及 設定 value 的值。</span></span><br><span class="line"><span class="comment">2. 籍由 checkbox 的特性，若有勾選時，才會是true，</span></span><br><span class="line"><span class="comment">   此時才會存在在 arrayClass 裡，</span></span><br><span class="line"><span class="comment">   若無勾選的話，就不會存在 arrayClass 裡。</span></span><br><span class="line"><span class="comment">3. 可打開 Vue工具 觀察 arrayClass 的變化。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"arrayClass"</span> <span class="attr">value</span>=<span class="string">"rotate"</span>&gt;</span></span><br><span class="line">  rotate</span><br><span class="line"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"arrayClass"</span> <span class="attr">value</span>=<span class="string">"bg-orange"</span>&gt;</span></span><br><span class="line">  bg-orange</span><br><span class="line"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    arrayClass:[],</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>程式範例：<a href="http://jsbin.com/lakijesuca/1/edit?html,js,output" target="_blank" rel="noopener">JSBin</a></p></blockquote><h3 id="綁定行內樣式"><a href="#綁定行內樣式" class="headerlink" title="綁定行內樣式"></a>綁定行內樣式</h3><p><code>:style=&quot;{ 樣式屬性 : &#39;樣式的值&#39; }</code></p><p>可以直接利用 <code>:style</code> 的寫法，將 CSS 屬性寫在 HTML 上面，</p><p>不過有一點要 <strong>注意</strong> <strong>注意</strong> 再 <strong>注意</strong></p><p>若樣式屬性有「<font color="red">-</font>」字號的話，改寫為「<strong>駝峰式命名</strong>」，將「-」去除而接著後面<font color="red">第一個字母改大寫</font>。</p><ul><li><p>駝峰式命名：</p><ul><li><p>box-shadow =&gt; boxShadow ( S 變大寫)</p></li><li><p>margin-top =&gt; marginTop ( T 變大寫)</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接寫入HTML裡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:style</span>=<span class="string">"&#123;backgroundColor: 'orange'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:style</span>=<span class="string">"&#123;backgroundImage: 'url(' + img + ')' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 取用Vue Data的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:style</span>=<span class="string">"styleObject1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 陣列方式，裡面插入多個物件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"box"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:style</span>=<span class="string">"[&#123;backgroundColor: 'orange'&#125;, &#123;borderWidth: '3px'&#125;]"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:style</span>=<span class="string">"[styleObject1, styleObject2]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">      img: <span class="string">"https://fakeimg.pl/100x100/?text=Hello"</span>,</span></span><br><span class="line"><span class="undefined">      styleObject1: &#123;</span></span><br><span class="line"><span class="javascript">        backgroundColor: <span class="string">"red"</span>,</span></span><br><span class="line"><span class="javascript">        borderWidth: <span class="string">"10px"</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      styleObject2: &#123;</span></span><br><span class="line"><span class="javascript">        boxShadow: <span class="string">"3px 3px 5px rgba(0, 0, 0, 0.16)"</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>程式範例：<a href="http://jsbin.com/xegikubeti/1/edit?html,js,output" target="_blank" rel="noopener">JSBin</a></p></blockquote><hr><h2 id="Computed-跟-method-差異點"><a href="#Computed-跟-method-差異點" class="headerlink" title="Computed 跟 method 差異點"></a>Computed 跟 method 差異點</h2><p>因為這二者做的事情都好像可以完成，所以有時會不知該選<code>Computed</code> 或 <code>Methods</code>？</p><h3 id="比較表"><a href="#比較表" class="headerlink" title="比較表"></a>比較表</h3><table><thead><tr><th></th><th>method</th><th>computed</th></tr></thead><tbody><tr><td>使用方式</td><td>可傳參數</td><td>類變數</td></tr><tr><td>執行方式</td><td>每次呼叫，每次執行</td><td>快取</td></tr><tr><td>適用選擇</td><td>功能面、動作操作</td><td>資料格式、內容處理</td></tr></tbody></table><h3 id="使用方式-說明"><a href="#使用方式-說明" class="headerlink" title="使用方式 說明"></a>使用方式 說明</h3><p>二者的呼叫方式不太一樣</p><ul><li><p>method</p><figure class="highlight javascript"><figcaption><span>method呼叫方式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="keyword">this</span>.fun();</span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="keyword">this</span>.fun(<span class="string">"參數1"</span>, <span class="string">"參數2"</span>);</span><br></pre></td></tr></table></figure></li><li><p>computed</p><p>computed 屬性默認只設置 <font color="red"><strong>getter</strong></font> 函數，不過在需要時，還可以提供 <font color="red"><strong>setter</strong></font> 函數，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    <span class="comment">// getter 函数</span></span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter 函数</span></span><br><span class="line">    <span class="keyword">set</span>: function (newValue) &#123;</span><br><span class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>)</span><br><span class="line">      <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>所以 computed 的呼叫方式，就是使用 <strong>getter</strong> 或 <strong>setter</strong> 二種用法，<br>而這樣的用法，就很像我們一般在使用<font color="red"><strong>JS 的變數</strong></font>一樣，不是<strong>取值</strong>，就是<strong>覆寫值</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getter</span></span><br><span class="line">getFullName = <span class="keyword">this</span>.fullName;</span><br><span class="line"><span class="comment">// setter</span></span><br><span class="line"><span class="keyword">this</span>.fullName = <span class="string">"改變的值"</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="執行方式-說明"><a href="#執行方式-說明" class="headerlink" title="執行方式 說明"></a>執行方式 說明</h3><ul><li><p>method</p><p>每次呼叫，每次執行，所以若呼叫 10 次，就會執行 10 次。</p></li><li><p>computed</p><p>與 method 不同的點，若是當資料沒有變動時，就不會重新計算，<br>所以就算呼叫 10 次，資料若沒變的話，就直接回傳 cache 給你。</p></li></ul><h3 id="如何選擇"><a href="#如何選擇" class="headerlink" title="如何選擇"></a>如何選擇</h3><p>在選擇二者時，請優先考慮 <font color="red"><strong>computed</strong></font>，若 <strong>computed</strong> 可以使用且滿足你的需求，就用 <strong>computed</strong> 來執行，<br>另外下列簡易區分方式</p><ul><li><p>computed</p><p>若是性質比較偏向 data 的 <strong>資料格式</strong> 或 <strong>內容處理</strong> 的話，可選用 <code>computed</code>。</p></li><li><p>method</p><p>可以想成我們在用 JS 的<code>addeventlistener</code>,通常在某些情況下，我們會呼叫<strong>函式</strong>，幫我們處理相關事宜，如：click、mouseover…等。</p></li></ul><hr><h2 id="Computed-跟-method-觸發時機"><a href="#Computed-跟-method-觸發時機" class="headerlink" title="Computed 跟 method 觸發時機"></a>Computed 跟 method 觸發時機</h2><p>這裡我們從 <font color="red"><strong>觸發時機</strong></font> 來比較二者差異，這樣下次要選擇時，就可以選擇較適當作法。</p><ul><li><p>Computed：其<font color="red"><strong>相依</strong></font>的 <code>data</code> 改變時，computed 才會重新計算。</p></li><li><p>Methods：只要 <code>data</code> 有改變時，不管 <strong><font color="red">有無</font>相依</strong> ，都會重新計算。</p></li></ul><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><ul><li>需要每次更新，就用 <code>Methods</code></li><li>在意效能，就用 <code>Computed</code></li></ul><h3 id="範例-8"><a href="#範例-8" class="headerlink" title="範例"></a>範例</h3><p>可以點擊範例裡的<code>count</code>按鈕，然後看 console 顯示的訊息，<br>你就會知道<code>Computed</code> 或 <code>Methods</code> <font color="red">觸發時機</font>有什麼不一樣了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"plus"</span>&gt;</span>count：&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>now (computed)：&#123;&#123; now &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>getNow (method)：&#123;&#123; getNow() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">      count: 0</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 只要 Vue data 的值有改變時，不管是哪一個值改變，都會觸發每一個函式重新計算。</span></span></span><br><span class="line"><span class="javascript">      getNow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"getNow"</span> + <span class="string">"--被觸發執行了"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      plus() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"plus"</span> + <span class="string">"----被觸發執行了"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.count += <span class="number">1</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    computed: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 其相依的 `data` 改變時，computed 才會重新計算。</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 下面 now 函式裡面沒有 count 的變數，所以count更新時，也不會被觸發</span></span></span><br><span class="line"><span class="javascript">      now: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"now"</span> + <span class="string">"-----被觸發執行了"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>範例程式：<a href="http://jsbin.com/bapukabodi/1/edit?html,js,output" target="_blank" rel="noopener">JSBin</a></p></blockquote><hr><h2 id="Computed-與-Watch-的差異"><a href="#Computed-與-Watch-的差異" class="headerlink" title="Computed 與 Watch 的差異"></a>Computed 與 Watch 的差異</h2><h3 id="觸發時機"><a href="#觸發時機" class="headerlink" title="觸發時機"></a>觸發時機</h3><ul><li><p>Computed：當 methods 裡，有<font color="red"><strong>包含</strong></font>到 Vue Data 的變數的話，當變數值更新時，就會觸發 Computed 裡 method 的呼叫。</p></li><li><p>Watch：針對 Vue Data 裡，<font color="red"><strong>特別指定</strong></font>監聽某<font color="red"><strong>一個變數</strong></font>，當此變數更新時，就會觸發 Watch 裡 method 的呼叫。</p></li></ul><h3 id="說明-2"><a href="#說明-2" class="headerlink" title="說明"></a>說明</h3><p>在一般情況下，我們通常會直接使用<code>Computed</code>去監聽變數，不用<code>Watch</code>是因為還需要一個個變數去綁定，<br>不過有時如果遇到要處理<font color="red"><strong>非同步</strong></font>或<font color="red"><strong>複雜的計算</strong></font>時，就可以考慮使用<code>Watch</code>來處理事情。</p><h3 id="Watch-範例"><a href="#Watch-範例" class="headerlink" title="Watch 範例"></a>Watch 範例</h3><p>我想要「使用 trigger 來觸發旋轉 box、並在三秒後改變回來」，所以我特別指定監聽 <code>trigger</code> 這個變數是否有變更。</p><blockquote><p>Watch 範例：<a href="http://jsbin.com/poxiwirazi/edit?html,css,js,output" target="_blank" rel="noopener">JSBin</a></p></blockquote><div class="note info">官方說明：<a href="https://vuefe.cn/v2/guide/computed.html#watcher" target="_blank" rel="noopener">watcher</a></div><hr><h2 id="template-小技巧"><a href="#template-小技巧" class="headerlink" title="template 小技巧"></a>template 小技巧</h2><p>以往我們要針對<font color="red"><strong>多個</strong></font>DOM 新增<code>v-if</code>判斷時，需要一個一個新增，如下例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"showTemplate"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Kanboo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"showTemplate"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lucas<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若是多個 DOM 的條件都為一樣的話，此時我們可以使用<code>template</code>標籤，<br>將整個區塊包起來，然後在<code>template</code>上，新增判斷式即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"showTemplate"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Kanboo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lucas<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="DOM-解析注意"><a href="#DOM-解析注意" class="headerlink" title="DOM 解析注意"></a>DOM 解析注意</h2><p>某些 HTML 元素<font color="red">限制</font>內部的元素只能是某幾種 tag，<br>如：table、select、ul / ol 等，若是使用 Component 時就必須特別小心。</p><ul><li>table =&gt; thead、tbody =&gt; tr =&gt; td</li><li>select =&gt; option</li><li>ul、ol =&gt; li</li></ul><h3 id="失效範例"><a href="#失效範例" class="headerlink" title="失效範例"></a>失效範例</h3><p>雖然 <code>select</code> 底下的 Component <code>my-option</code> 的裡面是使用<code>option</code>看似合理，<br>不過最主要是一開始 HTML 在渲染時，看到<code>select</code>底下的是 <code>my-option</code> 標籤，<br>因為 HTML 認為這在<code>select</code> 底下是無效的標籤，所以就將<code>my-option</code> 標籤移除，<br>也因為這樣 Vue 要在解析 Component 時，已經不見了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-option</span>&gt;</span><span class="tag">&lt;/<span class="name">my-option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"my-option"</span>, &#123;</span><br><span class="line">  template: <span class="string">`&lt;option&gt;Option A&lt;/option&gt;`</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="正確方法"><a href="#正確方法" class="headerlink" title="正確方法"></a>正確方法</h3><p>若要可以正常渲染的話，就需將 Component 寫法移至 Vue 的 template 裡面，<br>透過這樣的方式，讓 Vue 來幫我們解析及渲染畫面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"my-option"</span>, &#123;</span><br><span class="line">  template: <span class="string">`&lt;option&gt;Option A&lt;/option&gt;`</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div id="app"&gt;</span></span><br><span class="line"><span class="string">      &lt;select&gt;&lt;my-option&gt;&lt;/my-option&gt;&lt;/select&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="資料更新的機制"><a href="#資料更新的機制" class="headerlink" title="資料更新的機制"></a>資料更新的機制</h2><p>一般情況下，我們要更新 Vue Data 裡面的值時，通常直接指定變數後，就賦予值給它，<br>不過若是要更新「<font color="red">物件 和 陣列</font>」時，就要注意什麼情況會更新，什麼情況不會被更新，<br>下列範例主要是看 PJ 大文章說明(<a href="https://pjchender.blogspot.com/2017/05/vue-vue-reactivity.html" target="_blank" rel="noopener">為什麼畫面沒有隨資料更新 - Vue 響應式原理（Reactivity）</a>)，<br>將一些關鍵點紀錄下來</p><h3 id="物件更新"><a href="#物件更新" class="headerlink" title="物件更新"></a>物件更新</h3><p>若是物件要更新某個屬性值的話，有下列方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> postVm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#post"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    post: &#123;</span><br><span class="line">      userId: <span class="string">""</span>,</span><br><span class="line">      id: <span class="string">""</span>,</span><br><span class="line">      title: <span class="string">""</span></span><br><span class="line">      <span class="comment">// body: "",    //一開始沒加</span></span><br><span class="line">      <span class="comment">// author: ""   //一開始沒加</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">let</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">//  https://jsonplaceholder.typicode.com/posts/1</span></span><br><span class="line">    request.get(root + <span class="string">"/posts/3"</span>).end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> response = res.body;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 問題狀況</span></span><br><span class="line"><span class="comment">       * 1. vm.post.body 一開始忘記設定進去</span></span><br><span class="line"><span class="comment">       * 2. vm.post.author 後來新增的欄位</span></span><br><span class="line"><span class="comment">       * 資料已經設定進去，但是畫面沒有更新，可以開 Vue Dev Tool 搭配 $forceUpdate()</span></span><br><span class="line"><span class="comment">       **/</span></span><br><span class="line">      vm.post.userId = response.userId;</span><br><span class="line">      vm.post.id = response.id;</span><br><span class="line">      vm.post.title = response.title;</span><br><span class="line">      <span class="comment">// ↓ 事後新增此變數，畫面會無法自動刷新，主要是沒有賦予響應式屬性(Reactivity)。</span></span><br><span class="line">      vm.post.body = response.body;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 解決辦法 1: 一開始在 data 的地方就補齊</span></span><br><span class="line"><span class="comment">       **/</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 解決辦法 2: 使用 Vue.set(object, key, value)，重新賦予響應式屬性(Reactivity)</span></span><br><span class="line"><span class="comment">       **/</span></span><br><span class="line">      vm.$<span class="keyword">set</span>(vm.post, "body", response.body);</span><br><span class="line">      vm.$<span class="keyword">set</span>(vm.post, "author", "");</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * 解決辦法 3: 使用 Object.assign 建立新的物件</span><br><span class="line">       **/</span><br><span class="line">      // vm.post = response       // 不建議</span><br><span class="line">      vm.post = Object.assign(&#123;&#125;, response, &#123; <span class="attr">author</span>: <span class="string">""</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="陣列更新"><a href="#陣列更新" class="headerlink" title="陣列更新"></a>陣列更新</h3><p>若針對陣列時，只有下列幾個 <strong>methods</strong>，才會觸發 Vue 去重新渲染畫面。</p><p>陣列函式：<font color="red">push()、pop()、shift()、unshift()、splice()、sort()、reverse()</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> postsVm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#posts"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    currentIndex: <span class="string">""</span>,</span><br><span class="line">    posts: [],</span><br><span class="line">    post: &#123;</span><br><span class="line">      userId: <span class="string">""</span>,</span><br><span class="line">      id: <span class="string">""</span>,</span><br><span class="line">      title: <span class="string">""</span>,</span><br><span class="line">      body: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    refreshForm(index) &#123;</span><br><span class="line">      <span class="keyword">this</span>.currentIndex = index; <span class="comment">// 暫存用變數</span></span><br><span class="line">      <span class="keyword">this</span>.post.userId = <span class="keyword">this</span>.posts[index].userId;</span><br><span class="line">      <span class="keyword">this</span>.post.id = <span class="keyword">this</span>.posts[index].id;</span><br><span class="line">      <span class="keyword">this</span>.post.title = <span class="keyword">this</span>.posts[index].title;</span><br><span class="line">      <span class="keyword">this</span>.post.body = <span class="keyword">this</span>.posts[index].body;</span><br><span class="line">    &#125;,</span><br><span class="line">    saveForm(event) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"saveForm"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"this.currentIndex"</span>, <span class="keyword">this</span>.currentIndex);</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 問題一：</span></span><br><span class="line"><span class="comment">       * 使用 index 的方式修改陣列中的內容會壞掉</span></span><br><span class="line"><span class="comment">       * - 資料更新但畫面不更新</span></span><br><span class="line"><span class="comment">       **/</span></span><br><span class="line">      <span class="keyword">this</span>.posts[<span class="keyword">this</span>.currentIndex] = <span class="keyword">this</span>.post;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 解決方法一：使用 Vue 可觀察到的陣列方法</span></span><br><span class="line"><span class="comment">       * push()、pop()、shift()、unshift()、splice()、sort()、reverse()</span></span><br><span class="line"><span class="comment">       * arr.splice(startIndex, delteCount, addItem)</span></span><br><span class="line"><span class="comment">       **/</span></span><br><span class="line">      <span class="keyword">this</span>.posts.splice(<span class="keyword">this</span>.currentIndex, <span class="number">1</span>, <span class="keyword">this</span>.post); <span class="comment">// 會有陣例 by reference 問題</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 解決方法二： 使用 vm.$set</span></span><br><span class="line"><span class="comment">       * vm.$set(array, index, value)</span></span><br><span class="line"><span class="comment">       **/</span></span><br><span class="line">      <span class="keyword">this</span>.$<span class="keyword">set</span>(this.posts, this.currentIndex, this.post); // 會有陣例 by reference 問題</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * 問題二：陣列中的值是「物件內容」變成響應式的，會有by reference，</span><br><span class="line">       *        所以若是遇到「物件」的話，建議使用 Object.assign 重新賦予</span><br><span class="line">       **/</span><br><span class="line"></span><br><span class="line">      // 對應 解法一</span><br><span class="line">      this.posts.splice(</span><br><span class="line">        this.currentIndex,</span><br><span class="line">        1,</span><br><span class="line">        Object.assign(&#123;&#125;, <span class="keyword">this</span>.post) <span class="comment">// 重新創一個新物件</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 對應 解法二</span></span><br><span class="line">      <span class="keyword">this</span>.$<span class="keyword">set</span>(this.posts, this.currentIndex, Object.assign(&#123;&#125;, <span class="keyword">this</span>.post));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// postsLength () &#123;</span></span><br><span class="line">    <span class="comment">//     // 提醒：如果畫面中沒有使用到 postsLength ，則不會自動促發 computed</span></span><br><span class="line">    <span class="comment">//     let newPostId = this.posts.length + 1</span></span><br><span class="line">    <span class="comment">//     this.post.id = newPostId</span></span><br><span class="line">    <span class="comment">//     return newPostId</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">let</span> vm = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// AJAX request</span></span><br><span class="line">    <span class="comment">//  https://jsonplaceholder.typicode.com/posts/</span></span><br><span class="line">    request.get(root + <span class="string">"/posts"</span>).end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">      vm.posts = res.body;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div class="note info">PJ：<a href="https://pjchender.blogspot.com/2017/05/vue-vue-reactivity.html" target="_blank" rel="noopener">為什麼畫面沒有隨資料更新 - Vue 響應式原理（Reactivity）</a><br>官方說明：<a href="https://cn.vuejs.org/v2/guide/list.html#%E5%8F%98%E5%BC%82%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">Vue-Mutation Methods</a><br></div><hr><h2 id="Vue-生命週期"><a href="#Vue-生命週期" class="headerlink" title="Vue 生命週期"></a>Vue 生命週期</h2><p>建立或移除 DOM 元素時，所經歷的事件</p><ol><li>beforeCreate：實體初始化。</li><li>Created：實體建立完成。資料 <code>$data</code> 已可取得，但 <code>$el</code> 屬性還未被建立。<br>———–↓↓↓————–</li><li>beforeMount：執行元素掛載之前。</li><li>mounted：元素已掛載， <code>$el</code> 被建立。<br>———–↓↓↓————–</li><li>beforeUpdate：當資料變化時被呼叫，還不會描繪 View。</li><li>updated：DOM 的更新已經完成，View 被顯示在畫面上。<br>———–↓↓↓————–</li><li>activated：如果有設定 <code>keep-alive</code>，這個掛鉤會被呼叫。</li><li>deactivated：停用 <code>keep-alive</code>時被呼叫。<br>或</li><li>beforeDestroy：實體還可使用。</li><li>destroyed：實體銷毀。所有綁定被解除、事件偵聽被移除、子實體也被銷毀。</li></ol><!-- ![](https://i.imgur.com/7w0kREW.png) --><img src="/2021/08/15/VueJS/vuelifecycle.png"><h3 id="範例-9"><a href="#範例-9" class="headerlink" title="範例"></a>範例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`beforeCreate! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line">created() &#123;</span><br><span class="line">  alert(<span class="string">`created! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">beforeMount() &#123;</span><br><span class="line">  alert(<span class="string">`beforeMount! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">  alert(<span class="string">`mounted! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">updated () &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`updated! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">activated () &#123;</span><br><span class="line">  <span class="comment">// 有使用 keep-alive 時，會觸發此事件</span></span><br><span class="line">  alert(<span class="string">`activated! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line">deactivated () &#123;</span><br><span class="line">  <span class="comment">// 有使用 keep-alive 時，當使用v-if為false，</span></span><br><span class="line">  alert(<span class="string">`deactivated! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">  <span class="comment">// 刪除前</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`beforeDestroy! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line">destroyed() &#123;</span><br><span class="line">  <span class="comment">// 刪除後</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`destroyed! <span class="subst">$&#123;<span class="keyword">this</span>.text&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>生命週期範例 1：<a href="http://jsbin.com/hajenewatu/1/edit?html,js,console,output" target="_blank" rel="noopener">JSBin</a><br>生命週期範例 2：<a href="http://jsbin.com/fitopuviba/edit?html,css,js,output" target="_blank" rel="noopener">JSBin</a></p></blockquote><div class="note info">參考文件：<a href="http://blog.tonycube.com/2017/04/vuejs-8-lifecycle.html" target="_blank" rel="noopener">Vue 實體與生命週期</a>、<a href="http://blog.percymong.com/articles/vue-lifecycle/" target="_blank" rel="noopener">Vue 生命周期钩子</a><br></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/15/VueJS/vue.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;整理 Vue.js 筆記&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="VueJS" scheme="hhttps://bryanhsiao.github.io/categories/VueJS/"/>
    
    
    <category term="VueJS" scheme="hhttps://bryanhsiao.github.io/tags/VueJS/"/>
    
  </entry>
  
  <entry>
    <title>Composition API</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/10/vue3-04/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/10/vue3-04/</id>
    <published>2021-08-09T16:13:00.000Z</published>
    <updated>2021-08-15T06:47:36.980Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/10/vue3-04/Composition_API.png"></p></blockquote><a id="more"></a><h2 id="Option-API"><a href="#Option-API" class="headerlink" title="Option API"></a>Option API</h2><ul><li>所有功能被依據<strong>程式邏輯</strong>區分</li><li>對初學者來說相當<strong>易學</strong></li><li>==缺點==：商業、功能邏輯被<strong>拆分</strong>到各處<br><img src="https://i.imgur.com/9UUufnj.png" alt="Option API"><br><em>圖片展示 Option 的程式邏輯</em></li><li>藍色代表程式邏輯</li><li>綠色與紅色分別為同一個功能所需要用的邏輯</li></ul><h2 id="Option-API-與-Composition-API-的差異"><a href="#Option-API-與-Composition-API-的差異" class="headerlink" title="Option API 與 Composition API 的差異"></a>Option API 與 Composition API 的差異</h2><ul><li>而 Composition 改善其缺點，將同一個商業、功能邏輯寫在一起<br><img src="https://i.imgur.com/mfIeYp4.png" alt="比較"><br><em>圖片展示 Composition 與 Option 的差別</em></li><li>將分散在各處的功能邏輯集中在一起 (分散在各處的顏色集中在一起)</li></ul><h2 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h2><ul><li>全部整合進<code>setup</code>內</li><li>高度的彈性</li><li>基於既有的 JS 知識開發</li><li>方便引入函式庫<br><img src="https://i.imgur.com/epx27MG.png" alt="Composition API"><br><em>圖片展示 Composition 的寫法</em></li><li>所有功能邏輯都各自寫好，不會分散各地</li></ul><h2 id="Vue-的-this-指向"><a href="#Vue-的-this-指向" class="headerlink" title="Vue 的 this 指向"></a>Vue 的 this 指向</h2><ul><li>Proxy 是 Vue 在做雙向綁定的重要結構</li><li>在 Option API 可以不知道他</li><li>但在 Composition API 他還蠻重要的</li><li>資料都會藏在 Target 裡面<br><img src="https://i.imgur.com/ToIog5E.png" alt="this"></li></ul><h2 id="複習-ESM"><a href="#複習-ESM" class="headerlink" title="複習 ESM"></a>複習 ESM</h2><p><a href="https://cdnjs.com/libraries/vue" target="_blank" rel="noopener">CDN 連結</a><br><code>https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.0-beta.7/vue.esm-browser.min.js</code></p><p><img src="https://i.imgur.com/Rc0cV7M.png" alt="ESM"><br><em>ESM 比較能依據自己需求來引入所需的功能</em></p><h2 id="Composition-API-起手式"><a href="#Composition-API-起手式" class="headerlink" title="Composition API 起手式"></a>Composition API 起手式</h2><h3 id="通常都是使用-ESModule-來操作"><a href="#通常都是使用-ESModule-來操作" class="headerlink" title="通常都是使用 ESModule 來操作"></a>通常都是使用 ESModule 來操作</h3><p>不轉 ESM 也行，但在 composition API 使用 ESM 更符合模組化概念</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &#123;&#123; text &#125;&#125;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;text&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JS</span></span><br><span class="line">&lt;script type=<span class="string">"module"</span>&gt;</span><br><span class="line">    <span class="comment">// 引入 ESM，script 的 type 記得改成 module</span></span><br><span class="line">    <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.0-beta.7/vue.esm-browser.min.js'</span></span><br><span class="line">    <span class="comment">// 用 ESM 就不用 Vue. 開頭</span></span><br><span class="line">    <span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">        <span class="comment">// Composition API 一定會有 setup</span></span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="keyword">const</span> text = <span class="string">'卡斯伯棒棒'</span>;</span><br><span class="line">            <span class="comment">// 需要回傳值，才能在 HTML 使用</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                text</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    app.mount(<span class="string">'#app'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/DecnIjV.png" alt="卡斯伯棒棒"></p><h3 id="Composition-API-裡雙向綁定，需要引入ref"><a href="#Composition-API-裡雙向綁定，需要引入ref" class="headerlink" title="Composition API 裡雙向綁定，需要引入ref"></a>Composition API 裡雙向綁定，需要引入<code>ref</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"module"</span>&gt;</span><br><span class="line">    <span class="comment">// 引入 ref</span></span><br><span class="line">    <span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">'https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.0-beta.7/vue.esm-browser.min.js'</span></span><br><span class="line">    <span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="comment">// 使用 ref() 進行雙向綁定</span></span><br><span class="line">            <span class="keyword">const</span> text = ref(<span class="string">'卡斯伯棒棒'</span>);</span><br><span class="line">            <span class="comment">// 需要回傳值，才能在 HTML 使用</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                text</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    app.mount(<span class="string">'#app'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Composition-API-使用函式"><a href="#Composition-API-使用函式" class="headerlink" title="Composition API 使用函式"></a>Composition API 使用函式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"module"</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">'https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.0-beta.7/vue.esm-browser.min.js'</span></span><br><span class="line">    <span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="keyword">const</span> text = ref(<span class="string">'卡斯伯棒棒'</span>);</span><br><span class="line">            <span class="comment">// 新增你需要的函式</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( text )</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 需要回傳值，才能在 HTML 使用</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                text,</span><br><span class="line">                getText,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    app.mount(<span class="string">'#app'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Composition-API-使用生命週期"><a href="#Composition-API-使用生命週期" class="headerlink" title="Composition API 使用生命週期"></a>Composition API 使用生命週期</h2><h3 id="引入-onMounted"><a href="#引入-onMounted" class="headerlink" title="引入 onMounted"></a>引入 onMounted</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"module"</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; createApp, ref, onMounted &#125; <span class="keyword">from</span> <span class="string">'https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.0-beta.7/vue.esm-browser.min.js'</span></span><br><span class="line">    <span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="keyword">const</span> text = ref(<span class="string">'卡斯伯棒棒'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( text )</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 新增生命週期</span></span><br><span class="line">            onMounted(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                getText()</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 需要回傳值，才能在 HTML 使用</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                text,</span><br><span class="line">                getText,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    app.mount(<span class="string">'#app'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引入-computed"><a href="#引入-computed" class="headerlink" title="引入 computed"></a>引入 computed</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"module"</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; createApp, ref, onMounted, computed &#125; <span class="keyword">from</span> <span class="string">'https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.0-beta.7/vue.esm-browser.min.js'</span></span><br><span class="line">    <span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">        setup() &#123;</span><br><span class="line">            <span class="keyword">const</span> num = ref(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 新增生命週期</span></span><br><span class="line">            <span class="keyword">const</span> doubleNum = computed(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> num.value * <span class="number">2</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 需要回傳值，才能在 HTML 使用</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                num,</span><br><span class="line">                doubleNum,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    app.mount(<span class="string">'#app'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/LdFcJrh.gif" alt="computed"><br><em>畫面呈現</em></p><h2 id="reative-與-ref-的差別"><a href="#reative-與-ref-的差別" class="headerlink" title="reative 與 ref 的差別"></a>reative 與 ref 的差別</h2><p><img src="https://i.imgur.com/5TW4tz8.png" alt="ref &amp; reative"></p><h3 id="reative"><a href="#reative" class="headerlink" title="reative"></a>reative</h3><ul><li>非常標準的 Proxy 物件</li><li>限制只能放物件</li><li>覆蓋後會出現不可預期的錯誤</li></ul><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul><li>沒有任何型別的限制</li><li>會依據放入的型別，而有不同的調整</li><li>一定要使用<code>.value</code>取值</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/10/vue3-04/Composition_API.png&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="VueJS" scheme="hhttps://bryanhsiao.github.io/categories/VueJS/"/>
    
    <category term="Vue3" scheme="hhttps://bryanhsiao.github.io/categories/VueJS/Vue3/"/>
    
    
    <category term="VueJS" scheme="hhttps://bryanhsiao.github.io/tags/VueJS/"/>
    
    <category term="Vue3" scheme="hhttps://bryanhsiao.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>Options API</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/06/vue3-03/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/06/vue3-03/</id>
    <published>2021-08-06T15:59:14.000Z</published>
    <updated>2021-08-15T06:47:53.645Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/06/vue3-03/ogKK8jt.png"></p></blockquote><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 是由一堆 function 組成的物件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).mount(<span class="string">"#yourId"</span>);</span><br></pre></td></tr></table></figure><p>:::danger<br>:warning: 要記得加 <code>mount()</code> 才會掛載在畫面上！<br>:::</p><p>:::warning<br>生命週期函數在發生後就會被釋放<br>:::</p><h2 id="雙向綁定"><a href="#雙向綁定" class="headerlink" title="雙向綁定"></a>雙向綁定</h2><p><img src="https://i.imgur.com/ogKK8jt.png" alt></p><p>:::success</p><ul><li>只讀出渲染<br>:::<br>:::danger</li><li>可讀可寫<br>:::<br>:::info</li><li>利用事件觸發調整 data，再利用渲染方法渲染到畫面上<br>:::</li></ul><hr><h2 id="指令常見三大情境"><a href="#指令常見三大情境" class="headerlink" title="指令常見三大情境"></a>指令常見三大情境</h2><ul><li>透過指令，觸發特定事件<ul><li><code>@click=&quot;functionName()&quot;</code></li></ul></li><li>透過其他 Option API，觸發特定事件<ul><li><code>this.functionName()</code></li></ul></li><li>作為畫面上的資料運算 (俗稱 filter)<ul><li>新版的 Vue 沒有 <code>filter</code></li></ul></li></ul><h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- html --&gt;</span><br><span class="line">&#123;&#123;toCurrency(cash)&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    toCurrency(num) &#123;</span><br><span class="line">      <span class="comment">// 如何加入千分位</span></span><br><span class="line">      <span class="keyword">const</span> parts = num.toString().split(<span class="string">"."</span>);</span><br><span class="line">      parts[<span class="number">0</span>] = parts[<span class="number">0</span>].replace(<span class="regexp">/\B(?=\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">","</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`$<span class="subst">$&#123;parts.join(<span class="string">"."</span>)&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><ul><li>不修改原始數值的情況產生新值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    doubleNum() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.num * <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    filterData() &#123;</span><br><span class="line">      <span class="keyword">const</span> newData = <span class="keyword">this</span>.data.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// data 所選擇的性別 &amp; ajax 所取得的資料性別</span></span><br><span class="line">        <span class="keyword">return</span> item.gender === <span class="keyword">this</span>.genderFilter;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.genderFilter) <span class="keyword">return</span> <span class="keyword">this</span>.data;</span><br><span class="line">      <span class="keyword">return</span> newData;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// #1 如何新增資料</span></span><br><span class="line">    addItem() &#123;&#125;,</span><br><span class="line">    <span class="comment">// #2 如何移除資料</span></span><br><span class="line">    removeItem(item) &#123;</span><br><span class="line">      <span class="comment">// 1 陣列索引</span></span><br><span class="line">      <span class="comment">// 2 id</span></span><br><span class="line">      <span class="keyword">const</span> index = <span class="keyword">this</span>.data.filter(<span class="function"><span class="params">obj</span> =&gt;</span> obj.id === item.id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// #3 如何編輯資料</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// #4 如何避免雙向綁定</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="Methods-運用"><a href="#Methods-運用" class="headerlink" title="Methods 運用"></a>Methods 運用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CSS only --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">integrity</span>=<span class="string">"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3 mb-3"</span> <span class="attr">v-for</span>=<span class="string">"item in data"</span> <span class="attr">:key</span>=<span class="string">"item.cell"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.picture.large"</span> <span class="attr">class</span>=<span class="string">"card-img-top"</span> <span class="attr">alt</span>=<span class="string">"..."</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-body"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span>&#123;&#123; item.email &#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- #3 把 age * 100 當作金額吧（套用 toCurrency 的方法） --&gt;</span></span><br><span class="line">                &#123;&#123; toCurrency(item.dob.age * 100) &#125;&#125;</span><br><span class="line">                <span class="comment">&lt;!-- &#123;&#123; cash &#125;&#125; --&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Go somewhere<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">      dollarSign: &#123;&#123; num &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/vue/3.1.4/vue.global.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 當我們在 Vue 的</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 資料集</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            text: <span class="string">"我是卡斯伯"</span>,</span></span><br><span class="line"><span class="undefined">            num: 10000.01,</span></span><br><span class="line"><span class="undefined">            person: &#123;</span></span><br><span class="line"><span class="javascript">              name: <span class="string">"小明"</span>,</span></span><br><span class="line"><span class="undefined">              image:</span></span><br><span class="line"><span class="javascript">                <span class="string">"https://images.unsplash.com/photo-1593052393678-d1c690c76071?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=634&amp;q=80"</span>,</span></span><br><span class="line"><span class="undefined">              cash: 1000,</span></span><br><span class="line"><span class="javascript">              gender: <span class="string">"male"</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            data: []</span></span><br><span class="line"><span class="undefined">          &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">          getRandomUser() &#123;</span></span><br><span class="line"><span class="javascript">            axios.get(<span class="string">"https://randomuser.me/api/?results=10"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// #2 如何把資料加入至 data 內</span></span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(res);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.data = res.data.results;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="comment">// #3 如何加入千分號</span></span></span><br><span class="line"><span class="undefined">          toCurrency(num) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> parts = num.toString().split(<span class="string">"."</span>);</span></span><br><span class="line"><span class="javascript">            parts[<span class="number">0</span>] = parts[<span class="number">0</span>].replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">","</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">`$<span class="subst">$&#123;parts.join(<span class="string">"."</span>)&#125;</span>`</span>;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        mounted() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// #1 觸發取得遠端資料</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.getRandomUser();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="javascript">      app.mount(<span class="string">"#app"</span>);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Computed"><a href="#Computed" class="headerlink" title="Computed"></a>Computed</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">integrity</span>=<span class="string">"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"addNum"</span>&gt;</span>累加數值 &#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      computed: &#123;&#123; doubleNum &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-select mb-3"</span> <span class="attr">v-model</span>=<span class="string">"genderFilter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>請選擇<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span>男生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span>女生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3 mb-3"</span> <span class="attr">v-for</span>=<span class="string">"item in filterData"</span> <span class="attr">:key</span>=<span class="string">"item.cell"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.picture.large"</span> <span class="attr">class</span>=<span class="string">"card-img-top"</span> <span class="attr">alt</span>=<span class="string">"..."</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-body"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span>&#123;&#123; item.email &#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- #3 把 age * 100 當作金額吧（套用 toCurrency 的方法） --&gt;</span></span><br><span class="line">                &#123;&#123; item.dob.age * 100 &#125;&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Go somewhere<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/vue/3.1.4/vue.global.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 當我們在 Vue 的</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 資料集</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            text: <span class="string">"我是卡斯伯"</span>,</span></span><br><span class="line"><span class="undefined">            num: 1,</span></span><br><span class="line"><span class="undefined">            person: &#123;</span></span><br><span class="line"><span class="javascript">              name: <span class="string">"小明"</span>,</span></span><br><span class="line"><span class="undefined">              image:</span></span><br><span class="line"><span class="javascript">                <span class="string">"https://images.unsplash.com/photo-1593052393678-d1c690c76071?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=634&amp;q=80"</span>,</span></span><br><span class="line"><span class="undefined">              cash: 1000,</span></span><br><span class="line"><span class="javascript">              gender: <span class="string">"male"</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            data: [],</span></span><br><span class="line"><span class="javascript">            genderFilter: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">          &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">          addNum() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.num++;</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          getRandomUser() &#123;</span></span><br><span class="line"><span class="javascript">            axios.get(<span class="string">"https://randomuser.me/api/?results=10"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.data = res.data.results;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="keyword">this</span>.data);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        computed: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// computed 不會改動原始值</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// watch 類似 methods, 會更動原始值</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// “不修改原始數值” 的情況產生 “新值” （此值只為了渲染使用）</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// #1 雙倍運算 num</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// #2 過濾性別</span></span></span><br><span class="line"><span class="undefined">          doubleNum() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">this</span>.num * <span class="number">2</span>;</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 過濾列表</span></span></span><br><span class="line"><span class="undefined">          filterData() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> newData = <span class="keyword">this</span>.data.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// data 所選擇的性別 vs Ajax 所取得的資料性別</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> item.gender === <span class="keyword">this</span>.genderFilter; <span class="comment">// 判斷</span></span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (!<span class="keyword">this</span>.genderFilter) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> <span class="keyword">this</span>.data; <span class="comment">// 是否有被變更</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> newData;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        mounted() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.getRandomUser();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="javascript">      app.mount(<span class="string">"#app"</span>);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Todos"><a href="#Todos" class="headerlink" title="Todos"></a>Todos</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CSS only --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">integrity</span>=<span class="string">"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"addItem"</span>&gt;</span>增加文字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in data"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">          &#123;&#123; item.text &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"editItem(item)"</span>&gt;</span>編輯品項<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"removeItem(item)"</span>&gt;</span>移除品項<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"temp.text"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"doneEdit"</span>&gt;</span>編輯完成<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/vue/3.1.4/vue.global.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 當我們在 Vue 的</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> app = Vue.createApp(&#123;</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 資料集</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            text: <span class="string">"我是卡斯伯"</span>,</span></span><br><span class="line"><span class="undefined">            data: [],</span></span><br><span class="line"><span class="undefined">            temp: &#123;&#125;</span></span><br><span class="line"><span class="undefined">          &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// #1 如何新增資料</span></span></span><br><span class="line"><span class="undefined">          addItem() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.data.push(&#123;</span></span><br><span class="line"><span class="javascript">              id: <span class="keyword">this</span>.data.length + <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">              text: <span class="keyword">this</span>.text</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.text = <span class="string">""</span>;</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="comment">// #2 如何移除資料</span></span></span><br><span class="line"><span class="undefined">          removeItem(item) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1 陣列索引</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2 id</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> index = <span class="keyword">this</span>.data.findIndex(<span class="function"><span class="params">obj</span> =&gt;</span> obj.id === item.id);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(index);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.data.splice(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="comment">// #3 如何編輯資料</span></span></span><br><span class="line"><span class="undefined">          editItem(item) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.temp = &#123; ...item &#125;; <span class="comment">// ES6</span></span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="comment">// #4 把資料寫回</span></span></span><br><span class="line"><span class="undefined">          doneEdit() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> index = <span class="keyword">this</span>.data.findIndex(<span class="function"><span class="params">obj</span> =&gt;</span> obj.id === <span class="keyword">this</span>.temp.id);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 把資料寫回索引</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.data[index] = <span class="keyword">this</span>.temp;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// this.temp 清空</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.temp = &#123;&#125;;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="javascript">      app.mount(<span class="string">"#app"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// Vue 2</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/06/vue3-03/ogKK8jt.png&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="VueJS" scheme="hhttps://bryanhsiao.github.io/categories/VueJS/"/>
    
    <category term="Vue3" scheme="hhttps://bryanhsiao.github.io/categories/VueJS/Vue3/"/>
    
    
    <category term="VueJS" scheme="hhttps://bryanhsiao.github.io/tags/VueJS/"/>
    
    <category term="Vue3" scheme="hhttps://bryanhsiao.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>Vue 與 指令</title>
    <link href="hhttps://bryanhsiao.github.io/2021/07/23/vue3-02/"/>
    <id>hhttps://bryanhsiao.github.io/2021/07/23/vue3-02/</id>
    <published>2021-07-23T14:15:14.000Z</published>
    <updated>2021-08-15T06:48:03.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/07/23/vue3-02/vue-02.png"></p><font style="font-size:20px;"></font></blockquote><a id="more"></a><h2 id="Vue-常用指令"><a href="#Vue-常用指令" class="headerlink" title="Vue 常用指令"></a>Vue 常用指令</h2><h3 id="v-model-修飾符"><a href="#v-model-修飾符" class="headerlink" title="v-model 修飾符"></a>v-model 修飾符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model.number=&quot;number&quot; &gt;</span><br><span class="line">  &#123;&#123; number &#125;&#125;</span><br><span class="line">  &#123;&#123; typeof number &#125;&#125;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;number2&quot;&gt;</span><br><span class="line">  &#123;&#123; number2 &#125;&#125;</span><br><span class="line">  &#123;&#123; typeof number2 &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>lazy：編輯完成後，會觸發更新資料（離開 focus 的時候）</li><li>number：限制只有數值型別的資料才能寫入<br><code>v-model</code> 預設是字串型別</li><li>trim：去除字串前後多於的空白</li></ul><h3 id="v-on：事件觸發器"><a href="#v-on：事件觸發器" class="headerlink" title="v-on：事件觸發器"></a>v-on：事件觸發器</h3><blockquote><p>最常用：prevent（去除預設事件）</p></blockquote><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><blockquote><p>縮寫：<code>：</code></p></blockquote><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><blockquote><p>key 唯一且必填</p></blockquote><p>當 input 輸入內容後，按下反轉陣列時：</p><ul><li>如果沒有 key 時，則 input 位置不會被同時更動</li><li>當有加上 key 時，input 位置會與原本的資料內容位置一起變動</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;h4&gt;缺少 key&lt;/h4&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(item, key) in arrayData&quot;&gt;</span><br><span class="line">      &#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲 &lt;input type=&quot;text&quot; /&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h4&gt;加上 key&lt;/h4&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(item, key) in arrayData&quot; :key=&quot;item.age&quot;&gt;</span><br><span class="line">      &#123;&#123; key &#125;&#125; - &#123;&#123; item.name &#125;&#125; &#123;&#123; item.age &#125;&#125; 歲 &lt;input type=&quot;text&quot; /&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;button class=&quot;btn btn-outline-primary&quot; @click=&quot;reverseArray&quot;&gt;</span><br><span class="line">    反轉陣列</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      arrayData: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"Bryan"</span>,</span><br><span class="line">          age: <span class="number">35</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"Coco"</span>,</span><br><span class="line">          age: <span class="number">40</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"Den"</span>,</span><br><span class="line">          age: <span class="number">41</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reverseArray: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.arrayData.reverse();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.arrayData);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vue.createApp(app).mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure><img src="/2021/07/23/vue3-02/Document-3.png"><img src="/2021/07/23/vue3-02/Document-2.png"><h3 id="v-class"><a href="#v-class" class="headerlink" title="v-class"></a>v-class</h3><blockquote><p>範例一 按鈕樣式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;button</span><br><span class="line">  type=&quot;button&quot;</span><br><span class="line">  class=&quot;btn btn-outline-primary&quot;</span><br><span class="line">  :class=&quot;&#123;active: isActive&#125;&quot;</span><br><span class="line">  @click=&quot;isActive = !isActive&quot;</span><br><span class="line">&gt;</span><br><span class="line">  Primary</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isActive: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vue.createApp(app).mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>範例二 頁籤切換</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;ul class=&quot;nav nav-tabs&quot; id=&quot;myTab&quot; role=&quot;tablist&quot;&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot; role=&quot;presentation&quot;&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        class=&quot;nav-link&quot;</span><br><span class="line">        :class=&quot;&#123;active: isActive === &apos;Home&apos;&#125;&quot;</span><br><span class="line">        @click=&quot;isActive = &apos;Home&apos;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        Home</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot; role=&quot;presentation&quot;&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        class=&quot;nav-link&quot;</span><br><span class="line">        :class=&quot;&#123;active: isActive === &apos;Profile&apos;&#125;&quot;</span><br><span class="line">        @click=&quot;isActive = &apos;Profile&apos;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        Profile</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;nav-item&quot; role=&quot;presentation&quot;&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        class=&quot;nav-link&quot;</span><br><span class="line">        :class=&quot;&#123;active: isActive === &apos;Casper&apos;&#125;&quot;</span><br><span class="line">        @click=&quot;isActive = &apos;Casper&apos;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        Casper</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;div class=&quot;tab-content&quot; id=&quot;myTabContent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;tab-pane&quot; :class=&quot;&#123;active: isActive === &apos;Home&apos;&#125;&quot;&gt;Home&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;tab-pane&quot; :class=&quot;&#123;active: isActive === &apos;Profile&apos;&#125;&quot;&gt;</span><br><span class="line">      Profile</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;tab-pane&quot; :class=&quot;&#123;active: isActive === &apos;Casper&apos;&#125;&quot;&gt;</span><br><span class="line">      Casper</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isActive: <span class="string">""</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Vue.createApp(app).mount(<span class="string">"#app"</span>);</span><br></pre></td></tr></table></figure><h2 id="雙向綁定"><a href="#雙向綁定" class="headerlink" title="雙向綁定"></a>雙向綁定</h2><img src="/2021/07/23/vue3-02/vue-02.png"><div class="note success">只讀出渲染</div><div class="note danger">可讀可寫</div><div class="note info">利用事件觸發調整 data，再利用渲染方法渲染到畫面上</div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/07/23/vue3-02/vue-02.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="VueJS" scheme="hhttps://bryanhsiao.github.io/categories/VueJS/"/>
    
    <category term="Vue3" scheme="hhttps://bryanhsiao.github.io/categories/VueJS/Vue3/"/>
    
    
    <category term="VueJS" scheme="hhttps://bryanhsiao.github.io/tags/VueJS/"/>
    
    <category term="Vue3" scheme="hhttps://bryanhsiao.github.io/tags/Vue3/"/>
    
  </entry>
  
</feed>
