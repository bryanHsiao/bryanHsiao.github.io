<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bryan&#39;s Notes</title>
  
  <subtitle>學習筆記</subtitle>
  <link href="hhttps://bryanhsiao.github.io/atom.xml" rel="self"/>
  
  <link href="hhttps://bryanhsiao.github.io/"/>
  <updated>2021-10-12T18:35:34.594Z</updated>
  <id>hhttps://bryanhsiao.github.io/</id>
  
  <author>
    <name>Bryan Hsiao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS30-04-Array-Cardio-Day-1</title>
    <link href="hhttps://bryanhsiao.github.io/2021/10/13/JS30-04-Array-Cardio-Day-1/"/>
    <id>hhttps://bryanhsiao.github.io/2021/10/13/JS30-04-Array-Cardio-Day-1/</id>
    <published>2021-10-12T18:34:30.000Z</published>
    <updated>2021-10-12T18:35:34.594Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/10/13/JS30-04-Array-Cardio-Day-1/arraymethod.jpg"></p><font style="font-size:20px;">練習運用 <font color="red">Array</font> 的各種函式</font></blockquote><a id="more"></a><hr><h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><ul><li>共提供四組資料<ul><li>inventors：first(名)、last(姓) 、year(出生日期)、passed(死亡日期)</li><li>wiki 網站的 html ：<a href="https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris" target="_blank" rel="noopener">網址連結</a></li><li>people：逗點分隔的姓名(firstName, lastName)</li><li>data：提供的一組包含重覆資料的陣列</li></ul></li><li>根據不同需求條件篩選出正確的資料</li></ul><h2 id="練習題目"><a href="#練習題目" class="headerlink" title="練習題目"></a>練習題目</h2><p>inventors 的資料：</p><ol><li>篩選出於 1500~1599 年間出生的 inventor (year in 1500-1599)</li><li>將 inventors 的 firstname 與 lastname 組合成一個陣列</li><li>將 inventors 依據「生日」由大至小排序</li><li>加總所有 inventor 的年齡</li><li>將 inventors 依據「年齡」由大至小排序</li></ol><p>wiki 網站的 html：<a href="https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris" target="_blank" rel="noopener">網址連結</a></p><ol start="6"><li>列出 wiki 中巴黎所有包含’de’的路名</li></ol><p>people 的資料：</p><ol start="7"><li>依據 lastName 排序所有 people 的資料</li></ol><p>data 的資料：</p><ol start="8"><li>分別計算 data 內每個種類的數量</li></ol><h2 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h2><blockquote><p><a href="https://kanboo.github.io/JavaScript30/04%20-%20Array%20Cardio%20Day%201/" target="_blank" rel="noopener">[DEMO]</a> | <a href="https://github.com/kanboo/JavaScript30/blob/master/04%20-%20Array%20Cardio%20Day%201/index.html" target="_blank" rel="noopener">[GitHub]</a></p></blockquote><hr><h2 id="inventors-題目"><a href="#inventors-題目" class="headerlink" title="inventors 題目"></a>inventors 題目</h2><figure class="highlight js"><figcaption><span>inventors資料</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inventors = [</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">"Albert"</span>, <span class="attr">last</span>: <span class="string">"Einstein"</span>, <span class="attr">year</span>: <span class="number">1879</span>, <span class="attr">passed</span>: <span class="number">1955</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">"Isaac"</span>, <span class="attr">last</span>: <span class="string">"Newton"</span>, <span class="attr">year</span>: <span class="number">1643</span>, <span class="attr">passed</span>: <span class="number">1727</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">"Galileo"</span>, <span class="attr">last</span>: <span class="string">"Galilei"</span>, <span class="attr">year</span>: <span class="number">1564</span>, <span class="attr">passed</span>: <span class="number">1642</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">"Marie"</span>, <span class="attr">last</span>: <span class="string">"Curie"</span>, <span class="attr">year</span>: <span class="number">1867</span>, <span class="attr">passed</span>: <span class="number">1934</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">"Johannes"</span>, <span class="attr">last</span>: <span class="string">"Kepler"</span>, <span class="attr">year</span>: <span class="number">1571</span>, <span class="attr">passed</span>: <span class="number">1630</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">"Nicolaus"</span>, <span class="attr">last</span>: <span class="string">"Copernicus"</span>, <span class="attr">year</span>: <span class="number">1473</span>, <span class="attr">passed</span>: <span class="number">1543</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">"Max"</span>, <span class="attr">last</span>: <span class="string">"Planck"</span>, <span class="attr">year</span>: <span class="number">1858</span>, <span class="attr">passed</span>: <span class="number">1947</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">"Katherine"</span>, <span class="attr">last</span>: <span class="string">"Blodgett"</span>, <span class="attr">year</span>: <span class="number">1898</span>, <span class="attr">passed</span>: <span class="number">1979</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">"Ada"</span>, <span class="attr">last</span>: <span class="string">"Lovelace"</span>, <span class="attr">year</span>: <span class="number">1815</span>, <span class="attr">passed</span>: <span class="number">1852</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">"Sarah E."</span>, <span class="attr">last</span>: <span class="string">"Goode"</span>, <span class="attr">year</span>: <span class="number">1855</span>, <span class="attr">passed</span>: <span class="number">1905</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">"Lise"</span>, <span class="attr">last</span>: <span class="string">"Meitner"</span>, <span class="attr">year</span>: <span class="number">1878</span>, <span class="attr">passed</span>: <span class="number">1968</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">"Hanna"</span>, <span class="attr">last</span>: <span class="string">"Hammarström"</span>, <span class="attr">year</span>: <span class="number">1829</span>, <span class="attr">passed</span>: <span class="number">1909</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><span id="inline-toc">Q：</span>篩選出於 1500~1599 年間出生的 inventor (year in 1500-1599)</p><p><span id="inline-toc">A：</span>透過 filter 篩選出符合條件的資料，最終回傳一個新陣列</p><figure class="highlight js"><figcaption><span>filter</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.prototype.filter()</span></span><br><span class="line"><span class="comment">// 1. Filter the list of inventors for those who were born in the 1500's</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解法 */</span></span><br><span class="line"><span class="keyword">const</span> bornArr = inventors.filter(<span class="function"><span class="keyword">function</span>(<span class="params">inventor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (inventor.year &gt;= <span class="number">1500</span> &amp;&amp; inventor.year &lt; <span class="number">1600</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 簡化語法 */</span></span><br><span class="line"><span class="keyword">const</span> bornArr = inventors.filter(</span><br><span class="line">  inventor =&gt; inventor.year &gt;= <span class="number">1500</span> &amp;&amp; inventor.year &lt; <span class="number">1600</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table(bornArr);</span><br></pre></td></tr></table></figure><p><span id="inline-toc">Q：</span>將 inventors 的 firstname 與 lastname 組合成一個陣列</p><p><span id="inline-toc">A：</span>透過 map 將原始資料加工後，最終回傳一個新陣列</p><figure class="highlight js"><figcaption><span>map</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.prototype.map()</span></span><br><span class="line"><span class="comment">// 2. Give us an array of the inventors' first and last names</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解法 */</span></span><br><span class="line"><span class="keyword">const</span> newInventors = inventors.map(<span class="function"><span class="keyword">function</span>(<span class="params">inventor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> inventor.first + <span class="string">" "</span> + inventor.last;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 簡化語法 */</span></span><br><span class="line"><span class="keyword">const</span> newInventors = inventors.map(</span><br><span class="line">  inventor =&gt; inventor.first + <span class="string">" "</span> + inventor.last</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 簡化語法(Template String) */</span></span><br><span class="line"><span class="keyword">const</span> newInventors = inventors.map(</span><br><span class="line">  inventor =&gt; <span class="string">`<span class="subst">$&#123;inventor.first&#125;</span> <span class="subst">$&#123;inventor.last&#125;</span>`</span></span><br><span class="line">); <span class="comment">//Template String</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newInventors);</span><br></pre></td></tr></table></figure><p><span id="inline-toc">Q：</span>將 inventors 依據「生日」由大至小排序</p><p><span id="inline-toc">A：</span> 依照「生日」大小重新排序(return 值： -1 排前面 , 1 排後面)</p><figure class="highlight js"><figcaption><span>sort</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.prototype.sort()</span></span><br><span class="line"><span class="comment">// 3. Sort the inventors by birthdate, oldest to youngest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解法 */</span></span><br><span class="line"><span class="keyword">const</span> sortInventors = inventors.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a.year &gt; b.year) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 簡化語法 */</span></span><br><span class="line"><span class="keyword">const</span> sortInventors = inventors.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (a.year &gt; b.year ? <span class="number">1</span> : <span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table(sortInventors);</span><br></pre></td></tr></table></figure><p><span id="inline-toc">Q：</span>加總所有 inventor 的年齡</p><p><span id="inline-toc">A：</span> 籍由 reduce 加總所有的年齡</p><figure class="highlight js"><figcaption><span>reduce</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.prototype.reduce()</span></span><br><span class="line"><span class="comment">// 4. How many years did all the inventors live?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解法 */</span></span><br><span class="line"><span class="keyword">const</span> totalYears = inventors.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total, inventor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> total + (inventor.passed - inventor.year);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 簡化語法 */</span></span><br><span class="line"><span class="keyword">const</span> totalYears = inventors.reduce(</span><br><span class="line">  (total, inventor) =&gt; total + (inventor.passed - inventor.year),</span><br><span class="line">  <span class="number">0</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(totalYears);</span><br></pre></td></tr></table></figure><p><span id="inline-toc">Q：</span>將 inventors 依據「年齡」由大至小排序</p><p><span id="inline-toc">A：</span>依照「年齡」大小重新排序(return 值： -1 排前面 , 1 排後面)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5. Sort the inventors by years lived</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解法 */</span></span><br><span class="line"><span class="keyword">const</span> sortYearsLived = inventors.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> aYearCount = a.passed - a.year;</span><br><span class="line">  <span class="keyword">const</span> bYearCount = b.passed - b.year;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (aYearCount &gt; bYearCount) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 簡化語法 */</span></span><br><span class="line"><span class="keyword">const</span> sortYearsLived = inventors.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> aYearCount = a.passed - a.year;</span><br><span class="line">  <span class="keyword">const</span> bYearCount = b.passed - b.year;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 三元運算子</span></span><br><span class="line">  <span class="keyword">return</span> aYearCount &gt; bYearCount ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table(sortYearsLived);</span><br></pre></td></tr></table></figure><hr><h2 id="wiki-html-題目"><a href="#wiki-html-題目" class="headerlink" title="wiki-html 題目"></a>wiki-html 題目</h2><p><span id="inline-toc">Q：</span>列出 wiki 中巴黎所有包含’de’的路名</p><p><span id="inline-toc">A：</span>練習 展開運算子(Spread Operator)、map()、filter()、includes() 搭配使用</p><figure class="highlight js"><figcaption><span>method組合運用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 6. create a list of Boulevards in Paris that contain 'de' anywhere in the name</span></span><br><span class="line"><span class="comment">// https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解法 */</span></span><br><span class="line"><span class="keyword">const</span> category = <span class="built_in">document</span>.querySelector(<span class="string">".mw-category"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//將 nodeList 轉為 Array型態</span></span><br><span class="line"><span class="keyword">const</span> Links = [...category.querySelectorAll(<span class="string">"a"</span>)]; <span class="comment">//展開運算子(Spread Operator)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以執行完 map 後，緊接著執行 filter</span></span><br><span class="line"><span class="keyword">const</span> de = Links.map(<span class="function"><span class="params">link</span> =&gt;</span> link.textContent).filter(<span class="function"><span class="params">tName</span> =&gt;</span></span><br><span class="line">  tName.includes(<span class="string">"de"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(de);</span><br></pre></td></tr></table></figure><hr><h2 id="people-題目"><a href="#people-題目" class="headerlink" title="people 題目"></a>people 題目</h2><p><span id="inline-toc">Q：</span>依據 lastName 排序所有 people 的資料</p><p><span id="inline-toc">A：</span>練習 解構賦值(Destructuring Assignment)、sort() 運用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 7. sort Exercise</span></span><br><span class="line"><span class="comment">// Sort the people alphabetically by last name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  <span class="string">"Beck, Glenn"</span>,</span><br><span class="line">  <span class="string">"Becker, Carl"</span>,</span><br><span class="line">  <span class="string">"Beckett, Samuel"</span>,</span><br><span class="line">  <span class="string">"Beddoes, Mick"</span>,</span><br><span class="line">  <span class="string">"Beecher, Henry"</span>,</span><br><span class="line">  <span class="string">"Beethoven, Ludwig"</span>,</span><br><span class="line">  <span class="string">"Begin, Menachem"</span>,</span><br><span class="line">  <span class="string">"Belloc, Hilaire"</span>,</span><br><span class="line">  <span class="string">"Bellow, Saul"</span>,</span><br><span class="line">  <span class="string">"Benchley, Robert"</span>,</span><br><span class="line">  <span class="string">"Benenson, Peter"</span>,</span><br><span class="line">  <span class="string">"Ben-Gurion, David"</span>,</span><br><span class="line">  <span class="string">"Benjamin, Walter"</span>,</span><br><span class="line">  <span class="string">"Benn, Tony"</span>,</span><br><span class="line">  <span class="string">"Bennington, Chester"</span>,</span><br><span class="line">  <span class="string">"Benson, Leana"</span>,</span><br><span class="line">  <span class="string">"Bent, Silas"</span>,</span><br><span class="line">  <span class="string">"Bentsen, Lloyd"</span>,</span><br><span class="line">  <span class="string">"Berger, Ric"</span>,</span><br><span class="line">  <span class="string">"Bergman, Ingmar"</span>,</span><br><span class="line">  <span class="string">"Berio, Luciano"</span>,</span><br><span class="line">  <span class="string">"Berle, Milton"</span>,</span><br><span class="line">  <span class="string">"Berlin, Irving"</span>,</span><br><span class="line">  <span class="string">"Berne, Eric"</span>,</span><br><span class="line">  <span class="string">"Bernhard, Sandra"</span>,</span><br><span class="line">  <span class="string">"Berra, Yogi"</span>,</span><br><span class="line">  <span class="string">"Berry, Halle"</span>,</span><br><span class="line">  <span class="string">"Berry, Wendell"</span>,</span><br><span class="line">  <span class="string">"Bethea, Erin"</span>,</span><br><span class="line">  <span class="string">"Bevan, Aneurin"</span>,</span><br><span class="line">  <span class="string">"Bevel, Ken"</span>,</span><br><span class="line">  <span class="string">"Biden, Joseph"</span>,</span><br><span class="line">  <span class="string">"Bierce, Ambrose"</span>,</span><br><span class="line">  <span class="string">"Biko, Steve"</span>,</span><br><span class="line">  <span class="string">"Billings, Josh"</span>,</span><br><span class="line">  <span class="string">"Biondo, Frank"</span>,</span><br><span class="line">  <span class="string">"Birrell, Augustine"</span>,</span><br><span class="line">  <span class="string">"Black, Elk"</span>,</span><br><span class="line">  <span class="string">"Blair, Robert"</span>,</span><br><span class="line">  <span class="string">"Blair, Tony"</span>,</span><br><span class="line">  <span class="string">"Blake, William"</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解法 */</span></span><br><span class="line"><span class="keyword">const</span> sortPeople = people.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [aLast, aFirst] = a.split(<span class="string">", "</span>); <span class="comment">//解構賦值(Destructuring Assignment)</span></span><br><span class="line">  <span class="keyword">const</span> [bLast, bFirst] = b.split(<span class="string">", "</span>); <span class="comment">//解構賦值(Destructuring Assignment)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (aLast &gt; bLast) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 簡化語法 */</span></span><br><span class="line"><span class="keyword">const</span> sortPeople = people.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [aLast, aFirst] = a.split(<span class="string">", "</span>);</span><br><span class="line">  <span class="keyword">const</span> [bLast, bFirst] = b.split(<span class="string">", "</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 三元運算子</span></span><br><span class="line">  <span class="keyword">return</span> aLast &gt; bLast ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sortPeople);</span><br></pre></td></tr></table></figure><hr><h2 id="data-題目"><a href="#data-題目" class="headerlink" title="data 題目"></a>data 題目</h2><p><span id="inline-toc">Q：</span>分別計算 data 內每個種類的數量</p><p><span id="inline-toc">A：</span>練習 reduce() 運用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 8. Reduce Exercise</span></span><br><span class="line"><span class="comment">// Sum up the instances of each of these</span></span><br><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  <span class="string">"car"</span>,</span><br><span class="line">  <span class="string">"car"</span>,</span><br><span class="line">  <span class="string">"truck"</span>,</span><br><span class="line">  <span class="string">"truck"</span>,</span><br><span class="line">  <span class="string">"bike"</span>,</span><br><span class="line">  <span class="string">"walk"</span>,</span><br><span class="line">  <span class="string">"car"</span>,</span><br><span class="line">  <span class="string">"van"</span>,</span><br><span class="line">  <span class="string">"bike"</span>,</span><br><span class="line">  <span class="string">"walk"</span>,</span><br><span class="line">  <span class="string">"car"</span>,</span><br><span class="line">  <span class="string">"van"</span>,</span><br><span class="line">  <span class="string">"car"</span>,</span><br><span class="line">  <span class="string">"truck"</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解法 */</span></span><br><span class="line"><span class="keyword">const</span> dataCount = data.reduce(<span class="function">(<span class="params">counts, item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!counts[item]) &#123;</span><br><span class="line">    counts[item] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  counts[item] += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> counts;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dataCount);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/10/13/JS30-04-Array-Cardio-Day-1/arraymethod.jpg&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;練習運用 &lt;font color=&quot;red&quot;&gt;Array&lt;/font&gt; 的各種函式&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    <category term="JS30" scheme="hhttps://bryanhsiao.github.io/categories/JS/JS30/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="JS30" scheme="hhttps://bryanhsiao.github.io/tags/JS30/"/>
    
  </entry>
  
  <entry>
    <title>JS30-02-JS-and-CSS-Clock</title>
    <link href="hhttps://bryanhsiao.github.io/2021/09/25/JS30-02-JS-and-CSS-Clock/"/>
    <id>hhttps://bryanhsiao.github.io/2021/09/25/JS30-02-JS-and-CSS-Clock/</id>
    <published>2021-09-25T15:50:24.000Z</published>
    <updated>2021-09-25T15:52:25.175Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/09/25/JS30-02-JS-and-CSS-Clock/JS_CSS_Clock.png"></p><font style="font-size:20px;">利用 JS 與 CSS 搭配作出時鐘效果</font></blockquote><a id="more"></a><hr><h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><ul><li>顯示目前時間</li><li>利用 JS 與 CSS 搭配作出時鐘效果</li></ul><h2 id="實踐步驟"><a href="#實踐步驟" class="headerlink" title="實踐步驟"></a>實踐步驟</h2><ol><li><p>先調整時鐘的 CSS 樣式</p><p>修改前：</p><img src="/2021/09/25/JS30-02-JS-and-CSS-Clock/JS_CSS_Clock_01.png"><p>新增 CSS 修改語法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(90<span class="selector-tag">deg</span>); <span class="comment">/* 將 時、分、秒針 從 45分 旋轉至 12點 方向 */</span></span><br><span class="line"><span class="selector-tag">transform-origin</span>: 100% 50%; <span class="comment">/* 將旋轉的原點移位 */</span></span><br><span class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.05s</span> <span class="selector-tag">cubic-bezier</span>(0, 2<span class="selector-class">.95</span>, 1, 1); <span class="comment">/* 讓秒針有跳動的效果 */</span></span><br><span class="line"><span class="selector-tag">border-radius</span>: 50%; <span class="comment">/* 原先是 長方形 ，修改成 圓角 ，比較像 時針 */</span></span><br></pre></td></tr></table></figure><p>修改後：</p><img src="/2021/09/25/JS30-02-JS-and-CSS-Clock/JS_CSS_Clock_02.png"></li><li><p>取得目前時間，並每秒更新一次</p><ul><li>利用 <code>setInterval(setDate, 1000)</code> 每秒更新</li><li>使用 <code>new Date()</code> 取得目前 時、分、秒</li></ul></li><li><p>一個圓共 <code>360deg</code>，分別依照 時、分、秒 計算出各自的角度</p><ul><li>秒針：(360 / 60) * seconds + 90</li><li>分針：(360 / 60) * seconds + 90</li><li>時針：(360 / 12) * seconds + 90</li><li>補充說明：最後有加 90 是因原先都指向 45 分的位置，為了指向 12 點方向，所以有先用 CSS 旋轉 90 度 <code>rotate(90deg)</code>。</li></ul></li><li><p>最後用 JS 透過 <code>element.style</code> 修改 時、分、秒 的角度</p><ul><li><code>element.style.tranform = &quot;roate( 角度 )&quot;</code></li></ul></li></ol><hr><h2 id="JS-學習紀錄"><a href="#JS-學習紀錄" class="headerlink" title="JS 學習紀錄"></a>JS 學習紀錄</h2><h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h3><p>如果需要一直持續循環作動，使用 <code>setInterval</code>，例如網頁上每一秒鐘就更新一次時間。</p><p>語法：<code>setInterval(callback, time)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每秒刷新時間</span></span><br><span class="line">setInterval(setDate, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="Date"><a href="#Date" class="headerlink" title="Date()"></a>Date()</h3><p>取得時間的函數</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nowDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">nowDate.getSeconds(); <span class="comment">//取得當前秒</span></span><br><span class="line">nowDate.getMinutes(); <span class="comment">//取得當前分鐘</span></span><br><span class="line">nowDate.getHours(); <span class="comment">//取得當前小時</span></span><br></pre></td></tr></table></figure><hr><h3 id="element-style"><a href="#element-style" class="headerlink" title="element.style"></a>element.style</h3><p>一開始想說要改 CSS 屬性，就很直覺的使用 <code>第一種</code> 方法，學習過程中，得知 <code>第二種</code> 方法也行。</p><figure class="highlight js"><figcaption><span>修改CSS：第一種</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secondHand.setAttribute(<span class="string">"style"</span>, <span class="string">`transform: rotate(<span class="subst">$&#123;secondDegrees&#125;</span>deg)`</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>修改CSS：第二種</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secondHand.style.transform = <span class="string">`rotate(<span class="subst">$&#123;secondDegrees&#125;</span>deg)`</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="延伸：transform-rotate-的彈跳問題"><a href="#延伸：transform-rotate-的彈跳問題" class="headerlink" title="延伸：transform:rotate 的彈跳問題"></a>延伸：transform:rotate 的彈跳問題</h2><p>當秒針旋轉一圈之後，要開始旋轉第二圈時，角度的計算變化會是 444°→90°→96°，重點就在 444° 變成 90° 時，本來 rotate 都是順時針旋轉，但 444°→90° 那一瞬間會是 逆時針 轉回去，而造成秒針跳動有點怪異，所以解決方式如下</p><p>在角度計算 444°→90° 重新循環時，將 <code>transition</code> 屬性關掉，由於距離短，時間短，將逆時針迴旋的過程瞬間完成。</p><figure class="highlight js"><figcaption><span>修正秒針跳動的效果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nowDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//秒針</span></span><br><span class="line"><span class="keyword">const</span> seconds = nowDate.getSeconds();</span><br><span class="line"><span class="keyword">const</span> secondDegrees = (<span class="number">360</span> / <span class="number">60</span>) * seconds + <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修正秒針跳動的效果</span></span><br><span class="line"><span class="keyword">if</span> (secondDegrees === <span class="number">90</span>) &#123;</span><br><span class="line">  secondHand.style.transition = <span class="string">"all 0s"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  secondHand.style.transition = <span class="string">"all 0.05s cubic-bezier(0, 2.95, 1, 1)"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">secondHand.style.transform = <span class="string">`rotate(<span class="subst">$&#123;secondDegrees&#125;</span>deg)`</span>;</span><br></pre></td></tr></table></figure><div class="note info">延伸問題參考：<a href="https://github.com/soyaine/JavaScript30/tree/master/02%20-%20JS%20%2B%20CSS%20Clock" target="_blank" rel="noopener">soyaine</a>、<a href="https://guahsu.io/2017/05/JavaScript30-02-JS-and-CSS-Clock/" target="_blank" rel="noopener">GuaHsu</a></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/09/25/JS30-02-JS-and-CSS-Clock/JS_CSS_Clock.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;利用 JS 與 CSS 搭配作出時鐘效果&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    <category term="JS30" scheme="hhttps://bryanhsiao.github.io/categories/JS/JS30/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="JS30" scheme="hhttps://bryanhsiao.github.io/tags/JS30/"/>
    
  </entry>
  
  <entry>
    <title>JS30-03-CSS-Variables</title>
    <link href="hhttps://bryanhsiao.github.io/2021/09/23/JS30-03-CSS-Variables/"/>
    <id>hhttps://bryanhsiao.github.io/2021/09/23/JS30-03-CSS-Variables/</id>
    <published>2021-09-23T15:20:03.000Z</published>
    <updated>2021-10-12T18:30:46.974Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/09/23/JS30-03-CSS-Variables/Scoped_CSS_Variables_and_JS.png"></p><font style="font-size:20px;">利用 <font color="red">CSS 變數</font> 與 <font color="red">JS</font> 即時更新圖片的 內距、邊框色、模糊 效果</font></blockquote><a id="more"></a><hr><h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><ul><li>使用 CSS 變數 功能</li><li>透過 JS 更改 CSS 變數值，達到即時更新 內距、邊框色、模糊 的效果</li></ul><h2 id="實踐步驟"><a href="#實踐步驟" class="headerlink" title="實踐步驟"></a>實踐步驟</h2><ol><li><p>在 CSS 的 :root 宣告 CSS 變數</p><ul><li>宣告方法：使用兩個<code>-</code>符號，代表「變數」，如：--spacing</li><li>使用方法：使用 var()代表「使用變數」，如：var(--spacing)</li></ul></li><li><p>分別監聽(change、mousemove)三個 input 的值</p><ul><li>利用 <code>dataset</code> 取得自定義的資料，如：this.dataset.sizing</li><li>透過 <code>document.documentElement.style.setProperty(&#39;--base&#39;, &#39;#fff&#39;);</code> 更改 CSS 的變數</li></ul></li></ol><h2 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h2><p></p><p class="codepen" data-height="500" data-theme-id="dark" data-slug-hash="YzQMLyb" data-user="bryan-hsaio" style="height: 50px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"><br>  <span>See the Pen <a href="https://codepen.io/bryan-hsaio/pen/YzQMLyb" target="_blank" rel="noopener"><br>  JS30-Scoped CSS Variables and JS</a> by Bryan Hsaio (<a href="https://codepen.io/bryan-hsaio" target="_blank" rel="noopener">@bryan-hsaio</a>)<br>  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span><br></p><p></p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script><h2 id="CSS-學習紀錄"><a href="#CSS-學習紀錄" class="headerlink" title="CSS 學習紀錄"></a>CSS 學習紀錄</h2><p>使用 CSS 的變數 功能，不過在 <a href="https://caniuse.com/#feat=css-variables" target="_blank" rel="noopener">IE</a> 上，好像還不支援。</p><figure class="highlight css"><figcaption><span>CSS變數說明</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在CSS 的 :root(全局)設定 變數 */</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--base</span>: <span class="number">#ffc600</span>;</span><br><span class="line">  <span class="attribute">--spacing</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">--blur</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用CSS變數方法：var(變數名稱) */</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="built_in">var</span>(--spacing);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--base);</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(var(--blur)); <span class="comment">/* CSS濾鏡效果：模糊 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hl</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--base);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="root-偽元素-全局"><a href="#root-偽元素-全局" class="headerlink" title=":root 偽元素(全局)"></a>:root 偽元素(全局)</h3><p><code>:root</code> 這個偽元素是文檔的根元素，等同於 <code>&lt;html&gt;</code> 標籤，所以常用於聲明<font color="red">全局</font>的 CSS 變量：</p><figure class="highlight css"><figcaption><span>設定變數(全局)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">：<span class="selector-tag">root</span> &#123;</span><br><span class="line">   --color：#fff ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 CSS style 要使用時，用 <code>var(變數名稱)</code>，如下：</p><figure class="highlight css"><figcaption><span>在CSS使用變數</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">   background： var(--color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若是要在 JS 使用的話，語法如下：</p><figure class="highlight js"><figcaption><span>用JS更改CSS變數</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ：root = 文檔的根元素 = &lt;html&gt; = document.documentElement</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.style.setProperty(<span class="string">"--color"</span>, <span class="string">"#000"</span>);</span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables" target="_blank" rel="noopener">CSS Variables</a></div><hr><h3 id="filter-濾鏡"><a href="#filter-濾鏡" class="headerlink" title="filter 濾鏡"></a>filter 濾鏡</h3><p>CSS3 的濾鏡功能，其中 <code>blur</code> 是高斯模糊，參數越高越模糊</p><div class="note info"><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/filter" target="_blank" rel="noopener">MDN-filter</a></div><hr><h2 id="JS-學習紀錄"><a href="#JS-學習紀錄" class="headerlink" title="JS 學習紀錄"></a>JS 學習紀錄</h2><h3 id="dataset"><a href="#dataset" class="headerlink" title="dataset"></a>dataset</h3><p>利用 <code>dataset</code> 可取得自定義的資料，另外也可使用 <code>getAttribute</code> 取得資料。</p><figure class="highlight html"><figcaption><span>HTML</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"blur"</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">name</span>=<span class="string">"blur"</span> <span class="attr">value</span>=<span class="string">"10"</span> <span class="attr">data-sizing</span>=<span class="string">"px"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>JS取得dataset</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">"#blur"</span>).dataset.sizing; <span class="comment">// 輸出：px</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">"#blur"</span>).dataset[sizing]; <span class="comment">// 輸出：px</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">"#blur"</span>).getAttribute(<span class="string">"data-sizing"</span>); <span class="comment">// 輸出：px</span></span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset" target="_blank" rel="noopener">MDN-dataset</a></div><hr><h3 id="style-setProperty"><a href="#style-setProperty" class="headerlink" title="style.setProperty"></a>style.setProperty</h3><p>下列三種方法，皆可達到修改 CSS 的效果，不過實務上用<code>方法2</code>，會比較容易帶 <code>參數</code> 及 <code>可讀性</code> 較佳。</p><figure class="highlight js"><figcaption><span>修改CSS</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DOM = <span class="built_in">document</span>.querySelector(<span class="string">"img"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法1</span></span><br><span class="line">DOM.setAttribute(<span class="string">"style"</span>, <span class="string">`padding: 10px`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line">DOM.style.setProperty(<span class="string">"padding"</span>, <span class="string">"10px"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法3</span></span><br><span class="line">DOM.style.padding = <span class="string">"10px"</span>;</span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/setProperty" target="_blank" rel="noopener">MDN-setProperty</a></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/09/23/JS30-03-CSS-Variables/Scoped_CSS_Variables_and_JS.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;利用 &lt;font color=&quot;red&quot;&gt;CSS 變數&lt;/font&gt; 與 &lt;font color=&quot;red&quot;&gt;JS&lt;/font&gt; 即時更新圖片的 內距、邊框色、模糊 效果&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    <category term="JS30" scheme="hhttps://bryanhsiao.github.io/categories/JS/JS30/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="JS30" scheme="hhttps://bryanhsiao.github.io/tags/JS30/"/>
    
  </entry>
  
  <entry>
    <title>JS-事件效能處理</title>
    <link href="hhttps://bryanhsiao.github.io/2021/09/14/JS-debounce-throttle/"/>
    <id>hhttps://bryanhsiao.github.io/2021/09/14/JS-debounce-throttle/</id>
    <published>2021-09-14T15:33:06.000Z</published>
    <updated>2021-09-14T15:38:58.447Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/09/14/JS-debounce-throttle/throttle-vs-debounce.png"></p><font style="font-size:20px;">了解 debounce &amp; throttle 來處理事件效能的問題。</font></blockquote><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Youtube 直播看到 <strong>Alex 大大</strong> 線上分享 JS 的運用，這次分享處理事件效能的問題，<br>在此紀錄相關資訊，方便以後複習。</p><div class="note info">Youtube：<a href="https://youtu.be/PnoZU60qvho" target="_blank" rel="noopener">Alex 宅幹嘛 - Javascript 30 #6 捲軸動畫與事件效能處理</a></div><hr><h2 id="連續畫面的渲染-requestAnimationFrame"><a href="#連續畫面的渲染-requestAnimationFrame" class="headerlink" title="連續畫面的渲染 requestAnimationFrame"></a>連續畫面的渲染 requestAnimationFrame</h2><p>如果我們有利用 <code>setTimeout</code> 或 <code>setInterval</code> 要處理連續渲染畫面的需求的話，<br>建議可以改使用 <code>requestAnimationFrame</code> ，<br>避免有時會因為 <code>setTimeout</code> 或 <code>setInterval</code> 設定的時間不正確或太密集的話，<br>導致畫面 LAG 或不正常的情況發生。</p><div class="note info"><a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution?hl=zh-tw" target="_blank" rel="noopener">requestAnimationFrame</a></div><hr><h2 id="事件效能問題"><a href="#事件效能問題" class="headerlink" title="事件效能問題"></a>事件效能問題</h2><p>當 JS 遇到頻繁觸發事件(如：監聽 window 的 scroll、resize 事件、user 瘋狂 Click 按鈕…等) 的情況，<br>有時可能會造成效能問題，而且<font color="red">常理來說</font>也不太可能會在幾毫秒間，就需要那麼頻繁觸發 Event，<br>所以我們就可以利用 <font color="red">延遲執行</font> 這種方法，來減緩觸發 Event 的次數，<br>下列分別介紹 <code>debounce</code> 與 <code>throttle</code> 二種差異與用法。</p><hr><h2 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h2><p>因為 <code>debounce</code> 有很多版本的寫法，所以附上我說明的版本。</p><figure class="highlight js"><figcaption><span>debounce</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait = <span class="number">20</span>, immediate = true</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span>,</span><br><span class="line">      args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (!immediate) func.apply(context, args);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> callNow = immediate &amp;&amp; !timeout;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    timeout = setTimeout(later, wait);</span><br><span class="line">    <span class="keyword">if</span> (callNow) func.apply(context, args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span id="inline-green">情境描述：</span></p><p><code>debounce(function, wait, [immediate])</code></p><ul><li>function = 給糖果</li><li>wait： 需要冷靜的時間</li><li>immediate： 先給或後給</li></ul><p>假設我設定 <strong>wait：10 秒</strong> 以及 <strong>immediate：先給</strong> 的情況下，</p><p>有一個小孩<font color="blue">第一次</font>跟媽媽吵著要糖吃(觸發事件，如 Scroll、resize…)，<br>而 debounce 媽媽<font color="blue">先給</font>小孩糖果(完成任務)，<br>接著小孩立馬即時瞬間不間斷的，又要瘋狂吵鬧要吃糖(瘋狂觸發事件)，<br>媽媽說你要<font color="blue">有達到</font>冷靜 10 秒後，才會再給糖果，否則就不給糖。</p><p>這時有二種情況</p><ol><li>小孩依舊瘋狂吵要吃糖，沒有冷靜超過 10 秒以上，這時媽媽怎樣都不會給糖。</li><li>小孩吵了一陣子，終於 <font color="red">有</font>冷靜 10 秒以上，這時媽媽才再給他一顆糖。</li></ol><p>說了那麼多，總結來說就是</p><p>當觸發事件完成任務後，下次要再可以成功觸發完成任務的條件，<br>就是需<font color="red">停止觸發事件且超過 wait 設定的時間</font>，才可以再觸發完成一次任務。</p><div class="note info"><a href="https://youtu.be/PnoZU60qvho?t=1h16m3s" target="_blank" rel="noopener">Youtube-debounce解說</a><br><a href="https://youtu.be/PnoZU60qvho?t=1h20m53s" target="_blank" rel="noopener">Youtube-debounce隱性的問題</a></div><hr><h2 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h2><p>附上解說的版本，若 <code>limit = 0</code> 的話，就等於 debounce 了。</p><figure class="highlight js"><figcaption><span>throttle</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fun, &#123; wait = <span class="number">33</span>, limit = <span class="number">0</span>, immediate = false &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">let</span> startTime = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span>,</span><br><span class="line">      args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">let</span> currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (startTime === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!immediate) startTime = currentTime;</span><br><span class="line">      <span class="keyword">else</span> startTime = currentTime - limit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> waitFun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fun.apply(context, args);</span><br><span class="line">      startTime = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    clearTimeout(timer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (limit &amp;&amp; currentTime - startTime &gt;= limit) &#123;</span><br><span class="line">      fun.apply(context, args);</span><br><span class="line">      startTime = currentTime;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = setTimeout(waitFun, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span id="inline-green">情境描述：</span></p><p>一樣是「會吵的孩子有糖吃」的故事。</p><p><code>throttle(fun, { wait = 33, limit = 0, immediate = false })</code></p><ul><li>fun = 給糖果</li><li>wait： 需要冷靜的時間</li><li>limit： 超過最小間隔時間，就給糖</li><li>immediate： 先給或後給</li></ul><p>假設我設定 <strong>wait：10 秒</strong> 、 <strong>limit：5 秒</strong> 以及 <strong>immediate：先給</strong> 的情況下，</p><p>小孩第一次要糖吃時，throttle 媽媽一樣先給小孩糖果，<br>但天下小孩一樣白目(有白色的眼球)，立馬又吵要糖吃，<br>小孩吵鬧依舊沒停止且超過 10 秒，不過 throttle 媽媽就比較心軟，<br>小孩雖然一直吵，但媽媽只要<font color="red">每超過 5 秒一次</font>就會心軟給小孩一個糖吃。</p><p>最後總結來說就是</p><p>當觸發事件完成任務後，有二種情況可以再觸發完成一次任務</p><ol><li>停止觸發事件 且 超過<font color="red">wait</font>設定的時間。</li><li>連續觸發時，中間間隔時間有超過 <font color="red">limit</font>設定的時間。</li></ol><div class="note info"><a href="https://youtu.be/PnoZU60qvho?t=1h23m48s" target="_blank" rel="noopener">Youtube-throttle解說</a><br><a href="https://codepen.io/achen224/pen/pVRJLw" target="_blank" rel="noopener">Alex大-codepen範例</a></div><hr><h2 id="閉包（Closure）"><a href="#閉包（Closure）" class="headerlink" title="閉包（Closure）"></a>閉包（Closure）</h2><p>上述 <code>debounce</code> 與 <code>throttle</code> 這二段程式碼中，都有使用到 <font color="red">閉包（Closure）</font>的用法了。</p><p>以 <code>debounce</code> 為例，他利用 <code>timeout</code> 這變數來紀錄且進行一些判斷，下列為他的生命週期</p><ol><li>判斷是否第一次執行，再看 <code>immediate</code> 變數，是設定 先執行 or 後執行。</li><li>若是連續觸發時，就清除上一次的<code>setTimeout</code>。</li><li>當連續觸發的最後一次時，就會執行 <code>later函式</code>，並清空<code>timeout</code>變數。</li></ol><p>這樣下次連續觸發時，就會再回到 <code>1.</code>開始重新判斷。</p><figure class="highlight js"><figcaption><span>debounce解說</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait = <span class="number">20</span>, immediate = true</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"debounce~~~~in"</span>);</span><br><span class="line">  <span class="comment">// 紀錄 setTimeout 給的 timeoutID</span></span><br><span class="line">  <span class="keyword">var</span> timeout;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"function~~~~in"</span>);</span><br><span class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span>,</span><br><span class="line">      args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 清空 setTimeout 給的 timeoutID</span></span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">// 若 immediate 是設定「false(後執行)」時，就會執行func</span></span><br><span class="line">      <span class="keyword">if</span> (!immediate) func.apply(context, args);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判斷是否 先執行 且 第一次</span></span><br><span class="line">    <span class="keyword">var</span> callNow = immediate &amp;&amp; !timeout;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 當連續觸發時，用來清除上次的setTimeout</span></span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    <span class="comment">// 連續觸發的最後一次，會執行 later函式</span></span><br><span class="line">    timeout = setTimeout(later, wait);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若符合「先執行 且 第一次」，就執行func</span></span><br><span class="line">    <span class="keyword">if</span> (callNow) func.apply(context, args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning">補充：(提醒自己，不要腦補程式碼跑法)<br>1. 當宣告addEventListener時，會執一次<code>debounce函式</code>，並回傳新的函式，此時就完成<font color="red">閉包（Closure）</font>的寫法。<br>2. 之後每當觸發事件時，都是執行<code>新的函式</code>，就是上例的第 6 ~ 27 之間，而 <code>timeout</code> 就<font color="red">有點像</font>是新函式的全域變數，但不是真的在window的全域變數。(<a href="http://jsbin.com/dodijijuye/edit?js,output" target="_blank" rel="noopener">jsbin-捲動畫面並開console看</a>)<br>3. JS是由上往下逐行執行，記得看到<font color="red">最後一行</font>才算結束。<br>4. <code>later函式</code>一開始只是宣告，沒執行，最後要等<code>setTimeout</code>才會執行</div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/09/14/JS-debounce-throttle/throttle-vs-debounce.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;了解 debounce &amp;amp; throttle 來處理事件效能的問題。&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="requestAnimationFrame" scheme="hhttps://bryanhsiao.github.io/tags/requestAnimationFrame/"/>
    
    <category term="debounce" scheme="hhttps://bryanhsiao.github.io/tags/debounce/"/>
    
    <category term="throttle" scheme="hhttps://bryanhsiao.github.io/tags/throttle/"/>
    
    <category term="事件效能" scheme="hhttps://bryanhsiao.github.io/tags/事件效能/"/>
    
  </entry>
  
  <entry>
    <title>CSS-Flex-進階</title>
    <link href="hhttps://bryanhsiao.github.io/2021/09/13/CSS-Flex-advanced/"/>
    <id>hhttps://bryanhsiao.github.io/2021/09/13/CSS-Flex-advanced/</id>
    <published>2021-09-13T15:09:41.000Z</published>
    <updated>2021-09-13T15:10:43.462Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/09/13/CSS-Flex-advanced/flex-property.png" title="常用屬性"></p><font style="font-size:20px;">這次主要介紹 <font color="red">較不常用</font> 的屬性</font></blockquote><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Youtube 直播看到 <strong>Amos 大大</strong> 在解說 Flex 各種屬性及運用，<br>在此紀錄自己較不熟悉的部份，方便以後複習。</p><div class="note info">Youtube：<a href="https://youtu.be/_nCBQ6AIzDU" target="_blank" rel="noopener">玩轉 CSS FLEX</a></div><hr><h2 id="主軸-amp-次軸"><a href="#主軸-amp-次軸" class="headerlink" title="主軸&amp;次軸"></a>主軸&amp;次軸</h2><img src="/2021/09/13/CSS-Flex-advanced/flex-direction.png"><h3 id="flex-direction：決定-flex-主軸線-方向"><a href="#flex-direction：決定-flex-主軸線-方向" class="headerlink" title="flex-direction：決定 flex 主軸線 方向"></a>flex-direction：決定 flex 主軸線 方向</h3><p>[ row | row-reverse | column | column-reverse ]</p><p>在開始說明前，需再次強調一次 <font color="red">主軸與次軸(交錯軸)</font> 的重要性，<br>因為當主軸設定為 <code>row</code> 或 <code>column</code> 的話，<br>都會連帶影響其他屬性的設定，而產生不一樣的排版出來。</p><p>舉例來說，我們拿 <code>flex-basis</code> 這個屬性出來說明，<br>當主軸的方向有所不同時，會影響什麼呢？</p><p>當<code>flex-direction: row</code>時，<code>flex-basis</code>影響的是<font color="red">寬度</font><br>當<code>flex-direction: column</code>時，<code>flex-basis</code>影響的是<font color="red">高度</font></p><div class="note info"><a href="https://kanboo.github.io/2017/09/30/CSS-Flex/" target="_blank" rel="noopener">舊文參考：CSS - Flex</a></div><div class="note warning">整理幾個時間點，方便以後回頭再複習。<br><a href="https://youtu.be/_nCBQ6AIzDU?t=1h13m12s" target="_blank" rel="noopener">align-items(1h13m12s)</a><br><a href="https://youtu.be/_nCBQ6AIzDU?t=1h25m19s" target="_blank" rel="noopener">align-self(1h25m19s)</a><br><a href="https://youtu.be/_nCBQ6AIzDU?t=1h29m13s" target="_blank" rel="noopener">flex-order(1h29m13s)</a><br><a href="https://youtu.be/_nCBQ6AIzDU?t=1h39m25s" target="_blank" rel="noopener">flex-grow(1h39m25s)</a><br><a href="https://youtu.be/_nCBQ6AIzDU?t=1h43m15s" target="_blank" rel="noopener">flex-basis(1h43m15s)</a><br><a href="https://youtu.be/_nCBQ6AIzDU?t=1h46m55s" target="_blank" rel="noopener">flex-shrink(1h46m55s)</a></div><hr><h2 id="flex-order"><a href="#flex-order" class="headerlink" title="flex-order"></a>flex-order</h2><p><span id="inline-blue">重點整理</span></p><ul><li>預設值為 0 ，所以要往前就要小於 0，往後就要大於 0。</li><li>設定值需為 整數，小數無效，如：1.5。</li></ul><p><span id="inline-green">運用情境</span></p><p>有 A B C 三塊資訊要顯示，而 <font color="red">B</font> 為最重要的資訊</p><p>在 電腦 排序要 A <font color="red">B</font> C (電腦是横的看)<br>在 手機 排序要 <font color="red">B</font> A C (手機是直的看)<br>在 平板 排序要 C <font color="red">B</font> A (← 老板來亂指定的)</p><p>這時就可以透過 <code>media query</code> 和 <code>flex-order</code> 的配合，<br>在不同裝置上，顯示不同的排序。</p><blockquote><p>時間點：<a href="https://youtu.be/_nCBQ6AIzDU?t=1h29m13s" target="_blank" rel="noopener">flex-order(1h29m13s)</a></p></blockquote><div class="note primary">補充：<br>因為 髒髒 的關係，沒事別出大絕，而且也要一一去設定，怕以後維護不易。</div><hr><h2 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h2><p>將剩餘的空間，切成 n 份後，再分配出去。</p><p><span id="inline-green">案例說明</span></p><p>當 <font color="red">子</font>項目全部加總的長度(<font color="blue">600px</font>) <font color="red">&lt;</font> 父項目的總長度(<font color="blue">1000px</font>) 時，<br>此時就有「<font color="red">剩餘的空間(1000 - 600 = 400)</font>」，可以讓<code>flex-grow</code>依照比例去分配剩下的空間。</p><blockquote><p>時間點：<a href="https://youtu.be/_nCBQ6AIzDU?t=1h39m25s" target="_blank" rel="noopener">flex-grow(1h39m25s)</a></p></blockquote><div class="note primary">備註：<br>Amos大提到用在單列使用時，做分配還OK，<br>但用在多列使用時，分配起來會跟想像中有點不一樣，較不好掌控。<br>先記一下，以後遇到時，踩到此坑才不會太痛。</div><div class="note info">JS30有練習到 =&gt; <a href="https://kanboo.github.io/2018/02/26/JS30-05-Flex-Panel-Gallery/" target="_blank" rel="noopener">JS30-05-Flex-Panel-Gallery</a></div><hr><h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h2><p><span id="inline-blue">重點整理</span></p><ul><li>預設值為 auto</li><li>控制 <font color="red">主軸</font> 的長度<ul><li>flex-direction：決定 flex 主軸線 方向</li><li>當主軸是 <font color="red">row</font> 的話，就是控制 <font color="red">寬度</font></li><li>當主軸是 <font color="blue">column</font> 的話，就是控制 <font color="blue">高度</font></li></ul></li></ul><p><span id="inline-green">運用情境</span></p><p>利用 <code>flex-basis</code> 與 <code>flex-grow</code> 配合，當成「<font color="red">grid 網格</font>」來使用。</p><p></p><p data-height="445" data-theme-id="0" data-slug-hash="mLmWVR" data-default-tab="result" data-user="Kanboo" data-embed-version="2" data-pen-title="flex-basis 與 flex-grow 網格實作" class="codepen">See the Pen <a href="https://codepen.io/Kanboo/pen/mLmWVR/" target="_blank" rel="noopener">flex-basis 與 flex-grow 網格實作</a> by Kanboo (<a href="https://codepen.io/Kanboo" target="_blank" rel="noopener">@Kanboo</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><blockquote><p>時間點：<a href="https://youtu.be/_nCBQ6AIzDU?t=1h43m15s" target="_blank" rel="noopener">flex-basis</a></p></blockquote><p><span id="inline-green">額外測試</span></p><p><span id="inline-toc">Q</span>flex-basis &amp; max-width &amp; width 權重誰大？</p><p><span id="inline-toc">A</span>max-width &gt; flex-basis &gt; width</p><blockquote><p>權重測試：<a href="https://codepen.io/Kanboo/pen/deNyXo" target="_blank" rel="noopener">codepen 連結</a></p></blockquote><hr><h2 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h2><p><span id="inline-blue">重點整理</span></p><ul><li>預設值為 1 ，</li><li>值設定為 0 的話，代表 不給縮，就以原來值為主。</li><li>不可以為負值</li></ul><p><span id="inline-green">運用情境</span></p><p>頁面切版有 左、右 二區，左邊是 menu，右邊是 內容區，<br>這時我們就可以設定</p><p>左邊的 flex-shrink: 0;<br>右邊的 flex-shrink: 1;</p><p>這樣的話，左邊就會固定寬度，右邊就會自動調整 收縮比。</p><p>承上例，<br>因 flex-shrink 是控制收縮，所以再新增 flex-grow 控制伸展，<br>這樣不管畫面拉寬拉窄的話，右邊內容區都可以自動伸展收縮。</p><p><span id="inline-purple">公式</span></p><p>先將下列三個值算出</p><p><font color="blue"><strong>收縮值</strong></font>：flex-shrink</p><p><font color="blue"><strong>總比值</strong></font>：各子項目寬 * 收縮值，並全部加總的值</p><p><font color="blue"><strong>超出值</strong></font>：全部子項目寬度的加總 減掉 父層的寬度</p><p>最後我們再利用上列的值，針對 每一個的子項目 算出 自己的扣除值</p><p><font color="blue"><strong>扣除值</strong></font>： (子項目的寬 * 收縮比 / 總比值) * 超出值</p><p>這樣的話，每個子項目的寬度去減掉自己的扣除值，就完成收縮的作用了。</p><p><em><strong>下列直接用實例說明</strong></em></p><p></p><p data-height="337" data-theme-id="0" data-slug-hash="mLmRwd" data-default-tab="result" data-user="Kanboo" data-embed-version="2" data-pen-title="flex-shrink公式計算" class="codepen">See the Pen <a href="https://codepen.io/Kanboo/pen/mLmRwd/" target="_blank" rel="noopener">flex-shrink公式計算</a> by Kanboo (<a href="https://codepen.io/Kanboo" target="_blank" rel="noopener">@Kanboo</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p><font color="blue"><strong>總比值</strong></font>：100 * 1+100 * 1+100 * 1+100 * 5+100 * 5 = 1300</p><p><font color="blue"><strong>超出值</strong></font>：(100 * 5) - 300 = 200</p><p><font color="blue"><strong>扣除值</strong></font>：</p><ul><li>A：(100 * 1 / 1300) * 200 約 15.38</li><li>B：(100 * 1 / 1300) * 200 約 15.38</li><li>C：(100 * 1 / 1300) * 200 約 15.38</li><li>D：(100 * 5 / 1300) * 200 約 76.92</li><li>E：(100 * 5 / 1300) * 200 約 76.92</li></ul><p><font color="red"><strong>最後實際的值</strong></font>：</p><ul><li>A：100 - 15.38 = 84.61</li><li>B：100 - 15.38 = 84.61</li><li>C：100 - 15.38 = 84.61</li><li>D：100 - 76.92 = 23.08</li><li>E：100 - 76.92 = 23.08</li></ul><blockquote><p>時間點：<a href="https://youtu.be/_nCBQ6AIzDU?t=1h46m55s" target="_blank" rel="noopener">flex-shrink</a></p></blockquote><hr><h2 id="排版問題"><a href="#排版問題" class="headerlink" title="排版問題"></a>排版問題</h2><p><span id="inline-toc">Q</span>如何使用 space-between，但我最後一列沒滿…我不想中間空一格該怎麼做？</p><p><span id="inline-toc">A</span></p><p>解法 1：</p><ul><li><a href="https://stackoverflow.com/questions/18744164/flex-box-align-last-row-to-grid" target="_blank" rel="noopener">文章：Flex-box: Align last row to grid</a></li><li><a href="https://codepen.io/DanAndreasson/pen/ZQXLXj" target="_blank" rel="noopener">codepen 解法</a></li></ul><p>解法 2：</p><ul><li><a href="https://codepen.io/tuxsudo/pen/VYERQJ" target="_blank" rel="noopener">Flexbox - last row in grid</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/09/13/CSS-Flex-advanced/flex-property.png&quot; title=&quot;常用屬性&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;這次主要介紹 &lt;font color=&quot;red&quot;&gt;較不常用&lt;/font&gt; 的屬性&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/tags/CSS/"/>
    
    <category term="Flex" scheme="hhttps://bryanhsiao.github.io/tags/Flex/"/>
    
    <category term="排版" scheme="hhttps://bryanhsiao.github.io/tags/排版/"/>
    
  </entry>
  
  <entry>
    <title>JS-基礎用法</title>
    <link href="hhttps://bryanhsiao.github.io/2021/09/12/JS-studynotes/"/>
    <id>hhttps://bryanhsiao.github.io/2021/09/12/JS-studynotes/</id>
    <published>2021-09-12T15:56:38.000Z</published>
    <updated>2021-09-12T15:57:21.208Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/09/12/JS-studynotes/js_01.png"></p></blockquote><a id="more"></a><hr><h2 id="Selector-選擇元素"><a href="#Selector-選擇元素" class="headerlink" title="Selector - 選擇元素"></a>Selector - 選擇元素</h2><ul><li>element = document.querySelector(selectors);<ul><li>element 是<code>元素</code>物件。</li><li>selectors 是以逗號分隔，包含一個或多個 <code>CSS 選擇器</code>的字串。</li></ul></li></ul><figure class="highlight js"><figcaption><span>選擇單一元素 querySelector</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回傳第一個符合條件的元素</span></span><br><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.querySelector(<span class="string">"#titleId"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>選擇多個元素 querySelectorAll</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回傳符合條件的元素</span></span><br><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.querySelectorAll(<span class="string">".titleClass"</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="Attribute-增加標籤屬性"><a href="#Attribute-增加標籤屬性" class="headerlink" title="Attribute - 增加標籤屬性"></a>Attribute - 增加標籤屬性</h2><ul><li><font color="red">set</font>Attribute 設定</li></ul><figure class="highlight js"><figcaption><span>設定 標籤屬性</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.querySelector(<span class="string">".titleClass a"</span>);</span><br><span class="line">el.setAttribute(<span class="string">"href"</span>, <span class="string">"http://www.yahoo.com.tw"</span>);</span><br></pre></td></tr></table></figure><ul><li><font color="red">get</font>Attribute 取得</li></ul><figure class="highlight js"><figcaption><span>取得 標籤屬性</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el3 = <span class="built_in">document</span>.querySelector(<span class="string">".titleClass a"</span>).getAttribute(<span class="string">"href"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(el3);</span><br></pre></td></tr></table></figure><hr><h2 id="innerHTML-插入-HTML"><a href="#innerHTML-插入-HTML" class="headerlink" title="innerHTML - 插入 HTML"></a>innerHTML - 插入 HTML</h2><p>將元素內的 html<font color="red">重新覆蓋寫入</font>新的 html。</p><figure class="highlight js"><figcaption><span>插入HTML</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">"main"</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'&lt;h1 class="blue"&gt;1234&lt;/h1&gt;'</span>;</span><br><span class="line">el.innerHTML = str;</span><br></pre></td></tr></table></figure><hr><h2 id="createElement-插入-dom-元素"><a href="#createElement-插入-dom-元素" class="headerlink" title="createElement - 插入 dom 元素"></a>createElement - 插入 dom 元素</h2><p>建立一個新的 DOM 元素，然後再使用 <code>appendChild</code> 新增子節點，並不會覆蓋原有的 DOM 元素。</p><figure class="highlight html"><figcaption><span>新增dom元素</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">em</span>&gt;</span>titile<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 建立元素</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> sonElement = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span></span><br><span class="line"><span class="javascript">  sonElement.setAttribute(<span class="string">"href"</span>, <span class="string">"www.facebook.com"</span>);</span></span><br><span class="line"><span class="javascript">  sonElement.textContent = <span class="string">"前往Facebook"</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 增加子節點</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> fatherElement = <span class="built_in">document</span>.querySelector(<span class="string">".title"</span>);</span></span><br><span class="line"><span class="undefined">  fatherElement.appendChild(sonElement);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><figcaption><span>更新後結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 class="title"&gt;</span><br><span class="line">    &lt;em&gt;titile&lt;/em&gt;</span><br><span class="line"><span class="addition">+   &lt;a href="www.facebook.com"&gt;前往Facebook&lt;/a&gt;</span></span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure><div class="note primary">使用 appendChild 要注意的小細節：<br>要留意的是 如果 <code>appendChild</code> 使用時，append 上去的是一個<font color="red">已存在</font>的 node 時，它會做的是<font color="red">搬移</font>，而<font color="red">非複製</font>，<br>所以 appendChild 使用時要複製而非搬移，記得先使用 <code>Node.cloneNode()</code> 這個方法複製 Node Element。<br><br>參考：<a href="https://pjchender.blogspot.tw/2017/06/js-node-element-appenchild-disappear.html" target="_blank" rel="noopener">PJ - Node Element 在 appendChild 後消失（disappear）!?</a><br><br></div><hr><h2 id="addEventListener-事件氣泡、事件捕捉"><a href="#addEventListener-事件氣泡、事件捕捉" class="headerlink" title="addEventListener - 事件氣泡、事件捕捉"></a>addEventListener - 事件氣泡、事件捕捉</h2><p><span id="inline-blue">基本語法</span></p><p>element.addEventListener(event, function, useCapture)</p><ul><li>第三個參數：可省略，預設為 <code>false</code>。</li></ul><p><span id="inline-purple">範例</span></p><p>可試試將第三個參數分別改成 <code>true</code> 、 <code>false</code>，各執行一次，會有什麼不一樣的結果。</p><figure class="highlight html"><figcaption><span>html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"warp"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>預設：事件氣泡-從指定元素往外找</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.querySelector(<span class="string">".box"</span>);</span><br><span class="line">el.addEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"box"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"box"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> elBody = <span class="built_in">document</span>.querySelector(<span class="string">".body"</span>);</span><br><span class="line">elBody.addEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"body"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"body"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// false (事件氣泡 - event Bubbling) - 從指定元素往外找</span></span><br><span class="line"><span class="comment">// true (事件捕捉 - event capturing) - 從最外面找到指定元素</span></span><br></pre></td></tr></table></figure><p></p><p data-height="212" data-theme-id="0" data-slug-hash="MrmOzO" data-default-tab="result" data-user="Kanboo" data-embed-version="2" data-pen-title="addEventListener - 事件氣泡、事件捕捉" class="codepen">See the Pen <a href="https://codepen.io/Kanboo/pen/MrmOzO/" target="_blank" rel="noopener">addEventListener - 事件氣泡、事件捕捉</a> by Kanboo (<a href="https://codepen.io/Kanboo" target="_blank" rel="noopener">@Kanboo</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><h2 id="stopPropagation-中止冒泡行為"><a href="#stopPropagation-中止冒泡行為" class="headerlink" title="stopPropagation - 中止冒泡行為"></a>stopPropagation - 中止冒泡行為</h2><p>依上例 <font color="red">addEventListener-事件氣泡</font> 因素，有時只是想單純針對單一元素監聽，不想因為事件冒泡的行為，而去觸發到其他元素，這時就可利用 <font color="red">stopPropagation</font> 來達成此需求。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var el = document.querySelector('.box');</span><br><span class="line">el.addEventListener('click',function(e)&#123;</span><br><span class="line"><span class="addition">+ e.stopPropagation(); // 中止冒泡行為</span></span><br><span class="line">  alert('box');</span><br><span class="line">  console.log('box');</span><br><span class="line">&#125;,false);</span><br></pre></td></tr></table></figure><hr><h2 id="事件監聽優化-amp-e-target"><a href="#事件監聽優化-amp-e-target" class="headerlink" title="事件監聽優化 &amp; e.target"></a>事件監聽優化 &amp; e.target</h2><p>有時子元素可能要<font color="red">上千個</font>，每個都要綁上監聽的話，效能不是很優，這時可從父節點下手，使用 <font color="red">e.target.nodeName</font> 判斷是否為 想監聽的子元素，若是為想監聽的子元素，可再用 e.target.value 或是 e.target.textContent 取得 值。</p><ul><li>e.target.nodeName 取得點擊元素的<font color="red">標籤名稱</font>，如：UL、LI、INPUT…</li><li>e.target.value 取得選取元素的值</li></ul><p><span id="inline-purple">範例</span></p><p>當有一個 ul 底下有多個 li 都要監聽的話，這時我們可以利用 <font color="red">addEventListener-事件氣泡</font> 的原理，只要針對 <font color="red">ul</font> 監聽，讓他往上冒泡，當到達 li 時，這時我們就可以針對 li 做事了。</p><figure class="highlight js"><figcaption><span>原始寫法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取得ul底下的所有li元素</span></span><br><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.querySelectorAll(<span class="string">".list li"</span>);</span><br><span class="line"><span class="comment">//forloop，將每個li元素綁上監聽事件(N次)</span></span><br><span class="line"><span class="keyword">var</span> len = list.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; len &gt; i; i++) &#123;</span><br><span class="line">  list[i].addEventListener(<span class="string">"click"</span>, checkName, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.target.textContent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>優化寫法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取得ul元素</span></span><br><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.querySelector(<span class="string">".list"</span>);</span><br><span class="line"><span class="comment">//將ul元素綁上監事件(一次)</span></span><br><span class="line">list.addEventListener(<span class="string">"click"</span>, checkName, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.target.nodeName !== <span class="string">"LI"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="comment">// 判斷是否為li元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(e.target.textContent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="preventDefault-取消預設觸發行為"><a href="#preventDefault-取消預設觸發行為" class="headerlink" title="preventDefault - 取消預設觸發行為"></a>preventDefault - 取消預設觸發行為</h2><p>比較常用在 <font color="red">a 連結的 href</font>、<font color="red">Form 表單的 submit</font> 上，有時可能只是想觸發呼叫 Function，而不想使用到原生附與的功能的話，就可利用 <font color="red">preventDefault</font> 達成此需求。</p><figure class="highlight js"><figcaption><span>取消預設觸發行為</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.querySelector(<span class="string">"a"</span>);</span><br><span class="line">list.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault(); <span class="comment">//取消預設觸發行為</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 撰寫你的Code */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="localStorage-灠瀏器資料儲存"><a href="#localStorage-灠瀏器資料儲存" class="headerlink" title="localStorage - 灠瀏器資料儲存"></a>localStorage - 灠瀏器資料儲存</h2><p><span id="inline-blue">基本語法</span></p><figure class="highlight js"><figcaption><span>儲存</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">"countryItem"</span>, countryString);</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>讀取</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.getItem(<span class="string">"countryItem"</span>);</span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例</span></p><p>localstorage 只能保存 <code>string</code> 資料，所以當資料非字串型態的話，記得轉為<code>字串string</code>。</p><div class="note default">JSON.<font color="red">stringify</font>() 將 array 轉為 string<br>JSON.<font color="red">parse</font>() 將 string 轉為 array</div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> country = [&#123; <span class="attr">farmer</span>: <span class="string">"王農夫"</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">//儲存</span></span><br><span class="line"><span class="keyword">var</span> countryString = <span class="built_in">JSON</span>.stringify(country); <span class="comment">// 轉字串</span></span><br><span class="line"><span class="built_in">console</span>.log(countryString);</span><br><span class="line">localStorage.setItem(<span class="string">"countryItem"</span>, countryString);</span><br><span class="line"></span><br><span class="line"><span class="comment">//讀取</span></span><br><span class="line"><span class="keyword">var</span> getData = localStorage.getItem(<span class="string">"countryItem"</span>);</span><br><span class="line"><span class="keyword">var</span> getDataAry = <span class="built_in">JSON</span>.parse(getData); <span class="comment">// 轉array</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getDataAry[<span class="number">0</span>].farmer);</span><br></pre></td></tr></table></figure><div class="note primary">補充小知識<br>var data = listData;<br>var data2 = listData || []; //(建議寫法)<br><br>console.log(‘沒有 []’, data); // 有可能取得資料或 undefined<br>console.log(‘加上 []’, data2); // 有可能</div><hr><h2 id="data-透過-dataset-讀取自訂資料"><a href="#data-透過-dataset-讀取自訂資料" class="headerlink" title="data-* - 透過 dataset 讀取自訂資料"></a>data-* - 透過 dataset 讀取自訂資料</h2><ul><li>名字絕對不能以 <font color="red">xml</font> 起頭，無論是否用於 xml、</li><li>名字絕對不能包含<font color="red">分號（U+003A）、</font></li><li>名字絕對不能包含<font color="red">大寫 A 到大小 Z </font>的拉丁字母。</li></ul><p>可透過 HTMLElement.<font color="red">dataset</font>.testValue 或 HTMLElement.<font color="red">dataset</font>[“testValue”] 訪問</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">data-id</span>=<span class="string">"1234567890"</span> <span class="attr">data-user</span>=<span class="string">"johndoe"</span> <span class="attr">data-date-of-birth</span>&gt;</span></span><br><span class="line">  John Doe</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">let el = document.querySelector('#user'); // el.id == 'user' // el.dataset.id</span><br><span class="line">=== '1234567890' // el.dataset.user === 'johndoe' // el.dataset.dateOfBirth ===</span><br><span class="line">'' el.dataset.dateOfBirth = '1960-10-03'; // set the DOB. // 'someDataAttr' in</span><br><span class="line">el.dataset === false el.dataset.someDataAttr = 'mydata'; // 'someDataAttr' in</span><br><span class="line">el.dataset === true</span><br></pre></td></tr></table></figure><hr><h2 id="AjAX"><a href="#AjAX" class="headerlink" title="AjAX"></a>AjAX</h2><p><span id="inline-blue">屬性</span></p><p><font color="red">readyState</font>:<br>　０：尚未讀取<br>　１：讀取中<br>　２：已下載完畢<br>　３：資訊交換中<br>　４：處理完畢</p><p><font color="red">Status</font>:即<a href="https://blog.miniasp.com/post/2009/01/16/Web-developer-should-know-about-HTTP-Status-Code.aspx" target="_blank" rel="noopener">HTTP 協定的狀態碼</a></p><p>當 readyState == <font color="red">4</font>，代表有執行完成，但不一定是有正確撈到資料，<br>要配合 HTTP status == <font color="red">200</font>，才代表是正確撈到資料。</p><p><span id="inline-purple">範例</span></p><p>利用 AJAX 傳送(<font color="red">POST</font>)帳號、密碼資料至後端註冊會員帳號。</p><figure class="highlight js"><figcaption><span>POST資料</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> send = <span class="built_in">document</span>.querySelector(<span class="string">".send"</span>);</span><br><span class="line">send.addEventListener(<span class="string">"click"</span>, signup, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">signup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> emailStr = <span class="built_in">document</span>.querySelector(<span class="string">".account"</span>).value;</span><br><span class="line">  <span class="keyword">var</span> passwordStr = <span class="built_in">document</span>.querySelector(<span class="string">".password"</span>).value;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//資料丟到物件</span></span><br><span class="line">  <span class="keyword">var</span> account = &#123;&#125;;</span><br><span class="line">  account.email = emailStr;</span><br><span class="line">  account.password = passwordStr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">"post"</span>, <span class="string">"https://hexschool-tutorial.herokuapp.com/api/signup"</span>, <span class="literal">true</span>);</span><br><span class="line">  xhr.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/json"</span>); <span class="comment">//宣告json格式</span></span><br><span class="line">  <span class="keyword">var</span> data = <span class="built_in">JSON</span>.stringify(account); <span class="comment">//轉成字串</span></span><br><span class="line">  xhr.send(data); <span class="comment">// 送出</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//ajax完成後，執行此event</span></span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="comment">// 萬事具備</span></span><br><span class="line">      <span class="keyword">var</span> callbackData = <span class="built_in">JSON</span>.parse(xhr.responseText); <span class="comment">//接收回傳後資料</span></span><br><span class="line">      <span class="built_in">console</span>.log(callbackData);</span><br><span class="line">      <span class="keyword">var</span> veriStr = callbackData.message;</span><br><span class="line">      <span class="keyword">if</span> (veriStr == <span class="string">"帳號註冊成功"</span>) &#123;</span><br><span class="line">        alert(<span class="string">"帳號註冊成功！！"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">"帳號註冊失敗！"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 似乎有點問題。</span></span><br><span class="line">      <span class="comment">// 或許伺服器傳回了 404（查無此頁）</span></span><br><span class="line">      <span class="comment">// 或者 500（內部錯誤）什麼的。</span></span><br><span class="line">      alert(<span class="string">"伺服器處理錯誤"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>ajax回傳的格式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"result"</span>: &#123;<span class="string">'結果'</span>&#125;,</span><br><span class="line">  <span class="string">"message"</span>: <span class="string">"登入成功"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/Guide/AJAX/Getting_Started" target="_blank" rel="noopener">Asynchronous JavaScript And XML</a></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/09/12/JS-studynotes/js_01.png&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS-Callback Function</title>
    <link href="hhttps://bryanhsiao.github.io/2021/09/11/JS-CallbackFunction/"/>
    <id>hhttps://bryanhsiao.github.io/2021/09/11/JS-CallbackFunction/</id>
    <published>2021-09-11T15:49:13.000Z</published>
    <updated>2021-09-11T15:50:12.754Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/09/11/JS-CallbackFunction/js_01.png"></p><font style="font-size:20px;">Callback Function &amp; Promise</font></blockquote><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 2018 iT 邦幫忙鐵人賽，看到 Kuro 大的重新認識 JavaScript 系列文，仔細的閱讀後，紀錄自己觀念不足的部份，也非常推薦給大家觀看此系列文。</p><div class="note info"><a href="https://ithelp.ithome.com.tw/users/20065504/ironman/1259?page=1" target="_blank" rel="noopener">Kuro-重新認識 JavaScript 系列</a></div><hr><h2 id="Callback-Function"><a href="#Callback-Function" class="headerlink" title="Callback Function"></a>Callback Function</h2><p>概念就如同：</p><p><em><strong>辦公室電話響了 (事件被觸發 Event fired) -&gt; 接電話 (處理事件 Event Handler)</strong></em></p><p>而寫成程式碼就類似：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 註：這裡只是比喻，並沒有電話響這個事件 XD</span></span><br><span class="line">Office.addEventListener(</span><br><span class="line">  <span class="string">"電話響"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 接電話 */</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>可以看到，<font color="red">Office</font> 透過 <font color="red">addEventListener</font> 方法註冊了一個事件，當這個事件被觸發時，它會去執行我們所指定的第二個參數，也就是某個「函式」(接電話)。</p><p>換句話說，這個函式只會在滿足了某個條件才會被動地去執行，我們就可以說這是一個 Callback function。</p><hr><h2 id="波動拳-a-k-a-“Callback-Hell”"><a href="#波動拳-a-k-a-“Callback-Hell”" class="headerlink" title="波動拳 (a.k.a. “Callback Hell”)"></a>波動拳 (a.k.a. “Callback Hell”)</h2><p>除了事件以外，還有另一個會需要用到 Callback function 的場景，就是「控制多個函式間執行的順序」。</p><p>下面舉例從簡單的事情慢慢演變成複雜時，會發生什麼情形</p><p>這裡定義了兩個 <font color="red">function</font>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"function A"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcB = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"function B"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">funcA();</span><br><span class="line">funcB();</span><br></pre></td></tr></table></figure><p>因為 <font color="red">funcA</font> 與 <font color="red">funcB</font> 都會立即執行，所以執行結果必定為：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"function A"</span>;</span><br><span class="line"><span class="string">"function B"</span>;</span><br></pre></td></tr></table></figure><p>但是，假設我們改成這樣，加上一個<font color="red">隨機生成的等待時間</font>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="built_in">Math</span>.random() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"function A"</span>);</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcB = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="built_in">Math</span>.random() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"function B"</span>);</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">funcA();</span><br><span class="line">funcB();</span><br></pre></td></tr></table></figure><p>這時候就沒辦法確定是 <font color="red">“function A”</font> 會先出現還是 <font color="red">“function B”</font> 會先出現了對吧？</p><p>像這種時候，為了確保執行的順序，就會透過 Callback function 的形式來處理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 為了確保先執行 funcA 再執行 funcB</span></span><br><span class="line"><span class="comment">// 我們在 funcA 加上 callback 參數</span></span><br><span class="line"><span class="keyword">var</span> funcA = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="built_in">Math</span>.random() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"function A"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 callback 是個函式就呼叫它</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">"function"</span>) &#123;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcB = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="built_in">Math</span>.random() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"function B"</span>);</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 funcB 作為參數帶入 funcA()</span></span><br><span class="line">funcA(funcB);</span><br></pre></td></tr></table></figure><p>像這樣，無論 <font color="red">funcA</font> 在執行的時候要等多久， <font color="red">funcB</font> 都會等到 <font color="red">console.log(‘function A’);</font> 之後才執行。</p><p>不過需要注意的是，當函式之間的相依過深，callback 多層之後產生的「波動拳」維護起來就會很可怕！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getData(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  getMoreData(a, <span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">    getMoreData(b, <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">      getMoreData(c, <span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">        getMoreData(d, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="/2021/09/11/JS-CallbackFunction/js_02.jpg"><hr><h2 id="再見-Callback-Hell"><a href="#再見-Callback-Hell" class="headerlink" title="再見 Callback Hell"></a>再見 Callback Hell</h2><p>執行順序的問題是一個，還有另一個常見的狀況是這樣，再回到 「Overcooked」 的場景。</p><div class="note info">用 Overcooked (遊戲名稱：煮過頭)  比喻 同步(Synchronous)的概念<br>假設邊緣人如我，只能自己一人玩 Overcooked，在領完食材原料之後，一樣會有青菜、番茄需要處理。<br><br>因為只有<font color="red">一個廚師</font>，所以要嘛先處理青菜、要嘛先處理番茄，必須先弄完一項之後再去處理另一項，整個流程會被前一個步驟卡住。<br><br>像這樣「<font color="red">先完成 A 才能做 B、C、D …</font>」的運作方式我們就會把它稱作「<font color="red">同步</font>」(Synchronous) 。</div><p>當我要確保「切青菜、切番茄、擺盤」三個動作<font color="red">都完成</font>之後，我才能繼續「<font color="red">上菜</font>」這個動作。</p><p>在面臨這種問題的時候，我要怎麼確保三個動作都完成之後，才繼續執行後面的程式呢？</p><p>最直覺的方式是新增一個變數來管理狀態：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = []; <span class="comment">//紀錄已完成的事件</span></span><br><span class="line"><span class="keyword">var</span> step = <span class="number">3</span>; <span class="comment">//全部完成的總數量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假設 funcA、funcB、funcC 分別代表「切青菜、切番茄、擺盤」</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    result.push(<span class="string">"A"</span>); <span class="comment">//紀錄 A 完成</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"A"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result.length === step) &#123;</span><br><span class="line">      funcD();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, (<span class="built_in">Math</span>.random() + <span class="number">1</span>) * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    result.push(<span class="string">"B"</span>); <span class="comment">//紀錄 B 完成</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"B"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result.length === step) &#123;</span><br><span class="line">      funcD();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, (<span class="built_in">Math</span>.random() + <span class="number">1</span>) * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcC</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    result.push(<span class="string">"C"</span>); <span class="comment">//紀錄 C 完成</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"C"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result.length === step) &#123;</span><br><span class="line">      funcD();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, (<span class="built_in">Math</span>.random() + <span class="number">1</span>) * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcD</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"上菜！"</span>);</span><br><span class="line">  result = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funcA();</span><br><span class="line">funcB();</span><br><span class="line">funcC();</span><br></pre></td></tr></table></figure><p>像上面這樣，當我們依序執行了 <font color="red">funcA()</font>、<font color="red">funcB()</font>、<font color="red">funcC()</font>，由於內部 <font color="red">setTimeout</font> 會等待亂數時間的關係，我們無法得知誰先誰後。 但可以確定的是，當這三個函式執行的時候就會去檢查 <font color="red">result.length === step</font> ，如果成立，就表示三個任務都已經完成，那麼就可以再去呼叫 <font color="red">funcD</font> 執行後續的事情。</p><p>如果不希望使用<font color="blue">全域變數來污染執行環境</font>的話，甚至可以包裝成一個通用的函式：</p><figure class="highlight js"><figcaption><span>閉包的概念</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serials</span>(<span class="params">tasks, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> step = tasks.length;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 檢查的邏輯寫在這裡</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">    result.push(r);</span><br><span class="line">    <span class="keyword">if</span> (result.length === step) &#123;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tasks.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    f(check);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那麼改寫一下 <font color="red">funcA()</font>、<font color="red">funcB()</font>、<font color="red">funcC()</font>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcA</span>(<span class="params">check</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"A"</span>);</span><br><span class="line">    check(<span class="string">"A"</span>);</span><br><span class="line">  &#125;, (<span class="built_in">Math</span>.random() + <span class="number">1</span>) * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcB</span>(<span class="params">check</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"B"</span>);</span><br><span class="line">    check(<span class="string">"B"</span>);</span><br><span class="line">  &#125;, (<span class="built_in">Math</span>.random() + <span class="number">1</span>) * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcC</span>(<span class="params">check</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"C"</span>);</span><br><span class="line">    check(<span class="string">"C"</span>);</span><br><span class="line">  &#125;, (<span class="built_in">Math</span>.random() + <span class="number">1</span>) * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcD</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"上菜！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後呼叫的時候，我們就可以透過這樣呼叫 <font color="red">serials()</font> ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serials([funcA, funcB, funcC], funcD);</span><br></pre></td></tr></table></figure><p>把想要提前執行的函式以<font color="red">陣列的方式</font>傳進 <font color="red">serials()</font> 作為第一個參數，當<font color="red">陣列中的函式都執行完畢</font>後，才會呼叫第二個參數的 <font color="red">funcD()</font>。</p><hr><h2 id="Promise-物件"><a href="#Promise-物件" class="headerlink" title="Promise 物件"></a>Promise 物件</h2><p>為了解決同步/非同步的問題，自從 <font color="red">ES6</font> 開始新增了一個叫做 <font color="red">Promise</font> 的特殊物件。</p><p>簡單來說，<font color="red">Promise</font> 按字面上的翻譯就是「承諾、約定」之意，回傳的結果要嘛是「<strong>完成</strong>」，要嘛是「<strong>拒絕</strong>」。</p><p>實際寫成 Promise 的程式碼大概像這樣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFirstPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(someValue); <span class="comment">// 完成</span></span><br><span class="line">  reject(<span class="string">"failure reason"</span>); <span class="comment">// 拒絕</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>要提供一個函式 promise 功能，讓它回傳一個 promise 物件即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAsyncFunction</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve() or reject()</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當 Promise 被<font color="red">完成</font>的時候，我們就可以呼叫 <font color="red">resolve()</font>，然後將取得的資料傳遞出去。 或是說想要<font color="red">拒絕</font> Promise ， 那麼就呼叫 <font color="red">reject()</font> 來拒絕。</p><hr><p>一般來說， <font color="red">Promise</font> 物件會有這幾種狀態：</p><ul><li>pending: 初始狀態，不是 fulfilled 或 rejected。</li><li>fulfilled: 表示操作成功地完成。</li><li>rejected: 表示操作失敗。</li></ul><img src="/2021/09/11/JS-CallbackFunction/js_03.png"><p>整個 <font color="red">Promise</font> 流程可以用這張圖表示：</p><img src="/2021/09/11/JS-CallbackFunction/js_04.png"><hr><p>如果我們需要<font color="red"><strong>依序</strong></font>串連執行多個 promise 功能的話，可以透過 <font color="red">.then()</font> 來做到。</p><p>以剛剛的 <font color="red">funcA()</font>、<font color="red">funcB()</font>、<font color="red">funcC()</font> 來當範例，我們將這三個函式分別透過 Promise 包裝：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"A"</span>);</span><br><span class="line">      resolve(<span class="string">"A"</span>); <span class="comment">// 完成</span></span><br><span class="line">    &#125;, (<span class="built_in">Math</span>.random() + <span class="number">1</span>) * <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"B"</span>);</span><br><span class="line">      resolve(<span class="string">"B"</span>); <span class="comment">// 完成</span></span><br><span class="line">    &#125;, (<span class="built_in">Math</span>.random() + <span class="number">1</span>) * <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcC</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"C"</span>);</span><br><span class="line">      resolve(<span class="string">"C"</span>); <span class="comment">// 完成</span></span><br><span class="line">    &#125;, (<span class="built_in">Math</span>.random() + <span class="number">1</span>) * <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後透過呼叫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">funcA()</span><br><span class="line">  .then(funcB)</span><br><span class="line">  .then(funcC);</span><br></pre></td></tr></table></figure><p>就可以做到等 <font color="red">funcA()</font> 被 「<strong>resolve</strong>」之後再執行 <font color="red">funcB()</font>，然後 resolve 再執行 <font color="red">funcC()</font> 的順序了。</p><hr><p>如果我們不在乎 <font color="red">funcA()</font>、<font color="red">funcB()</font>、<font color="red">funcC()</font> 誰先誰後，只關心這三個是否已經完成呢？</p><p>那就可以透過 <font color="red">Promise.all()</font> 來做到：</p><figure class="highlight js"><figcaption><span>Promise.all()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// funcA, funcB, funcC 的先後順序不重要</span></span><br><span class="line"><span class="comment">// 直到這三個函式都回覆 resolve 或是「其中一個」 reject 才會繼續後續的行為</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([funcA(), funcB(), funcC()]).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"上菜"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/09/11/JS-CallbackFunction/js_01.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;Callback Function &amp;amp; Promise&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    <category term="重新認識 JavaScript" scheme="hhttps://bryanhsiao.github.io/categories/JS/重新認識-JavaScript/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="重新認識 JavaScript" scheme="hhttps://bryanhsiao.github.io/tags/重新認識-JavaScript/"/>
    
    <category term="Promise" scheme="hhttps://bryanhsiao.github.io/tags/Promise/"/>
    
    <category term="Callback Function" scheme="hhttps://bryanhsiao.github.io/tags/Callback-Function/"/>
    
    <category term="Callback Hell" scheme="hhttps://bryanhsiao.github.io/tags/Callback-Hell/"/>
    
  </entry>
  
  <entry>
    <title>JS-物件、陣列以及型別判斷</title>
    <link href="hhttps://bryanhsiao.github.io/2021/09/09/JS-Typejudgment/"/>
    <id>hhttps://bryanhsiao.github.io/2021/09/09/JS-Typejudgment/</id>
    <published>2021-09-08T17:18:30.000Z</published>
    <updated>2021-09-08T17:21:45.082Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/09/09/JS-Typejudgment/js_01.png"></p><font style="font-size:20px;">物件、陣列以及型別判斷。</font></blockquote><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 2018 iT 邦幫忙鐵人賽，看到 Kuro 大的重新認識 JavaScript 系列文，仔細的閱讀後，紀錄自己觀念不足的部份，也非常推薦給大家觀看此系列文。</p><div class="note info"><a href="https://ithelp.ithome.com.tw/users/20065504/ironman/1259?page=1" target="_blank" rel="noopener">Kuro-重新認識 JavaScript 系列</a></div><hr><h2 id="基本型別與物件型別"><a href="#基本型別與物件型別" class="headerlink" title="基本型別與物件型別"></a>基本型別與物件型別</h2><p>JavaScript 內建的型別主要可以分成<font color="blue">基本型別 (Primitives)</font> 與<font color="blue">物件型別 (Object)</font> 兩大類。<br>而基本型別又分成 <font color="red">string</font>、<font color="red">number</font>、<font color="red">boolean</font>、<font color="red">null</font>、<font color="red">undefined</font> 幾種，<br>除了以上幾種之外，其他都可以歸類至</p><font color="blue">物件型別 (Object)</font><br><font color="red">物件型別 (Object)</font><br><font color="orange">物件型別 (Object)</font><hr><h2 id="判斷屬性是否存在"><a href="#判斷屬性是否存在" class="headerlink" title="判斷屬性是否存在"></a>判斷屬性是否存在</h2><p>方法 1：物件中<font color="red">不存在</font>的屬性，此時會回傳 <font color="red">undefined</font><br>方法 2：<font color="red">hasOwnProperty()</font> 方法<font color="red">不會</font>往上檢查物件的原型鏈(prototype chain)，而 <font color="red">in</font> 運算子，則<font color="red">會</font>繼續往物件原型鏈上檢查。</p><p><span id="inline-purple">方法 1</span></p><p>物件中<font color="red">不存在</font>的屬性，此時會回傳 <font color="red">undefined</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>但這麼做會有個例外，就是當該屬性剛好就是 <font color="red">undefined</font> 時，這招就沒用了。</p><p>除了檢查 undefined 之外，還有 <font color="red">in</font> 運算子 與 <font color="red">hasOwnProperty()</font> 方法。</p><p><span id="inline-purple">方法 2</span></p><p>雖然兩者都可以檢查物件的屬性是否存在，<br>但<font color="red">hasOwnProperty()</font> 方法<font color="red">不會</font>往上檢查物件的原型鏈(prototype chain)，，只會檢查物件本身是否存在這個屬性，<br>而 <font color="red">in</font> 運算子，則<font color="red">會</font>繼續往物件原型鏈上檢查。</p><figure class="highlight js"><figcaption><span>範例1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"Object"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 透過 in 檢查屬性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"name"</span> <span class="keyword">in</span> obj); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"value"</span> <span class="keyword">in</span> obj); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 透過 hasOwnProperty() 方法檢查</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">"name"</span>); <span class="comment">// true</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">"value"</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上述範例 1，雖然二種檢查結果都一樣，但我們可看下列的範例 2，當檢查某一屬性是在原型鋉上時，會有什麼不一樣</p><figure class="highlight js"><figcaption><span>範例2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//toString 為 原型鍊上的 屬性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 透過 in 檢查屬性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"toString"</span> <span class="keyword">in</span> obj); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 透過 hasOwnProperty() 方法檢查</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">"toString"</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h2 id="typeof-型別判斷"><a href="#typeof-型別判斷" class="headerlink" title="typeof: 型別判斷"></a>typeof: 型別判斷</h2><p>檢查變數型別 (正確來講應該是值，變數沒有型別，值才有)，可以透過 <font color="red">typeof</font> 運算子來處理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>; <span class="comment">// 'boolean'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">"Kanboo"</span>; <span class="comment">// 'string'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>; <span class="comment">// 'number'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span>; <span class="comment">// 'number'</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">// 'undefined'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">window</span>.alert; <span class="comment">// 'function'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">// 'object'</span></span><br></pre></td></tr></table></figure><p>要注意的是，透過 <font color="red">typeof</font> 運算子回傳的東西都是「<font color="red">字串</font>」。</p><h3 id="typeof-null-為什麼是-“object”"><a href="#typeof-null-為什麼是-“object”" class="headerlink" title="typeof null 為什麼是 “object” ?"></a>typeof null 為什麼是 “object” ?</h3><p>其實這只是一個 <font style="color:red;font-size:20px;">Bug</font> ，所以小心使用 <code>null</code> 。</p><blockquote><p><a href="https://javascriptrefined.io/null-and-typeof-9330e475d272" target="_blank" rel="noopener">參考 1: Null and typeof</a> &gt; <a href="http://2ality.com/2013/10/typeof-null.html" target="_blank" rel="noopener">參考 2: The history of “typeof null”</a></p></blockquote><h3 id="如何判別是否為陣列"><a href="#如何判別是否為陣列" class="headerlink" title="如何判別是否為陣列"></a>如何判別是否為陣列</h3><p>當我們利用 <font color="red">typeof</font> 去檢查一個「<font color="red">陣列</font>」時，會得到 “<font color="red">object</font>“ 的結果，</p><p><code>typeof [ ]; // &#39;object&#39;</code></p><p>但如果在實務上仍會有需要判斷某變數是否為一個陣列而非物件的時候，可用 <font color="red">isArray()</font> 方法，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray([]); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>]); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="keyword">new</span> <span class="built_in">Array</span>()); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123;&#125;); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">null</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">undefined</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/09/09/JS-Typejudgment/js_01.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;物件、陣列以及型別判斷。&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    <category term="重新認識 JavaScript" scheme="hhttps://bryanhsiao.github.io/categories/JS/重新認識-JavaScript/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="重新認識 JavaScript" scheme="hhttps://bryanhsiao.github.io/tags/重新認識-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS-事件機制的原理</title>
    <link href="hhttps://bryanhsiao.github.io/2021/09/06/JS-Bubbling-Capturing/"/>
    <id>hhttps://bryanhsiao.github.io/2021/09/06/JS-Bubbling-Capturing/</id>
    <published>2021-09-05T21:33:56.000Z</published>
    <updated>2021-09-05T21:34:52.116Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/09/06/JS-Bubbling-Capturing/js_01.png"></p><font style="font-size:20px;">事件冒泡 (Event Bubbling) &amp; 事件捕獲 (Event Capturing)</font></blockquote><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 2018 iT 邦幫忙鐵人賽，看到 Kuro 大的重新認識 JavaScript 系列文，仔細的閱讀後，紀錄自己觀念不足的部份，也非常推薦給大家觀看此系列文。</p><div class="note info"><a href="https://ithelp.ithome.com.tw/users/20065504/ironman/1259?page=1" target="_blank" rel="noopener">Kuro-重新認識 JavaScript 系列</a></div><hr><h2 id="事件冒泡-Event-Bubbling"><a href="#事件冒泡-Event-Bubbling" class="headerlink" title="事件冒泡 (Event Bubbling)"></a>事件冒泡 (Event Bubbling)</h2><img src="/2021/09/06/JS-Bubbling-Capturing/js_02.png"><blockquote><p><a href="http://www.java2s.com/Book/JavaScript/DOM/Event_Flow_capture_target_and_bubbling.htm" target="_blank" rel="noopener">圖片來源： Event Flow: capture, target, and bubbling</a></p></blockquote><p>事件冒泡指的是「從啟動事件的元素節點開始，逐層往上傳遞」，直到整個網頁的根節點，也就是 document。</p><hr><h2 id="事件捕獲-Event-Capturing"><a href="#事件捕獲-Event-Capturing" class="headerlink" title="事件捕獲 (Event Capturing)"></a>事件捕獲 (Event Capturing)</h2><img src="/2021/09/06/JS-Bubbling-Capturing/js_03.png"><blockquote><p><a href="http://www.java2s.com/Book/JavaScript/DOM/Event_Flow_capture_target_and_bubbling.htm" target="_blank" rel="noopener">圖片來源： Event Flow: capture, target, and bubbling</a></p></blockquote><p>剛剛說過「事件冒泡」機制是由下往上來傳遞，那麼「事件捕獲」(Event Capturing) 機制則正好相反。</p><hr><h2 id="事件傳遞順序"><a href="#事件傳遞順序" class="headerlink" title="事件傳遞順序"></a>事件傳遞順序</h2><p>既然事件傳遞順序有兩種機制，那<strong>我怎麼知道事件是依賴哪種機制</strong>執行的？</p><p>答案是：兩種都會執行。</p><img src="/2021/09/06/JS-Bubbling-Capturing/js_04.png"><blockquote><p><a href="https://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-phases" target="_blank" rel="noopener">圖片來源: W3C, DOM event flow</a></p></blockquote><div class="note primary">開啟console，分別點擊父元素、子元素<br><a href="https://codepen.io/Kanboo/pen/goKXby" target="_blank" rel="noopener">事件機制的原理</a></div><hr><h2 id="事件監聽-EventTarget-addEventListener"><a href="#事件監聽-EventTarget-addEventListener" class="headerlink" title="事件監聽 EventTarget.addEventListener()"></a>事件監聽 EventTarget.addEventListener()</h2><p>addEventListener() 基本上有三個參數，分別依序是</p><ul><li>事件名稱</li><li>事件的處理器(事件觸發時執行的 function)</li><li>Boolean，由這個 Boolean 決定事件是以「捕獲」或「冒泡」機制執行，若不指定則預設為「<font color="red">冒泡</font>」。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>綁定監聽動作</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"HI"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>使用這種方式來註冊事件的好處是可以重複指定多個「處理器」(handler) 給同一個元素的同一個事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"HI"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"HELLO"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>點擊後 console 出現：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"HI"</span>;</span><br><span class="line"><span class="string">"HELLO"</span>;</span><br></pre></td></tr></table></figure><p>若是要解除事件的註冊，則是透過 <font color="red">removeEventListener()</font> 來取消。</p><p><font color="red">removeEventListener()</font> 的三個參數與 <font color="red">addEventListener()</font> 一樣，分別是「事件名稱」、「事件的處理器」以及「捕獲」或「冒泡」的機制。</p><p>但是需要注意的是，由於 addEventListener() 可以同時針對某個事件綁定多個 handler，所以透過 removeEventListener() 解除事件的時候，<font color="red">第二個參數的 handler</font> 必須要與先前在 addEventListener() 綁定的 handler 是同一個「<font color="red">實體(記憶體位址)</font> 」。</p><figure class="highlight js"><figcaption><span>二個function各自存在不同的記憶體位址</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"HI"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除事件，但是沒用</span></span><br><span class="line">btn.removeEventListener(</span><br><span class="line">  <span class="string">"click"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"HI"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>像上面這樣，即使執行了 removeEventListener 來移除事件，但 click 時仍會出現 ‘HI’。 因為 addEventListener 與 removeEventListener 所移除的 handler 實際上是兩個不同<font color="red">實體(記憶體位址)</font> 的 function 物件。</p><figure class="highlight js"><figcaption><span>同一個function，同個記憶體位址</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 event handler 拉出來</span></span><br><span class="line"><span class="keyword">var</span> clickHandler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"HI"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, clickHandler, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除 clickHandler， ok!</span></span><br><span class="line">btn.removeEventListener(<span class="string">"click"</span>, clickHandler, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/09/06/JS-Bubbling-Capturing/js_01.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;事件冒泡 (Event Bubbling) &amp;amp; 事件捕獲 (Event Capturing)&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    <category term="重新認識 JavaScript" scheme="hhttps://bryanhsiao.github.io/categories/JS/重新認識-JavaScript/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="重新認識 JavaScript" scheme="hhttps://bryanhsiao.github.io/tags/重新認識-JavaScript/"/>
    
    <category term="事件冒泡 (Event Bubbling)" scheme="hhttps://bryanhsiao.github.io/tags/事件冒泡-Event-Bubbling/"/>
    
    <category term="事件捕獲 (Event Capturing)" scheme="hhttps://bryanhsiao.github.io/tags/事件捕獲-Event-Capturing/"/>
    
  </entry>
  
  <entry>
    <title>JS-各種迴圈的用法</title>
    <link href="hhttps://bryanhsiao.github.io/2021/09/04/JS-Traverse/"/>
    <id>hhttps://bryanhsiao.github.io/2021/09/04/JS-Traverse/</id>
    <published>2021-09-04T10:13:46.000Z</published>
    <updated>2021-09-04T10:19:16.723Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/09/04/JS-Traverse/js_01.jpg"></p><font style="font-size:20px;">紀錄各種<font color="red">迴圈</font>的用法。</font></blockquote><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JS 常常需要針對 <font color="blue">陣列(Array)</font>、<font color="blue">物件(Object)</font> 這二種資料進行分析及修改，<br>故整理下列幾種方法，</p><ul><li><p>單純遍歷陣列元素</p><ul><li>for</li><li>forin</li><li>forEach</li></ul></li><li><p>判斷是否符合資格</p><ul><li>every：遍歷每個元素<font color="blue">判斷</font>是否皆符合條件，若其一<font color="red">不符</font>，就回傳 <code>false</code></li><li>some： 遍歷每個元素<font color="blue">判斷</font>是否皆符合條件，若其一<font color="red">符合</font>，就回傳 <code>true</code></li></ul></li><li><p>產生新的陣列</p><ul><li>map：遍歷每個元素，進行 <font color="red">加工、校正</font></li><li>filter：遍歷每個元素，保留<font color="red">符合條件(true)</font>的值，不符合，則去除掉。</li><li>reduce：遍歷每個元素，依序<font color="red">組合、加總</font>，然後丟給下個元素，最終會回傳一個結果。</li></ul></li></ul><hr><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>最常見的用法，不多加說明。</p><p><span id="inline-purple">範例</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"Bryan"</span>, <span class="string">"Jack"</span>, <span class="string">"Rabbit"</span>, <span class="string">"Lucas"</span>, <span class="string">"Jack"</span>, <span class="string">"Lucas"</span>, <span class="string">"Rabbit"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="forin"><a href="#forin" class="headerlink" title="forin"></a>forin</h2><p>可傳入 <code>objec</code> 或 <code>array</code> 型態的資料。</p><p><span id="inline-purple">範例</span></p><figure class="highlight js"><figcaption><span>Array型態</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"zero"</span>, <span class="string">"one"</span>, <span class="string">"two"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>Object型態</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(obj[item]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="noopener">MDN-for…in</a></div><hr><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>可用來取代 <code>for</code> 的寫法，讓程式碼更簡短，省略掉定義 <code>i</code>、<code>arr.length</code>…等動作。</p><p><span id="inline-blue">語法</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach( callback(currentValue, index, array)&#123;</span><br><span class="line">    <span class="comment">/* your code */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>callback</p><ul><li>currentValue(<font color="red">常用</font>)：原陣列目前所迭代處理中的元素。</li><li>index(選用)：原陣列目前處理中的元素之<font color="blue">索引</font>。</li><li>array(選用)：呼叫 forEach() 方法的陣列。</li></ul><p><span id="inline-purple">範例</span></p><figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">MDN-forEach()</a></div><hr><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>對每個陣列元素<font color="blue">判斷</font>是否皆符合條件，若其一<font color="red">不符</font>，就回傳 <code>false</code></p><p><span id="inline-blue">語法</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.every( callback(currentValue, index, array)&#123;</span><br><span class="line">    <span class="comment">/* your code */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>callback</p><ul><li>currentValue(<font color="red">常用</font>)：原陣列目前所迭代處理中的元素。</li><li>index(選用)：原陣列目前處理中的元素之<font color="blue">索引</font>。</li><li>array(選用)：呼叫 every() 方法的陣列。</li></ul><p><span id="inline-purple">範例</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//是否大於10</span></span><br><span class="line">  <span class="keyword">return</span> element &gt;= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其中 5 沒有大於 10</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 皆符合大於 10</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank" rel="noopener">MDN-every()</a></div><hr><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p>對每個陣列元素<font color="blue">判斷</font>是否皆符合條件，若其一<font color="red">符合</font>，就回傳 <code>true</code></p><p><span id="inline-blue">語法</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.some( callback(currentValue, index, array)&#123;</span><br><span class="line">    <span class="comment">/* your code */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>callback</p><ul><li>currentValue(<font color="red">常用</font>)：原陣列目前所迭代處理中的元素。</li><li>index(選用)：原陣列目前處理中的元素之<font color="blue">索引</font>。</li><li>array(選用)：呼叫 some() 方法的陣列。</li></ul><p><span id="inline-purple">範例</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBiggerThan10</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//是否大於10</span></span><br><span class="line">  <span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部都無 大於10</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其中 12 有大於10</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">MDN-some()</a></div><hr><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>可對每個陣列元素進行 <font color="red">加工、校正</font> 的處理，最後回傳一個 <font color="red">新的陣列</font>。</p><div class="note warning">原先的陣列與後來新產生出的陣列，<font color="red">個數(Array.length)</font> 會一樣多。</div><p><span id="inline-blue">語法</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.map( callback(currentValue, index, array)&#123;</span><br><span class="line">    <span class="comment">/* your code */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>callback</p><ul><li>currentValue(<font color="red">常用</font>)：原陣列目前所迭代處理中的元素。</li><li>index(選用)：原陣列目前處理中的元素之<font color="blue">索引</font>。</li><li>array(選用)：呼叫 map() 方法的陣列。</li></ul><p><span id="inline-purple">範例 1</span></p><figure class="highlight js"><figcaption><span>加工</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = myArr.map(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 每個數都加1</span></span><br><span class="line">  <span class="keyword">return</span> element + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [ 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 2</span></p><figure class="highlight js"><figcaption><span>校正</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArr = [<span class="number">1</span>, <span class="number">20</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">80</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = myArr.map(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 校正大於10的數字，統一變100</span></span><br><span class="line">  <span class="keyword">if</span> (element &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [1, 100, 3, 100, 100, 6, 7, 100, 9, 100]</span></span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">MDN-map()</a></div><hr><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>遍歷每個元素，保留<font color="red">符合條件(true)</font>的值，不符合，則去除掉。</p><div class="note warning">原先的陣列與後來新產生出的陣列，<font color="red">個數(Array.length)</font>可能不一樣多。</div><p><span id="inline-blue">語法</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.filter( callback(currentValue, index, array)&#123;</span><br><span class="line">    <span class="comment">/* your code */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>callback</p><ul><li>currentValue(<font color="red">常用</font>)：原陣列目前所迭代處理中的元素。</li><li>index(選用)：原陣列目前處理中的元素之<font color="blue">索引</font>。</li><li>array(選用)：呼叫 filter() 方法的陣列。</li></ul><p><span id="inline-purple">範例</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArr = [<span class="number">1</span>, <span class="number">20</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">80</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = myArr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 取得大於50的數</span></span><br><span class="line">  <span class="keyword">return</span> element &gt;= <span class="number">50</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [50, 80]</span></span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">MDN-filter()</a></div><hr><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>遍歷每個元素，依序組合、加總，然後丟給下個元素，最終會回傳一個結果。</p><p><span id="inline-blue">語法</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce( callback(accumlator, currentValue, index, array)&#123;</span><br><span class="line">    <span class="comment">/* your code */</span></span><br><span class="line">&#125;, initialValue)</span><br></pre></td></tr></table></figure><p>callback</p><ul><li>accumulator(<font color="red">常用</font>)：用來累積回呼函式回傳值的累加器。</li><li>currentValue(<font color="red">常用</font>)：原陣列目前所迭代處理中的元素。</li><li>index(選用)：原陣列目前所迭代處理中的元素之<font color="blue">索引</font>。</li><li>array(選用)：呼叫 reduce() 方法的陣列。</li></ul><p>initialValue(<font color="red">常用</font>)：於第一次呼叫 callback 時要傳入的累加器初始值。</p><p><span id="inline-purple">範例 1</span></p><p>注意 reduce 第二個參數 <code>0</code> , 代表的意思是開始執行遍歷前的<font color="red">初始值</font>。</p><figure class="highlight js"><figcaption><span>有設定初始值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 處理每個元素後等待回傳結果，第一次處理時代入初始值 0</span></span><br><span class="line"><span class="keyword">var</span> result = myArr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, element</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prev, element);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 與之前的數值加總，回傳後代入下一輪的處理</span></span><br><span class="line">  <span class="keyword">return</span> prev + element;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">prev,element 的執行log，共執行三次</span></span><br><span class="line"><span class="comment">第一次：0 1</span></span><br><span class="line"><span class="comment">第二次：1 2</span></span><br><span class="line"><span class="comment">第三次：3 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最終結果</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 2</span></p><p>注意此次<font color="red">沒有設定</font>reduce 第二個參數, 此時就會自動抓取陣列<font color="red">第一個元素</font>當作初始值。</p><figure class="highlight js"><figcaption><span>無初始值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 處理每個元素後等待回傳結果，第一次處理時代入初始值 0</span></span><br><span class="line"><span class="keyword">var</span> result = myArr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, element</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prev, element);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 與之前的數值加總，回傳後代入下一輪的處理</span></span><br><span class="line">  <span class="keyword">return</span> prev + element;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">prev,element 的執行log，共執行二次</span></span><br><span class="line"><span class="comment">第一次：1 2</span></span><br><span class="line"><span class="comment">第二次：3 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最終結果</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 3</span></p><p>除了一般數字的加總，也可配合判斷式，最終產出一個新的陣列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = [<span class="string">"bryan"</span>, <span class="string">"Jack"</span>, <span class="string">"Rabbit"</span>, <span class="string">"Lucas"</span>, <span class="string">"Jack"</span>, <span class="string">"Lucas"</span>, <span class="string">"Rabbit"</span>];</span><br><span class="line"><span class="keyword">let</span> result_04 = source.reduce(<span class="function">(<span class="params">p, c</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//includes 判斷是否已存在</span></span><br><span class="line">  <span class="keyword">if</span> (!p.includes(c)) p.push(c);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"p"</span>, p);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">迴圈的執行log，共執行七次</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">p ["bryan"]</span></span><br><span class="line"><span class="comment">p ["bryan", "Jack"]</span></span><br><span class="line"><span class="comment">p ["bryan", "Jack", "Rabbit"]</span></span><br><span class="line"><span class="comment">p ["bryan", "Jack", "Rabbit", "Lucas"]</span></span><br><span class="line"><span class="comment">p ["bryan", "Jack", "Rabbit", "Lucas"]</span></span><br><span class="line"><span class="comment">p ["bryan", "Jack", "Rabbit", "Lucas"]</span></span><br><span class="line"><span class="comment">p ["bryan", "Jack", "Rabbit", "Lucas"]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最終結果</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result_04"</span>, result_04); <span class="comment">// ["bryan", "Jack", "Rabbit", "Lucas"]</span></span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">MDN-Reduce()</a><br><a href="http://fred-zone.blogspot.tw/2017/01/javascript-mapreduce.html" target="_blank" rel="noopener">fred-Map、Reduce</a></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/09/04/JS-Traverse/js_01.jpg&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;紀錄各種&lt;font color=&quot;red&quot;&gt;迴圈&lt;/font&gt;的用法。&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="for" scheme="hhttps://bryanhsiao.github.io/tags/for/"/>
    
    <category term="forin" scheme="hhttps://bryanhsiao.github.io/tags/forin/"/>
    
    <category term="forEach" scheme="hhttps://bryanhsiao.github.io/tags/forEach/"/>
    
    <category term="every" scheme="hhttps://bryanhsiao.github.io/tags/every/"/>
    
    <category term="some" scheme="hhttps://bryanhsiao.github.io/tags/some/"/>
    
    <category term="map" scheme="hhttps://bryanhsiao.github.io/tags/map/"/>
    
    <category term="filter" scheme="hhttps://bryanhsiao.github.io/tags/filter/"/>
    
    <category term="reduce" scheme="hhttps://bryanhsiao.github.io/tags/reduce/"/>
    
  </entry>
  
  <entry>
    <title>JS-ArrayUnique</title>
    <link href="hhttps://bryanhsiao.github.io/2021/09/02/JS-ArrayUnique/"/>
    <id>hhttps://bryanhsiao.github.io/2021/09/02/JS-ArrayUnique/</id>
    <published>2021-09-02T15:56:10.000Z</published>
    <updated>2021-09-02T15:57:13.371Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/09/02/JS-ArrayUnique/js_01.png"></p><font style="font-size:20px;">紀錄 ArrayUnique 從早期<code>indexOf</code>的方式到現今各種優化的寫法。</font></blockquote><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>下列的各種範例，統一使用的 <strong>Array 資料</strong>，如下</p><figure class="highlight js"><figcaption><span>ArrayData</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = [<span class="string">"Kanboo"</span>, <span class="string">"Jack"</span>, <span class="string">"Rabbit"</span>, <span class="string">"Lucas"</span>, <span class="string">"Jack"</span>, <span class="string">"Lucas"</span>, <span class="string">"Rabbit"</span>];</span><br></pre></td></tr></table></figure><hr><h2 id="forloop-indexOf"><a href="#forloop-indexOf" class="headerlink" title="forloop + indexOf"></a>forloop + indexOf</h2><p>早期使用的 <code>for迴圈</code> + <code>indexOf</code> 判斷是否已存在的值。</p><figure class="highlight js"><figcaption><span>indexOf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = [<span class="string">"Kanboo"</span>, <span class="string">"Jack"</span>, <span class="string">"Rabbit"</span>, <span class="string">"Lucas"</span>, <span class="string">"Jack"</span>, <span class="string">"Lucas"</span>, <span class="string">"Rabbit"</span>];</span><br><span class="line"><span class="keyword">let</span> result_01 = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; source.length; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> el = source[i];</span><br><span class="line">  <span class="keyword">if</span> (result_01.indexOf(el) === <span class="number">-1</span>) result_01.push(el);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result_01"</span>, result_01); <span class="comment">// ["Kanboo", "Jack", "Rabbit", "Lucas"]</span></span><br></pre></td></tr></table></figure><hr><h2 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h2><p>在 ES6 提供了一個新方法：<code>Array.prototype.includes()</code>，判斷陣列中是否已有相同的值？</p><ul><li>有相同的值，回傳 <code>true</code></li><li>無相同的值，回傳 <code>false</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = [<span class="string">"Kanboo"</span>, <span class="string">"Jack"</span>, <span class="string">"Rabbit"</span>, <span class="string">"Lucas"</span>, <span class="string">"Jack"</span>, <span class="string">"Lucas"</span>, <span class="string">"Rabbit"</span>];</span><br><span class="line"><span class="keyword">let</span> result_02 = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; source.length; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> el = source[i];</span><br><span class="line">  <span class="keyword">if</span> (!result_02.includes(el)) result_02.push(el);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result_02"</span>, result_02); <span class="comment">// ["Kanboo", "Jack", "Rabbit", "Lucas"]</span></span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">MDN-Array.prototype.includes()</a></div><hr><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>將原本使用的 <code>for迴圈</code> ，改使用 <code>forEach</code> 執行，省略掉定義 <code>i</code>、<code>source.length</code>…等動作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = [<span class="string">"Kanboo"</span>, <span class="string">"Jack"</span>, <span class="string">"Rabbit"</span>, <span class="string">"Lucas"</span>, <span class="string">"Jack"</span>, <span class="string">"Lucas"</span>, <span class="string">"Rabbit"</span>];</span><br><span class="line"><span class="keyword">let</span> result_03 = [];</span><br><span class="line"></span><br><span class="line">source.forEach(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!result_03.includes(el)) result_03.push(el);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result_03"</span>, result_03); <span class="comment">// ["Kanboo", "Jack", "Rabbit", "Lucas"]</span></span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">MDN-arr.forEach</a></div><hr><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h2><p>遍歷每個元素，依序<font color="red">組合、加總</font>，然後丟給下個元素，最終會回傳<font color="red">一個結果</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = [<span class="string">"Kanboo"</span>, <span class="string">"Jack"</span>, <span class="string">"Rabbit"</span>, <span class="string">"Lucas"</span>, <span class="string">"Jack"</span>, <span class="string">"Lucas"</span>, <span class="string">"Rabbit"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result_04 = source.reduce(<span class="function">(<span class="params">p, c</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//includes 判斷是否已存在</span></span><br><span class="line">  <span class="keyword">if</span> (!p.includes(c)) p.push(c);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result_04"</span>, result_04); <span class="comment">// ["Kanboo", "Jack", "Rabbit", "Lucas"]</span></span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">MDN-reduce()</a></div><hr><h2 id="Set-Array-from"><a href="#Set-Array-from" class="headerlink" title="Set() + Array.from()"></a>Set() + Array.from()</h2><p><code>Set</code> 對象允許你存儲任何類型的<font color="red">唯一值</font>，無論是原始值或者是對象引用。</p><p><code>Array.from()</code> 會從類陣列(array-like)或是可迭代的物件<font color="red">建立一個新的陣列</font>。</p><p>根據上述二種方法的特性，快速達成產生一個 <font color="red"><strong>已去除重覆值的新陣列</strong></font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = [<span class="string">"Kanboo"</span>, <span class="string">"Jack"</span>, <span class="string">"Rabbit"</span>, <span class="string">"Lucas"</span>, <span class="string">"Jack"</span>, <span class="string">"Lucas"</span>, <span class="string">"Rabbit"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 將 source資料 丟進 new set，使其產生一個新的 set集合 ，並且已去除重覆的值</span></span><br><span class="line"><span class="comment">//2. 然後再將 set集合 丟進 Array.from，將 set集合的資料 轉化成 Array型態。(註：產生新陣列，不影響舊資料)</span></span><br><span class="line"><span class="keyword">let</span> result_05 = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(source));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result_05"</span>, result_05); <span class="comment">// ["Kanboo", "Jack", "Rabbit", "Lucas"]</span></span><br></pre></td></tr></table></figure><div class="note info"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener">MDN-Array.from()</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="noopener">MDN-Set()</a><br><a href="http://es6.ruanyifeng.com/#docs/set-map#Set" target="_blank" rel="noopener">阮一峰-Set()</a></div><hr><h2 id="Set-Spread"><a href="#Set-Spread" class="headerlink" title="Set() + Spread"></a>Set() + Spread</h2><p><code>...</code> 為 ES6 的展開運算子（spread operator），把一個陣列展開(expand)成個別數值</p><figure class="highlight js"><figcaption><span>簡寫</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> source = [<span class="string">"Kanboo"</span>, <span class="string">"Jack"</span>, <span class="string">"Rabbit"</span>, <span class="string">"Lucas"</span>, <span class="string">"Jack"</span>, <span class="string">"Lucas"</span>, <span class="string">"Rabbit"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 將 source資料 丟進 new set，使其產生一個新的 set集合 ，並且已去除重覆的值</span></span><br><span class="line"><span class="comment">//2. 用 ...(展開運算子)，將 Set 轉換為 Array(註：...set外圈有個 中框號[]，用來轉換陣列型態)</span></span><br><span class="line"><span class="keyword">let</span> result_06 = [...new <span class="built_in">Set</span>(source)];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"result_06"</span>, result_06); <span class="comment">// ["Kanboo", "Jack", "Rabbit", "Lucas"]</span></span><br></pre></td></tr></table></figure><p><span id="inline-green">補充說明</span></p><p><code>...</code> 只是將 <code>陣列</code>、<code>set</code> 的值拆解一個一個的值，並<font color="red">無額外產生新陣列</font>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(...number); <span class="comment">// 1,2,3,4,5</span></span><br><span class="line"><span class="built_in">console</span>.log(...mySet); <span class="comment">// 1,2,3,4</span></span><br></pre></td></tr></table></figure><div class="note info"><a href="https://pjchender.blogspot.tw/2017/01/es6-spread-operatorrest-operator.html" target="_blank" rel="noopener">PJ-…</a><br><a href="http://eddychang.me/blog/16-javascript/45-spread-operator-rest-parameters.html" target="_blank" rel="noopener">eddy-…</a></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/09/02/JS-ArrayUnique/js_01.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;紀錄 ArrayUnique 從早期&lt;code&gt;indexOf&lt;/code&gt;的方式到現今各種優化的寫法。&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="Array" scheme="hhttps://bryanhsiao.github.io/tags/Array/"/>
    
    <category term="Unique" scheme="hhttps://bryanhsiao.github.io/tags/Unique/"/>
    
    <category term="Reduce" scheme="hhttps://bryanhsiao.github.io/tags/Reduce/"/>
    
    <category term="Set" scheme="hhttps://bryanhsiao.github.io/tags/Set/"/>
    
    <category term="Spread" scheme="hhttps://bryanhsiao.github.io/tags/Spread/"/>
    
  </entry>
  
  <entry>
    <title>CSS-webfont 字體</title>
    <link href="hhttps://bryanhsiao.github.io/2021/09/01/CSS-Webfont/"/>
    <id>hhttps://bryanhsiao.github.io/2021/09/01/CSS-Webfont/</id>
    <published>2021-09-01T15:30:07.000Z</published>
    <updated>2021-09-01T15:31:19.578Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/09/01/CSS-Webfont/webfont_01.png"></p></blockquote><a id="more"></a><hr><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入字體</span></span><br><span class="line">@<span class="keyword">import</span> url(//fonts.googleapis.com/earlyaccess/notosansscsliced.css);</span><br><span class="line"></span><br><span class="line"><span class="comment">//設定字體</span></span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">"Noto Sans SC Sliced"</span>, sans-serif;</span><br></pre></td></tr></table></figure><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p></p><p data-height="322" data-theme-id="0" data-slug-hash="dJpzZm" data-default-tab="result" data-user="Kanboo" data-embed-version="2" data-pen-title="Webfont - 思源體" class="codepen">See the Pen <a href="https://codepen.io/Kanboo/pen/dJpzZm/" target="_blank" rel="noopener">Webfont - 思源體</a> by Kanboo (<a href="https://codepen.io/Kanboo" target="_blank" rel="noopener">@Kanboo</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><hr><h2 id="問題紀錄"><a href="#問題紀錄" class="headerlink" title="問題紀錄"></a>問題紀錄</h2><p>雖然已有在 css 設定 <font color="blue">font-family: ‘Noto Sans SC Sliced’, sans-serif;</font> ，<br>不過還是沒套用到新的 <strong>font-family</strong> ，因為<font color="red">CSS 權重</font>的問題，還是使用預設的 <font color="blue">微體正黑體</font>，</p><img src="/2021/09/01/CSS-Webfont/webfont_02.png"><p>可能是因為 codepen 有額外加 font-family 設定，導致 <code>&lt;style&gt;</code>的 CSS 權限 大於在 CSS 檔裡面的屬性設定</p><img src="/2021/09/01/CSS-Webfont/webfont_03.png"><p>所以若要強制轉換的話，就需要加 <font color="red">!important</font></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">"Noto Sans SC Sliced"</span>, sans-serif <span class="meta">!important</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><div class="note info"><a href="https://www.landiannews.com/archives/38885.html" target="_blank" rel="noopener">谷歌提出字体切片方案</a><br><a href="https://fonts.google.com/earlyaccess#Noto+Sans+SC+Sliced" target="_blank" rel="noopener">Noto Sans SC Sliced</a><br></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/09/01/CSS-Webfont/webfont_01.png&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/tags/CSS/"/>
    
    <category term="webfont" scheme="hhttps://bryanhsiao.github.io/tags/webfont/"/>
    
    <category term="字體" scheme="hhttps://bryanhsiao.github.io/tags/字體/"/>
    
  </entry>
  
  <entry>
    <title>CSS-垂直置中的方法</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/31/CSS-vertical-align/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/31/CSS-vertical-align/</id>
    <published>2021-08-30T16:00:00.000Z</published>
    <updated>2021-08-31T14:39:57.991Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>整理常用 CSS 常用的 <span id="inline-blue">垂直置中</span> 的方法。</p></blockquote><a id="more"></a><hr><h2 id="文字的垂直置中方法"><a href="#文字的垂直置中方法" class="headerlink" title="文字的垂直置中方法"></a>文字的垂直置中方法</h2><p>此方法適用 <font style="color:#f90;font-size:20px;">單行</font>，因為是行高，所以會在行內元素的上下都加上行高的 1/2 ，<br>如果<font style="color:#f90;font-size:20px;">多行</font>，第二行與第一行的間距會變超大，就會導致沒有垂直置中的效果。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// height 和 line-height 要一樣高</span><br><span class="line"></span><br><span class="line">.div0,.div1 &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line"><span class="addition">+ height: 250px;</span></span><br><span class="line"><span class="addition">+ line-height: 250px;</span></span><br><span class="line">  text-align: center;</span><br><span class="line">  border: 1px solid #000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p data-height="326" data-theme-id="0" data-slug-hash="GREobwy" data-default-tab="css,result" data-user="Kanboo" data-embed-version="2" data-pen-title="垂直置中 - line-height" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/GREobwy" target="_blank" rel="noopener">垂直置中 - line-height</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><hr><h2 id="calc-amp-transform"><a href="#calc-amp-transform" class="headerlink" title="calc &amp; transform"></a>calc &amp; transform</h2><p>使用 <font style="color:red;font-size:20px;">calc</font> 動態計算的能力，讓要置中的 div 的 top 屬性，<br>與上方的距離是<font style="color:#f90;font-size:20px;">「50% 的外框高度 + 50% 的 div 高度」</font>，就可以做到垂直置中。</p><p>範例 1：設定 top：50%，再扣掉 div 的 高度/2</p><ul><li>方法 1：top: calc( 50% - (高度/2) )</li><li>方法 2：top: 50%; margin-top: -(高度/2);</li><li>方法 3：top: 50%; transform: translateY(-50%); <font style="color:red;font-size:16px;"><i class="fa fa-thumbs-o-up" aria-hidden="true"></i>自行計算 50%的 div 高度</font></li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.redbox &#123;</span><br><span class="line">    background: #c00;</span><br><span class="line">    float: left;</span><br><span class="line"><span class="addition">+   position: relative; //要宣告position，才能使用 top、left</span></span><br><span class="line">    width: 30px;</span><br><span class="line"><span class="deletion">-   //計算方法1</span></span><br><span class="line"><span class="addition">+   height: 30px;</span></span><br><span class="line"><span class="addition">+   top: calc(50% - 15px); //高：30/2=15</span></span><br><span class="line">  &#125;</span><br><span class="line">  .greenbox &#123;</span><br><span class="line">    background: #0c0;</span><br><span class="line">    float: left;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 30px;</span><br><span class="line"><span class="deletion">-   //計算方法2</span></span><br><span class="line"><span class="addition">+   height: 80px;</span></span><br><span class="line"><span class="addition">+   top: 50%;</span></span><br><span class="line"><span class="addition">+   margin-top: -40px;  //高：80/2=40</span></span><br><span class="line">  &#125;</span><br><span class="line">  .bluebox &#123;</span><br><span class="line">    background: #00f;</span><br><span class="line">    float: left;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 30px;</span><br><span class="line">    height: 50px;</span><br><span class="line"><span class="deletion">-   //計算方法3</span></span><br><span class="line"><span class="addition">+   top:50%;</span></span><br><span class="line"><span class="addition">+   transform: translateY(-50%);</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p></p><p data-height="280" data-theme-id="0" data-slug-hash="yLXedPZ" data-default-tab="css,result" data-user="Bryan" data-embed-version="2" data-pen-title="垂直置中 - calc 動態計算1" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/yLXedPZ" target="_blank" rel="noopener">垂直置中 - calc 動態計算1</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>範例 2：將三個 div 設定寬高各 30px，將滑鼠移到黑框內，可觀看效果。</p><p></p><p data-height="277" data-theme-id="0" data-slug-hash="QWgyXaV" data-default-tab="css,result" data-user="Bryan" data-embed-version="2" data-pen-title="垂直置中 - calc 動態計算2" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/QWgyXaV" target="_blank" rel="noopener">垂直置中 - calc 動態計算2</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><hr><h2 id="絕對定位"><a href="#絕對定位" class="headerlink" title="絕對定位"></a>絕對定位</h2><p>利用絕對位置來指定，要將 <font style="color:red;font-size:20px;">上下</font> 的數值都設為 <font style="color:red;font-size:20px;">0</font>，再搭配一個 <font style="color:red;font-size:20px;">margin:auto</font>，就可以辦到垂直置中。</p><div class="note info">邏輯：<br>這個方法同時設定top和bottom為0，使得這個div完全不可能符合，最後再透過margin這個指令，讓它達到垂直置中的效果<br></div><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  .redbox &#123;</span><br><span class="line"><span class="deletion">-   // 垂直置中</span></span><br><span class="line">    background: #c00;</span><br><span class="line">    position: absolute; //要宣告，才能使用 top、left</span><br><span class="line"><span class="addition">+   top: 0;</span></span><br><span class="line"><span class="addition">+   bottom: 0;</span></span><br><span class="line"><span class="addition">+   margin: auto;</span></span><br><span class="line">  &#125;</span><br><span class="line">  .bluebox &#123;</span><br><span class="line"><span class="deletion">-   // 垂直置中 + 水平置中</span></span><br><span class="line">    background: blue;</span><br><span class="line">    position: absolute; //要宣告，才能使用 top、left</span><br><span class="line">    top: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line"><span class="addition">+   left: 0;</span></span><br><span class="line"><span class="addition">+   right: 0;</span></span><br><span class="line">    margin: auto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p></p><p data-height="230" data-theme-id="0" data-slug-hash="dyRGBZp" data-default-tab="css,result" data-user="Bryan" data-embed-version="2" data-pen-title="垂直置中 - 絕對定位" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/dyRGBZp" target="_blank" rel="noopener">垂直置中 - 絕對定位</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><hr><h2 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a>Flexbox</h2><p>CSS3 最威的盒子模型：Flexbox，使用 <font style="color:#f90;font-size:20px;">align-items</font> 或 <font style="color:#f90;font-size:20px;">align-content</font> 的屬性，</p><p>輕輕鬆鬆就可以做到垂直置中的效果喔，Bootstrap 4 也有用喔。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.div0 &#123;</span><br><span class="line"><span class="addition">+ display: flex;</span></span><br><span class="line"><span class="addition">+ align-items: center;</span></span><br><span class="line"><span class="addition">+ justify-content: center;</span></span><br><span class="line">  width: 150px;</span><br><span class="line">  height: 150px;</span><br><span class="line">  border: 1px solid #000;</span><br><span class="line"></span><br><span class="line">  .redbox &#123;</span><br><span class="line">    width: 30px;</span><br><span class="line">    height: 30px;</span><br><span class="line">    background: #c00;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p data-height="225" data-theme-id="0" data-slug-hash="MWoKMvx" data-default-tab="css,result" data-user="Bryan Hsiao" data-embed-version="2" data-pen-title="垂直置中 - Flexbox" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/MWoKMvx" target="_blank" rel="noopener">垂直置中 - Flexbox</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><hr><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><div class="note info"><a href="http://www.oxxostudio.tw/articles/201502/css-vertical-align-7methods.html" target="_blank" rel="noopener">CSS 垂直置中的七個方法</a><br><a href="https://pjchender.blogspot.tw/2015/04/css_15.html" target="_blank" rel="noopener">CSS垂直置中的方法</a><br></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;整理常用 CSS 常用的 &lt;span id=&quot;inline-blue&quot;&gt;垂直置中&lt;/span&gt; 的方法。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/tags/CSS/"/>
    
    <category term="vertical-align" scheme="hhttps://bryanhsiao.github.io/tags/vertical-align/"/>
    
    <category term="垂直置中" scheme="hhttps://bryanhsiao.github.io/tags/垂直置中/"/>
    
  </entry>
  
  <entry>
    <title>CSS-transition 轉場效果</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/29/CSS-Transition/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/29/CSS-Transition/</id>
    <published>2021-08-29T13:23:45.000Z</published>
    <updated>2021-08-31T14:24:41.707Z</updated>
    
    <content type="html"><![CDATA[<img src="/2021/08/29/CSS-Transition/transition_01.png"><font style="font-size:18px;"><br>轉場是從 A 狀態，轉變成 B 狀態，中間的過程，就叫轉場，在 CSS 中叫做 transition。<br></font><a id="more"></a><h2 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition</span>: property duration timing-function delay;</span><br><span class="line"><span class="attribute">transition</span>: 套用的屬性 花費時間 時間速率 等待時間;</span><br><span class="line"></span><br><span class="line"><span class="attribute">transition</span>: all <span class="number">2s</span> ease-out <span class="number">1s</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同於：</span></span><br><span class="line"><span class="attribute">transition-property</span>: all; <span class="comment">// default: all</span></span><br><span class="line"><span class="attribute">transition-duration</span>: <span class="number">2s</span>; <span class="comment">// default: 0；2s 表示 2 秒；2ms 表示 2 毫秒。</span></span><br><span class="line"><span class="attribute">transition-timing-function</span>: ease-out;</span><br><span class="line"><span class="attribute">transition-delay</span>: <span class="number">1s</span>; <span class="comment">// 開始進行轉場效果之前，所要等待的時間。</span></span><br></pre></td></tr></table></figure><h2 id="transition-timing-function-時間速率"><a href="#transition-timing-function-時間速率" class="headerlink" title="transition-timing-function 時間速率"></a>transition-timing-function 時間速率</h2><img src="/2021/08/29/CSS-Transition/transition-timing-function.png"><p><br></p><p></p><p data-height="450" data-theme-id="dark" data-slug-hash="oNwbKvw" data-default-tab="css,result" data-user="bryan-hsiao" data-embed-version="2" data-pen-title="transition 各種速率" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/oNwbKvw" target="_blank" rel="noopener">transition 各種速率</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><h3 id="範例-1：hover"><a href="#範例-1：hover" class="headerlink" title="範例 1：hover"></a>範例 1：hover</h3><p></p><p data-height="265" data-theme-id="0" data-slug-hash="eYRJqmN" data-default-tab="css,result" data-user="Bryan-Hsiao" data-embed-version="2" data-pen-title="Transition - hover" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/eYRJqmN" target="_blank" rel="noopener">Transition - hover</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><h3 id="範例-2：設定-Two-CSS-properties"><a href="#範例-2：設定-Two-CSS-properties" class="headerlink" title="範例 2：設定 Two CSS properties"></a>範例 2：設定 Two CSS properties</h3><p></p><p data-height="265" data-theme-id="0" data-slug-hash="MWoKNwY" data-default-tab="css,result" data-user="Bryan-Hsiao" data-embed-version="2" data-pen-title="Transition - 設定Two CSS properties" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/MWoKNwY" target="_blank" rel="noopener">Transition - 設定Two CSS properties</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>特別的點：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//設定二個 CSS屬性，設定不同 時間、速率..等</span></span><br><span class="line"><span class="attribute">transition</span>: background <span class="number">0.2s</span> linear, border-radius <span class="number">1s</span> ease-in <span class="number">1s</span>;</span><br></pre></td></tr></table></figure><p>上面案例，特別於在 <strong>:hover</strong> 時，有改變 <strong>背景色</strong> 和 <strong>圓角</strong> 效果，<br>不過在 transition 的設定，分別針對 二個屬性設定不同的時間、速率…等</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="http://carlos-studio.com/2017/02/23/css-transition-%E8%BD%89%E5%A0%B4%E6%95%88%E6%9E%9C/" target="_blank" rel="noopener">[CSS][Transition] 轉場效果</a></p><p><a href="https://eyesofkids.gitbooks.io/css3/contents/transitions.html#css3轉場效果transitions" target="_blank" rel="noopener">CSS3 轉場效果(transitions)</a></p><p><a href="https://wcc723.github.io/css/2013/08/24/css-transtion-speed/" target="_blank" rel="noopener">CSS transition 各種速率</a></p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;/2021/08/29/CSS-Transition/transition_01.png&quot;&gt;
&lt;font style=&quot;font-size:18px;&quot;&gt;&lt;br&gt;轉場是從 A 狀態，轉變成 B 狀態，中間的過程，就叫轉場，在 CSS 中叫做 transition。&lt;br&gt;&lt;/font&gt;</summary>
    
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/tags/CSS/"/>
    
    <category term="transition" scheme="hhttps://bryanhsiao.github.io/tags/transition/"/>
    
    <category term="動畫" scheme="hhttps://bryanhsiao.github.io/tags/動畫/"/>
    
    <category term="轉場效果" scheme="hhttps://bryanhsiao.github.io/tags/轉場效果/"/>
    
  </entry>
  
  <entry>
    <title>CSS-切版練習</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/27/CSS-RWDlayout/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/27/CSS-RWDlayout/</id>
    <published>2021-08-27T14:12:25.000Z</published>
    <updated>2021-08-31T14:35:35.646Z</updated>
    
    <content type="html"><![CDATA[<img src="/2021/08/27/CSS-RWDlayout/Exercise.png"><font style="font-size:18px;"><br>紀錄練習切版時，遇到卡卡的問題<br></font><a id="more"></a><hr><h2 id="icon-利用-position-位移"><a href="#icon-利用-position-位移" class="headerlink" title="icon 利用 position 位移"></a>icon 利用 position 位移</h2><h3 id="示意圖"><a href="#示意圖" class="headerlink" title="示意圖"></a>示意圖</h3><img src="/2021/08/27/CSS-RWDlayout/icon_position.png"><h3 id="重點"><a href="#重點" class="headerlink" title="重點"></a>重點</h3><ol><li>row 的 position 設置 <strong><em>relative</em></strong>;</li><li>icon 的 position 設置 <strong><em>absolute</em></strong>;</li><li>移動 icon 的位置， top 、 left</li><li>將 icon 移進去在 input 時，input 需增加 <em><strong>左邊 padding</strong></em>，保留位置給 icon。</li></ol><h3 id="HTML-程式碼"><a href="#HTML-程式碼" class="headerlink" title="HTML 程式碼"></a>HTML 程式碼</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>Email Address*<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-envelope-o"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SCSS-程式碼"><a href="#SCSS-程式碼" class="headerlink" title="SCSS 程式碼"></a>SCSS 程式碼</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//記得input的左邊要留padding,保留一些位置給icon</span></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">28px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//位移 icon 至 input 裡</span></span><br><span class="line"><span class="selector-class">.row</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.icon</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">26px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">9px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">        <span class="attribute">color</span>: rgba(<span class="number">61</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="number">0.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p data-height="450" data-theme-id="dark" data-slug-hash="wveMVWN" data-default-tab="css,result" data-user="bryan-hsiao" data-embed-version="2" data-pen-title="LoginForm&icon位移至input" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/wveMVWN" target="_blank" rel="noopener">LoginForm&amp;icon位移至input</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><h2 id="緞帶效果"><a href="#緞帶效果" class="headerlink" title="緞帶效果"></a>緞帶效果</h2><img src="/2021/08/27/CSS-RWDlayout/ribbon.png"><h3 id="重點-1"><a href="#重點-1" class="headerlink" title="重點"></a>重點</h3><ul><li><font style="color:blue;">.tag-wrap 為 藍色框線</font></li><li><font style="color:red;">.tag 為 紅色框線(熱賣)</font></li></ul><ol><li><font style="color:blue;"><strong><em>.tag-wrap</em></strong></font> 的 position 設置 <strong><em>absolute</em></strong> ，並且位移要<strong><em>超出原有的框架</em></strong>，才能做出緞帶效果;</li><li>新增 <font style="color:red;">.tag</font> 的 width、background-color…等屬性</li><li>利用 <strong><em>transform</em></strong> ，位移翻轉 <font style="color:red;">.tag</font></li><li>移動好 <font style="color:red;">.tag</font> 後，在 <font style="color:blue;">.tag-wrap</font> 新增 <em><strong>overflow: hidden;</strong></em>， 將多餘的部份隱藏</li><li>利用 <font style="color:red;">.tag</font> 的偽元素 <strong><em>:before、:after</em></strong>，新增 <strong><em>小三角 ▲</em></strong></li></ol><h3 id="html-程式碼"><a href="#html-程式碼" class="headerlink" title="html 程式碼"></a>html 程式碼</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  不影響結構  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tag-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tag"</span>&gt;</span></span><br><span class="line">      熱賣!!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--  主要結構  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-block"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SCSS-程式碼-1"><a href="#SCSS-程式碼-1" class="headerlink" title="SCSS 程式碼"></a>SCSS 程式碼</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">230px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//緞帶效果</span></span><br><span class="line"><span class="selector-class">.tag-wrap</span> &#123;</span><br><span class="line">  <span class="variable">$p</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="variable">$size</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="comment">//位移要超出原有的框架，才能做出緞帶效果</span></span><br><span class="line">  <span class="attribute">top</span>: -<span class="variable">$p</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="variable">$p</span>;</span><br><span class="line">  <span class="comment">//超出的部份隱藏</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$size</span> * <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$size</span> * <span class="number">2</span>;</span><br><span class="line">  <span class="comment">//查看位置</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.tag</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$size</span> * <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">0.25rem</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">0.25rem</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="variable">$p</span> * <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="comment">//rotate為旋轉、translate為移動、skew為傾斜、scale為縮放</span></span><br><span class="line">    <span class="attribute">transform</span>: translateX(<span class="number">50%</span>) rotate(<span class="number">45deg</span>) translateY(<span class="number">150%</span>);</span><br><span class="line">    <span class="comment">//查看位置</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line"></span><br><span class="line">    &amp;:before &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="comment">//利用 加粗邊框 + 邊框上方顏色，達到小三角的效果</span></span><br><span class="line">      <span class="attribute">border</span>: <span class="variable">$p</span> solid transparent;</span><br><span class="line">      <span class="attribute">border-top-color</span>: darken(orange, <span class="number">15%</span>);</span><br><span class="line">      <span class="attribute">bottom</span>: -<span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">6px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;:after &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="comment">//利用 加粗邊框 + 邊框上方顏色，達到小三角的效果</span></span><br><span class="line">      <span class="attribute">border</span>: <span class="variable">$p</span> solid transparent;</span><br><span class="line">      <span class="attribute">border-top-color</span>: darken(orange, <span class="number">15%</span>);</span><br><span class="line">      <span class="attribute">bottom</span>: -<span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">14px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>codepen 範例: <a href="https://codepen.io/bryan-hsaio/pen/JjJGgEJ" target="_blank" rel="noopener">CSS-緞帶效果(乾淨版本)</a><br>codepen 範例: <a href="https://codepen.io/bryan-hsaio/pen/RwgrXpJ" target="_blank" rel="noopener">CSS-緞帶效果</a></p></blockquote><hr><h2 id="觀念補充"><a href="#觀念補充" class="headerlink" title="觀念補充"></a>觀念補充</h2><h3 id="六角範例"><a href="#六角範例" class="headerlink" title="六角範例"></a>六角範例</h3><p><a href="https://www.youtube.com/watch?v=ev9bGi_XCqU" target="_blank" rel="noopener">從 Sketch 設計到 CSS 切版</a></p><p><a href="https://codepen.io/Wcc723/pen/zEYXdN" target="_blank" rel="noopener">本日範例：https://codepen.io/Wcc723/pen/zEYXdN</a></p><p><a href="https://codepen.io/Wcc723/pen/pWzxXO" target="_blank" rel="noopener">本日設計參考：https://codepen.io/Wcc723/pen/pWzxXO</a></p><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><img src="/2021/08/27/CSS-RWDlayout/transform.png"><h3 id="CSS-程式碼"><a href="#CSS-程式碼" class="headerlink" title="CSS 程式碼"></a>CSS 程式碼</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">rotate為旋轉</span></span><br><span class="line"><span class="comment">skew為傾斜</span></span><br><span class="line"><span class="comment">scale為縮放</span></span><br><span class="line"><span class="comment">translate為移動 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 範例1：移動X軸 → 旋轉 → 移動Y軸 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(150%) <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>) <span class="selector-tag">translateY</span>(50%);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 範例2：旋轉 → 移動X軸 → 移動Y軸 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>) <span class="selector-tag">translateX</span>(150%) <span class="selector-tag">translateY</span>(50%);</span><br></pre></td></tr></table></figure><img src="/2021/08/27/CSS-RWDlayout/transform_order.png"><p>上列 CSS 程式碼 「<em><strong>範例 1 、 範例 2</strong></em>」，<br>雖然同樣都做了「移動 X 軸、移動 Y 軸、旋轉」的動作，<br>但是因為 <strong><em>執行順序</em></strong> 不同，<br>所以二個範例呈現出來的結果也會<strong>不一樣</strong>。</p><p></p><p data-height="450" data-theme-id="dark" data-slug-hash="qBjbemP" data-default-tab="css,result" data-user="bryan-hsiao" data-embed-version="2" data-pen-title="transform_執行順序" class="codepen">See the Pen <a href="https://codepen.io/bryan-hsaio/pen/qBjbemP" target="_blank" rel="noopener">transform_執行順序</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><blockquote><p><a href="https://www.great-good.tw/learn/css-transform/" target="_blank" rel="noopener">transform 基本介紹</a> &gt;<a href="https://wcc723.github.io/css/2013/10/08/css-transform/" target="_blank" rel="noopener">1.CSS transform 概觀</a> &gt;<a href="https://wcc723.github.io/css/2013/10/09/css-transform-mistake/" target="_blank" rel="noopener">2.CSS transform 軸線的謊言</a> &gt;<a href="https://wcc723.github.io/css/2013/10/10/css-transform-origin/" target="_blank" rel="noopener">3.CSS transform-origin</a> &gt;<a href="https://wcc723.github.io/css/2013/10/11/css-perspective/" target="_blank" rel="noopener">4.CSS transform-3D 的透視</a></p></blockquote><h3 id="SCSS-顏色函數範例"><a href="#SCSS-顏色函數範例" class="headerlink" title="SCSS 顏色函數範例"></a>SCSS 顏色函數範例</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: rgba(<span class="number">#000</span>, <span class="number">0.5</span>); <span class="comment">//變半透明</span></span><br><span class="line">  <span class="attribute">background</span>: invert(<span class="number">#f00</span>); <span class="comment">//變反向色彩</span></span><br><span class="line">  <span class="attribute">background</span>: lighten(<span class="number">#06c</span>, <span class="number">30%</span>); <span class="comment">//變亮</span></span><br><span class="line">  <span class="attribute">background</span>: darken(<span class="number">#06c</span>, <span class="number">15%</span>); <span class="comment">//變暗</span></span><br><span class="line">  <span class="attribute">background</span>: saturate(<span class="number">#06c</span>, <span class="number">50%</span>); <span class="comment">//提高飽和度</span></span><br><span class="line">  <span class="attribute">background</span>: desaturate(<span class="number">#06c</span>, <span class="number">50%</span>); <span class="comment">//降低飽和度</span></span><br><span class="line">  <span class="attribute">background</span>: grayscale(<span class="number">#06c</span>); <span class="comment">//灰階</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.user.today/scss/" target="_blank" rel="noopener">SCSS 相關</a></p></blockquote><h3 id="linear-gradient-讓顏色有漸層效果"><a href="#linear-gradient-讓顏色有漸層效果" class="headerlink" title="linear-gradient 讓顏色有漸層效果"></a>linear-gradient 讓顏色有漸層效果</h3><img src="/2021/08/27/CSS-RWDlayout/deg.png"><h3 id="CSS-程式碼-1"><a href="#CSS-程式碼-1" class="headerlink" title="CSS 程式碼"></a>CSS 程式碼</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image: linear-gradient(165deg, white, white 50%, $bg-color 50%);</span><br></pre></td></tr></table></figure><p>background: linear-gradient( 方向, 第一個顏色, 第二個顏色, … );</p><blockquote><p><a href="http://www.jianshu.com/p/7a2eb94c91da" target="_blank" rel="noopener">背景色  —  线性渐变</a> &gt;<a href="https://medium.com/@savemuse/%E6%87%89%E7%94%A8css3-gradients%E8%A3%BD%E4%BD%9C%E6%BC%B8%E5%B1%A4%E6%95%88%E6%9E%9C-490cf0efd634" target="_blank" rel="noopener">背景色  —  漸層效果</a></p></blockquote><h3 id="繪製幾何圖形-支援度不高"><a href="#繪製幾何圖形-支援度不高" class="headerlink" title="繪製幾何圖形(支援度不高)"></a>繪製幾何圖形(支援度不高)</h3><img src="/2021/08/27/CSS-RWDlayout/clip.png"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">clip-path</span>: <span class="selector-tag">polygon</span>(0 0, 280<span class="selector-tag">px</span> 0, 370<span class="selector-tag">px</span> 100%, 0% 100%);</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://www.css88.com/tool/css-clip-path" target="_blank" rel="noopener">CSS clip-path 生成器</a> &gt;<a href="https://www.webdesigns.com.tw/css_clip-path.asp" target="_blank" rel="noopener">利用 CSS 繪製更多形狀</a> &gt;<a href="https://juejin.im/entry/59a6dab4f265da24976003d3" target="_blank" rel="noopener">不可思议的 CSS 之 CLIP-PATH</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;/2021/08/27/CSS-RWDlayout/Exercise.png&quot;&gt;
&lt;font style=&quot;font-size:18px;&quot;&gt;&lt;br&gt;紀錄練習切版時，遇到卡卡的問題&lt;br&gt;&lt;/font&gt;</summary>
    
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="hhttps://bryanhsiao.github.io/tags/CSS/"/>
    
    <category term="transform" scheme="hhttps://bryanhsiao.github.io/tags/transform/"/>
    
    <category term="translateX" scheme="hhttps://bryanhsiao.github.io/tags/translateX/"/>
    
    <category term="rotate" scheme="hhttps://bryanhsiao.github.io/tags/rotate/"/>
    
    <category term="translateY" scheme="hhttps://bryanhsiao.github.io/tags/translateY/"/>
    
    <category term="SCSS" scheme="hhttps://bryanhsiao.github.io/tags/SCSS/"/>
    
    <category term="linear-gradient" scheme="hhttps://bryanhsiao.github.io/tags/linear-gradient/"/>
    
    <category term="clip-path" scheme="hhttps://bryanhsiao.github.io/tags/clip-path/"/>
    
    <category term="position" scheme="hhttps://bryanhsiao.github.io/tags/position/"/>
    
  </entry>
  
  <entry>
    <title>JS-一次搞懂 JavaScript 的 this</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/26/JS-this/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/26/JS-this/</id>
    <published>2021-08-26T15:24:38.000Z</published>
    <updated>2021-08-26T15:25:40.536Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/26/JS-this/es6_js.png"></p><font style="font-size:20px;"> 一次搞懂 JavaScript 的 <font color="red">this</font> </font></blockquote><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 FB 直播看到 姚偉揚 老師再說明 javascript 各種 <font color="red">this</font> 的分辨，在此紀錄各種案例。</p><div class="note info">FB影片：<a href="https://www.facebook.com/141247613278573/videos/190238981712769/" target="_blank" rel="noopener">一次搞懂 JavaScript 的 this</a><br>主講者：<a href="https://www.facebook.com/scars.yao?fref=mentions" target="_blank" rel="noopener">姚偉揚</a></div><hr><h2 id="議程重點"><a href="#議程重點" class="headerlink" title="議程重點"></a>議程重點</h2><ol><li>一般函式的 this</li><li>ES6 箭頭函式的 this</li><li>Vue 組件的 this</li><li>bind/apply/call 的 this</li></ol><hr><h2 id="一般函式的-this"><a href="#一般函式的-this" class="headerlink" title="一般函式的 this"></a>一般函式的 this</h2><p><code>this</code> 主要是 <font color="red">看函式(function)怎麼執行</font> 的，下列為常見的分辨的方法</p><ul><li>直接執行 → global</li><li>作為物件的成員函式執行 → 該物件</li><li>作為 DOM 事件偵聽函式 → 該 DOM</li><li>作為建構函式 → 建構出來的實例</li></ul><p>下列為各種 this 的判斷</p><p><span id="inline-purple">範例 1</span></p><figure class="highlight js"><figcaption><span>直接呼叫</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a(); <span class="comment">//window</span></span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 2</span></p><figure class="highlight js"><figcaption><span>作為物件的成員函式執行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">obj.a = a;</span><br><span class="line"></span><br><span class="line">obj.a(); <span class="comment">//obj</span></span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 3</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    b();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.a(); <span class="comment">//window</span></span><br></pre></td></tr></table></figure><p>因為 <code>b()</code> 是直接執行，並不是以 <code>obj.b()</code> 方式執行。</p><p><span id="inline-purple">範例 4</span></p><figure class="highlight html"><figcaption><span>DOM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>作為 DOM 事件偵聽函式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123; a &#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, obj.a); <span class="comment">//DOM元素：&lt;button id='btn'&gt;btn&lt;/button&gt;</span></span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 5</span></p><figure class="highlight html"><figcaption><span>DOM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  b() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      a();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, obj.b()); <span class="comment">//window</span></span><br></pre></td></tr></table></figure><p>因為 <code>a()</code> 是直接執行。</p><figure class="highlight js"><figcaption><span>承上例，執行 obj.b() 後的函式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  a(); <span class="comment">//window</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 6</span></p><figure class="highlight html"><figcaption><span>DOM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  b() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, obj.b()); <span class="comment">//DOM元素：&lt;button id='btn'&gt;btn&lt;/button&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>承上例，執行 obj.b() 後的函式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 7</span></p><figure class="highlight html"><figcaption><span>DOM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a() &#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, obj.a()); <span class="comment">//DOM元素：&lt;button id='btn'&gt;btn&lt;/button&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>承上例，執行 obj.a() 後的函式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div class="note warning">可注意觀察 <strong>範例5~7</strong> 程式碼之間有些微的不同，所造成的this有所不一樣。</div><p><span id="inline-green">善用的方式</span></p><p>另外一種思考的方式，我們在寫<strong>物件內的函式</strong>時，為了確保 <font color="red">this</font> 能夠正確運作會先將它賦予在另一個變數上 (<font color="red">that, self, vm…</font>)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> auntie = &#123;</span><br><span class="line">  name: <span class="string">"漂亮阿姨"</span>,</span><br><span class="line"></span><br><span class="line">  callName() &#123;</span><br><span class="line">    <span class="comment">// 先使用另一個變數指向 this，讓內層函式可以正確使用</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(that); <span class="comment">// auntie 這個物件</span></span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">auntie.callName();</span><br></pre></td></tr></table></figure><hr><h2 id="箭頭函式的-this"><a href="#箭頭函式的-this" class="headerlink" title="箭頭函式的 this"></a>箭頭函式的 this</h2><span class="label info">口訣：</span><p>箭頭函式裡面的 this 等於 外面的 this</p><span class="label info">白話文：</span><p>箭頭函式裡的 this 主要是依據 <font color="red">外層函式(function)裡的 this</font> 是什麼就跟著是什麼。</p><p><span id="inline-yellow">規則</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span> &lt;= 外層函式的<span class="keyword">this</span>，規則參考「一般函式的<span class="keyword">this</span>」</span><br><span class="line">  <span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span> &lt;= 依據外層函式的<span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 1</span></p><figure class="highlight html"><figcaption><span>DOM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, a); <span class="comment">//window</span></span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 2</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  a: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.a(); <span class="comment">//window</span></span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 3</span></p><figure class="highlight html"><figcaption><span>DOM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, a); <span class="comment">//DOM元素：&lt;button id='btn'&gt;btn&lt;/button&gt;</span></span><br></pre></td></tr></table></figure><p>與 <strong>一般函式</strong>的<strong>範例 3</strong> 有點類似，雖然 <code>b()</code> 都是直接執行，<br>不過因為箭頭函式裡的 this 主要是依據 <font color="red">外層函式(function)裡的 this</font> 是什麼就跟著是什麼，<br>所以 <code>a()</code> 的 <code>this</code> 是 DOM 元素，所以這裡的 <code>b()</code> 的 <code>this</code> 也會跟著是 DOM 元素。</p><p><span id="inline-purple">範例 4</span></p><p><span id="inline-toc">Q：</span>包了<strong>好幾層</strong>的箭頭函數的 this 也是指向 windows 嗎?</p><p><span id="inline-toc">A：</span>從 <code>c()</code> 一層撥一層 直到 function <code>a()</code>，再參照 <code>a()</code> 的 <code>this</code> 是指向誰。</p><figure class="highlight js"><figcaption><span>洋蔥式一層一層拆解</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//this &lt;= 外層函式的this，規則參考「一般函式的this」</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> b = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> c = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//&lt;= 依據外層函式的this</span></span><br><span class="line">    &#125;;</span><br><span class="line">    c();</span><br><span class="line">  &#125;;</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Vue-組件的-this"><a href="#Vue-組件的-this" class="headerlink" title="Vue 組件的 this"></a>Vue 組件的 this</h2><p>全部皆指向 <font style="color:red;font-size:26px;">vue 實例</font> 本身</p><p><span id="inline-purple">範例 1</span></p><figure class="highlight js"><figcaption><span>一般函數</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">"Hello"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    getMessage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// this 指向 vm 实例</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    prompt: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// this 指向 vm 实例</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 2</span></p><figure class="highlight js"><figcaption><span>箭頭函數</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    test: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//window</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 3</span></p><p>若是 vue 的建立是包在 <code>函數</code> 裡面時，使用 <code>箭頭函數</code> ，則 this 要看外層函數的 this。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//this  &lt;= 外層函式的this，規則參考「一般函式的this」</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      test: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//&lt;= 依據外層函式的this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning">如果在vue裡，寫箭頭函式要使用this的話，因為vue是<font color="red">物件</font>，而不是<font color="red">函式</font>，<br>此時箭頭函式裡的this會指向<strong>外層函式的this</strong>，<br>所以在vue要使用this的話，建議使用 <font color="red">一般函式</font> 寫法。</div><hr><h2 id="bind-apply-call-的-this"><a href="#bind-apply-call-的-this" class="headerlink" title="bind/apply/call 的 this"></a>bind/apply/call 的 this</h2><ul><li><p><strong>一般函式</strong>使用 bind/apply/call 時，<code>this</code> 就是所傳入的<font color="red">物件</font></p></li><li><p><strong>箭頭函式</strong>使用 bind/apply/call 時，<code>this</code> <font color="red">不會</font>有變化，規則一樣是 <font color="red">依據外層函式(function)裡的 this</font> 是什麼就跟著是什麼。</p></li></ul><p><span id="inline-purple">範例 1</span></p><figure class="highlight html"><figcaption><span>DOM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>一般函式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = add.bind(btn);</span><br><span class="line">b(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">add.apply(btn, [<span class="number">3</span>, <span class="number">5</span>]);</span><br><span class="line">add.call(btn, <span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 2</span></p><figure class="highlight html"><figcaption><span>DOM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>箭頭函式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = add.bind(btn);</span><br><span class="line">b(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">add.apply(btn, [<span class="number">3</span>, <span class="number">5</span>]);</span><br><span class="line">add.call(btn, <span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/26/JS-this/es6_js.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt; 一次搞懂 JavaScript 的 &lt;font color=&quot;red&quot;&gt;this&lt;/font&gt; &lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="ES6" scheme="hhttps://bryanhsiao.github.io/tags/ES6/"/>
    
    <category term="this" scheme="hhttps://bryanhsiao.github.io/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>JS-Events</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/25/JS-Events/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/25/JS-Events/</id>
    <published>2021-08-25T14:40:52.000Z</published>
    <updated>2021-08-25T14:41:53.826Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/25/JS-Events/js_01.png"></p><font style="font-size:20px;">那些你知道與不知道的事件們</font></blockquote><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 2018 iT 邦幫忙鐵人賽，看到 Kuro 大的重新認識 JavaScript 系列文，仔細的閱讀後，紀錄自己觀念不足的部份，也非常推薦給大家觀看此系列文。</p><div class="note info"><a href="https://ithelp.ithome.com.tw/users/20065504/ironman/1259?page=1" target="_blank" rel="noopener">Kuro-重新認識 JavaScript 系列</a></div><hr><h2 id="表單相關事件"><a href="#表單相關事件" class="headerlink" title="表單相關事件"></a>表單相關事件</h2><ul><li><p><font color="red">input</font> 事件： 當 input、 textarea 以及帶有 contenteditable 的元素內容被改變時，就會觸發 input 事件。</p></li><li><p>change 事件： 當 input、select、textarea、radio、checkbox 等表單元素被改變時觸發。 但與 input 事件不同的是，input 事件會在輸入框輸入內容的當下觸發，而 change 事件則是在目前焦點<font color="red">離開輸入框後</font>才觸發。</p></li><li><p>submit 事件：當表單被送出時觸發，通常表單驗證都會在這一步處理，若驗證未通過則 return false;。</p></li></ul><hr><h2 id="特殊事件"><a href="#特殊事件" class="headerlink" title="特殊事件"></a>特殊事件</h2><p>透過 Composition Events 我們可以觀察使用者在輸入框內開啟<font color="red">輸入法 (Input Method Editor, IME)</font> 時，組字或選字的狀態。</p><p>這個時候就需要透過 Composition Events 來為輸入框做增強。</p><ul><li>compositionstart: 輸入框內開啟輸入法，且正在拼字時觸發。</li><li>compositionupdate: 輸入框內開啟輸入法，且正在拼字或選字時更改了內容時觸發。</li><li>compositionend: 輸入框內開啟輸入法，拼字或選字完成，正要送出至輸入框時觸發。</li></ul><p>可以看到，如果要確認使用者輸入完成並送出文字時，就可以透過 compositionend 來做最後確認。</p><p>執行的時候像這樣：</p><img src="/2021/08/25/JS-Events/js_02.png"><div class="note primary">開啟console，在input輸入文字：<a href="https://codepen.io/Kanboo/pen/ZvRayJ?editors=1010" target="_blank" rel="noopener">event觸發時機</a></div><hr><h2 id="鍵盤相關事件"><a href="#鍵盤相關事件" class="headerlink" title="鍵盤相關事件"></a>鍵盤相關事件</h2><p>鍵盤相關事件有下列三種，在大多數情況下會將鍵盤事件註冊在 input 的輸入框上。</p><ul><li><p>keydown 事件: 「壓下」鍵盤按鍵時會觸發 keydown 事件。</p></li><li><p>keypress 事件: 除了 Shift, Fn, CapsLock 這三種按鍵外按住時會觸發，若按著不放則會連續觸發。</p></li><li><p>keyup 事件: 「放開」鍵盤按鍵時觸發。</p></li></ul><p>透過 <font color="red">e.keyCode</font> 就可以判斷使用者目前按下的是哪個按鈕</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">textBox.addEventListener(</span><br><span class="line">  <span class="string">"keydown"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// enter 的 keyCode 是 13</span></span><br><span class="line">    <span class="keyword">if</span> (e.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">      formSubmit();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>註： keyCode 的對應表可以到這裡查看：<a href="https://gist.github.com/tylerbuchea/8011573" target="_blank" rel="noopener">https://gist.github.com/tylerbuchea/8011573</a></p></blockquote><hr><h2 id="滑鼠相關事件"><a href="#滑鼠相關事件" class="headerlink" title="滑鼠相關事件"></a>滑鼠相關事件</h2><ul><li><p>mousedown / mouseup 事件: 這兩個事件分別會在滑鼠點擊了某元素「按下」(mousedown) 按鈕，以及「放開」(mouseup) 按鈕時觸發。</p></li><li><p>click 事件: 當滑鼠「點擊」了某元素時觸發。</p></li><li><p>dblclick 事件: 當滑鼠「連點兩次」了某元素時觸發。</p></li><li><p>mouseenter / mousemove / mouseleave 事件：</p></li><li><p>這三個事件要放在一起看</p><ul><li><p>當滑鼠游標移入了某元素時，會先觸發 mouseenter 事件。</p></li><li><p>滑鼠游標在這個元素內「移動」時，會連續觸發 mousemove 事件。</p></li><li><p>直到滑鼠游標離開了這個元素，才觸發 mouseleave 事件。</p></li></ul></li></ul><img src="/2021/08/25/JS-Events/js_03.gif"><p>這些滑鼠相關的事件，都可以透過 <font color="red">event.pageX</font> 與 <font color="red">event.pageY</font> 屬性去取得目前在網頁對應的座標。</p><hr><h2 id="介面相關事件"><a href="#介面相關事件" class="headerlink" title="介面相關事件"></a>介面相關事件</h2><ul><li><p>load 事件：<br>註冊在 window 物件上，指的是網頁資源 (包括 CSS、JS、圖片等) 全數載入完畢後觸發。<br>如果是 img 元素的 load 事件，則表示是此圖片載入完畢後觸發。</p></li><li><p>unload 、 beforeunload 事件：<br>與 load 事件相反，unload 與 beforeunload 事件分別會在離開頁面或重新整理時觸發，而 beforeunload 會跳出對話框詢問使用者是否要離開目前頁面。</p></li><li><p><font color="red">resize</font> 事件：當瀏覽器 (window) 或指定元素 (element) 的「尺寸變更」時觸發。</p></li><li><p><font color="red">scroll</font> 事件：當瀏覽器 (window) 或指定元素 (element) 的「捲軸被拉動」時觸發。</p></li><li><p><font color="red">DOMContentLoaded</font> 事件：<br>類似於 load 事件，但不同的是，load 事件是在網頁「所有」資源都已經載入完成後才會觸發，而 DOMContentLoaded 事件是在 DOM 結構被完整的讀取跟解析後就會被觸發，不須等待外部資源讀取完成。</p></li></ul><p>簡單來說， DOMContentLoaded 與 load 的時機可以用這張圖來解釋：</p><img src="/2021/08/25/JS-Events/js_04.png">]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/25/JS-Events/js_01.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;那些你知道與不知道的事件們&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    <category term="重新認識 JavaScript" scheme="hhttps://bryanhsiao.github.io/categories/JS/重新認識-JavaScript/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="重新認識 JavaScript" scheme="hhttps://bryanhsiao.github.io/tags/重新認識-JavaScript/"/>
    
    <category term="event" scheme="hhttps://bryanhsiao.github.io/tags/event/"/>
    
  </entry>
  
  <entry>
    <title>ES6-樣板字串 (Template String)</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/24/ES6-TemplateString/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/24/ES6-TemplateString/</id>
    <published>2021-08-24T15:36:28.000Z</published>
    <updated>2021-08-24T15:37:22.079Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/24/ES6-TemplateString/ES6.jpg"></p><font style="font-size:20px;">Template String 樣板字串</font></blockquote><a id="more"></a><hr><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight js"><figcaption><span>新舊寫法比較</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [<span class="string">"老大"</span>, <span class="string">"老二"</span>, <span class="string">"老么"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//======================過去寫法======================</span></span><br><span class="line"><span class="keyword">let</span> oldUl =</span><br><span class="line">  <span class="string">"&lt;ul&gt;"</span> +</span><br><span class="line">  <span class="string">"&lt;li&gt;我叫做 "</span> +</span><br><span class="line">  people[<span class="number">0</span>] +</span><br><span class="line">  <span class="string">"&lt;/li&gt;"</span> +</span><br><span class="line">  <span class="string">"&lt;li&gt;我叫做 "</span> +</span><br><span class="line">  people[<span class="number">1</span>] +</span><br><span class="line">  <span class="string">"&lt;/li&gt;"</span> +</span><br><span class="line">  <span class="string">"&lt;li&gt;我叫做 "</span> +</span><br><span class="line">  people[<span class="number">2</span>] +</span><br><span class="line">  <span class="string">"&lt;/li&gt;"</span> +</span><br><span class="line">  <span class="string">"&lt;/ul&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(oldUl);</span><br><span class="line"><span class="comment">//"&lt;ul&gt;&lt;li&gt;我叫做 老大&lt;/li&gt;&lt;li&gt;我叫做 老二&lt;/li&gt;&lt;li&gt;我叫做 老么&lt;/li&gt;&lt;/ul&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//======================新的寫法======================</span></span><br><span class="line"><span class="keyword">let</span> newUl = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;我叫做 <span class="subst">$&#123;people[<span class="number">0</span>]&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;我叫做 <span class="subst">$&#123;people[<span class="number">1</span>]&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;我叫做 <span class="subst">$&#123;people[<span class="number">2</span>]&#125;</span>&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newUl);</span><br><span class="line"><span class="comment">//  &lt;ul&gt;</span></span><br><span class="line"><span class="comment">//    &lt;li&gt;我叫做 老大&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//    &lt;li&gt;我叫做 老二&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//    &lt;li&gt;我叫做 老么&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//  &lt;/ul&gt;</span></span><br></pre></td></tr></table></figure><p>甚至可以在 <font color="red">${}</font> 內使用<font color="red">函式</font> (${}裡再包\${})。</p><figure class="highlight js"><figcaption><span>使用.map組字串(結果與上例一樣)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newUl = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;people.map(person =&gt; <span class="string">`&lt;li&gt;我叫做 <span class="subst">$&#123;person&#125;</span>&lt;/li&gt;`</span>).join(<span class="string">""</span>)&#125;</span></span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>也可以在函式內增添<font color="red">更多的判斷式</font>。</p><figure class="highlight js"><figcaption><span>新增if判斷式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"老大"</span>,</span><br><span class="line">    friends: <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"老二"</span>,</span><br><span class="line">    friends: <span class="number">16</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"老么"</span>,</span><br><span class="line">    friends: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newUl = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;people</span></span></span><br><span class="line"><span class="string"><span class="subst">      .map(person =&gt; &#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">        <span class="keyword">if</span> (person.friends) &#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">          <span class="keyword">return</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;person.name&#125;</span> 有 <span class="subst">$&#123;person.friends&#125;</span> 朋友&lt;/li&gt;`</span>;</span></span></span><br><span class="line"><span class="string"><span class="subst">        &#125;</span> else &#123;</span></span><br><span class="line"><span class="string">          return `</span>&lt;li&gt;$&#123;person.name&#125; 沒朋友&lt;<span class="regexp">/li&gt;`;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      &#125;)</span></span><br><span class="line"><span class="regexp">      .join("")&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/u</span>l&gt;</span><br><span class="line"><span class="string">`;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">console.log(newUl);</span></span><br><span class="line"><span class="string">//  &lt;ul&gt;</span></span><br><span class="line"><span class="string">//    &lt;li&gt;老大 有 2 朋友&lt;/li&gt;&lt;li&gt;老二 有 999 朋友&lt;/li&gt;&lt;li&gt;老么 邊緣人&lt;/li&gt;</span></span><br><span class="line"><span class="string">//  &lt;/ul&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="巢狀-String-Template"><a href="#巢狀-String-Template" class="headerlink" title="巢狀 String Template"></a>巢狀 String Template</h2><p>如同上述的方法 <font color="red">${}</font> 內可以加入<font color="red">函式</font>及其更內層的 Template String，<br>所以也可以在 <font color="red">${}</font> 插入<font color="red">另一組的函式</font>的 Template String。</p><figure class="highlight js"><figcaption><span>在$&#123;&#125;裡呼叫function</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> travelers = &#123;</span><br><span class="line">  leader: <span class="string">"爸爸"</span>,</span><br><span class="line">  partner: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"老大"</span>,</span><br><span class="line">      friends: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"老二"</span>,</span><br><span class="line">      friends: <span class="number">16</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">"老么"</span>,</span><br><span class="line">      friends: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderList</span>(<span class="params">people</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;上車名單&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;people.map(person =&gt; <span class="string">`&lt;li&gt;<span class="subst">$&#123;person.name&#125;</span>&lt;/li&gt;`</span>).join(<span class="string">""</span>)&#125;</span></span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div class="template"&gt;</span></span><br><span class="line"><span class="string">  &lt;h2&gt;開車：<span class="subst">$&#123;travelers.leader&#125;</span>&lt;/h2&gt;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;renderList(travelers.partner)&#125;</span></span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(template);</span><br><span class="line"><span class="comment">// &lt;div class=\"template\"&gt;</span></span><br><span class="line"><span class="comment">// &lt;h2&gt;開車：爸爸&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   &lt;div&gt;上車名單&lt;/div&gt;</span></span><br><span class="line"><span class="comment">//   &lt;ul&gt;</span></span><br><span class="line"><span class="comment">//     &lt;li&gt;老大&lt;/li&gt;&lt;li&gt;老二&lt;/li&gt;&lt;li&gt;老么&lt;/li&gt;</span></span><br><span class="line"><span class="comment">//   &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// &lt;/div&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="跳脫字元"><a href="#跳脫字元" class="headerlink" title="跳脫字元"></a>跳脫字元</h2><p>如果有需要插入<font color="red">特殊字元</font>，一樣可以使用 <font color="red">\</font> 反斜線來插入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`\\`</span>); <span class="comment">// "\"</span></span><br></pre></td></tr></table></figure><p>如果要計算字元數，或是需要將字串做額外處理，<font color="red">跳脫字元是不佔字符數</font>的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`\\`</span>.length); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>要取得<font color="red">含</font>特殊字元的字串可用 String.raw()：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`\\`</span>.length); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><hr><h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><div class="note info"><a href="https://ithelp.ithome.com.tw/users/20083608/ironman/1354" target="_blank" rel="noopener">邁向 JavaScript 勇者之路</a></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/24/ES6-TemplateString/ES6.jpg&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;Template String 樣板字串&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    <category term="ES6" scheme="hhttps://bryanhsiao.github.io/categories/JS/ES6/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="ES6" scheme="hhttps://bryanhsiao.github.io/tags/ES6/"/>
    
    <category term="樣板字串" scheme="hhttps://bryanhsiao.github.io/tags/樣板字串/"/>
    
    <category term="Template String" scheme="hhttps://bryanhsiao.github.io/tags/Template-String/"/>
    
  </entry>
  
  <entry>
    <title>JS-陣列(Array)</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/22/JS-Array/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/22/JS-Array/</id>
    <published>2021-08-22T15:54:00.000Z</published>
    <updated>2021-08-22T16:02:58.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/22/JS-Array/js_01.png"></p><font style="font-size:20px;">Array 複習 與 ES6 新語法</font></blockquote><a id="more"></a><hr><h2 id="push、pop、shift、unshift-差異"><a href="#push、pop、shift、unshift-差異" class="headerlink" title="push、pop、shift、unshift 差異"></a>push、pop、shift、unshift 差異</h2><ul><li>push：加到陣列末端</li><li>pop：移除最末端</li><li>shift：移除最前端</li><li>unshift：加到陣列前端</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> home = [<span class="string">"爸爸"</span>, <span class="string">"媽媽"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// push：加到陣列末端</span></span><br><span class="line"><span class="keyword">var</span> newLength = home.push(<span class="string">"老大"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["爸爸", "媽媽", "老大"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pop：移除最末端</span></span><br><span class="line"><span class="keyword">var</span> last = home.pop();</span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["爸爸", "媽媽"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shift：移除最前端</span></span><br><span class="line"><span class="keyword">var</span> first = home.shift();</span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["媽媽"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unshift：加到陣列前端</span></span><br><span class="line"><span class="keyword">var</span> newLength = home.unshift(<span class="string">"小花"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["小花", "媽媽"]</span></span><br></pre></td></tr></table></figure><hr><h2 id="排序與反轉-sort-與-reverse"><a href="#排序與反轉-sort-與-reverse" class="headerlink" title="排序與反轉 sort 與 reverse"></a>排序與反轉 sort 與 reverse</h2><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><blockquote class="question">arr.sort([compareFunction])</blockquote><p>如果 <code>compareFunction</code> 沒有被應用, 元素將被轉換為字串並以<code>Unicode</code>碼位來比較並排序。<br>特別一提，在數值排序中，9 會在 80 前面，但因為<font color="red">數字被轉換成字串</font>，在<code>Unicode</code>順序中 “80” 會在 “9” 前面。</p><figure class="highlight js"><figcaption><span>字串比較</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大寫英文 Unicode 排在 小寫英文 前面</span></span><br><span class="line"><span class="keyword">var</span> stringArray = [<span class="string">"blue"</span>, <span class="string">"Humpback"</span>, <span class="string">"Beluga"</span>, <span class="string">"alice"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringArray.sort()); <span class="comment">//["Beluga", "Humpback", "alice", "blue"]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>數字比較</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 數字被轉換成字串</span></span><br><span class="line"><span class="keyword">var</span> numbers_01 = [<span class="number">1</span>, <span class="number">30</span>, <span class="number">4</span>, <span class="number">21</span>];</span><br><span class="line">numbers_01.sort();</span><br><span class="line"><span class="built_in">console</span>.log(numbers_01); <span class="comment">// [1, 21, 30, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 compareFunction比較，就不會被轉成「字串」</span></span><br><span class="line"><span class="keyword">var</span> numbers_02 = [<span class="number">1</span>, <span class="number">30</span>, <span class="number">4</span>, <span class="number">21</span>];</span><br><span class="line">numbers_02.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(numbers_02); <span class="comment">// [1, 4, 21, 30]</span></span><br></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p>將整個陣列中的成員<font color="red">順序反轉</font>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> home = [<span class="string">"0.爸爸"</span>, <span class="string">"1.媽媽"</span>, <span class="string">"2.老大"</span>, <span class="string">"3.老二"</span>, <span class="string">"4.老么"</span>];</span><br><span class="line">home.reverse();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["4.老么", "3.老二", "2.老大", "1.媽媽", "0.爸爸"]</span></span><br></pre></td></tr></table></figure><p>另一個情況是<font color="red">字串</font>中的字元，如果要進行反轉的話，並沒有字串中的 reverse 方法，要用這個陣列的 reverse 方法加上字串與陣列的互相轉換的<code>split</code>與<code>join</code>方法，可以使用以下的函式:</p><figure class="highlight js"><figcaption><span>字串反轉</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseString</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">    .split(<span class="string">""</span>)</span><br><span class="line">    .reverse()</span><br><span class="line">    .join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reverseString(<span class="string">"ABCDEFG"</span>)); <span class="comment">// "GFEDCBA"</span></span><br></pre></td></tr></table></figure><hr><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><blockquote class="question">arr.slice([begin[, end]])</blockquote><p>回傳一個<font color="red">新陣列</font>，為原陣列選擇之 <code>begin</code> 至 <code>end</code>（<font color="red">不含 end</font>）部分的<font color="red">淺拷貝</font>（shallow copy）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> home = [<span class="string">"0.爸爸"</span>, <span class="string">"1.媽媽"</span>, <span class="string">"2.老大"</span>, <span class="string">"3.老二"</span>, <span class="string">"4.老么"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// begin為空或0，就是全部複製</span></span><br><span class="line"><span class="built_in">console</span>.log(home.slice()); <span class="comment">//["0.爸爸", "1.媽媽", "2.老大", "3.老二", "4.老么"]</span></span><br><span class="line"><span class="built_in">console</span>.log(home.slice(<span class="number">0</span>)); <span class="comment">//["0.爸爸", "1.媽媽", "2.老大", "3.老二", "4.老么"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 僅 begin 參數</span></span><br><span class="line"><span class="built_in">console</span>.log(home.slice(<span class="number">2</span>)); <span class="comment">//["2.老大", "3.老二", "4.老么"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加 end 參數，擷取到 end 的 index「前」</span></span><br><span class="line"><span class="built_in">console</span>.log(home.slice(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">//["2.老大"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加 end 參數，end index值 超過原陣列個數，沒有關係</span></span><br><span class="line"><span class="built_in">console</span>.log(home.slice(<span class="number">2</span>, <span class="number">9999</span>)); <span class="comment">//["2.老大", "3.老二", "4.老么"]</span></span><br></pre></td></tr></table></figure><hr><h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><blockquote class="question">array.splice(start[, deleteCount[, item1[, item2[, …]]]])</blockquote><p>可刪除既有元素並／或加入新元素來改變一個陣列的內容(<font color="red">會改變原陣列值</font>)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> home = [<span class="string">"0.爸爸"</span>, <span class="string">"1.媽媽"</span>, <span class="string">"2.老大"</span>, <span class="string">"3.老二"</span>, <span class="string">"4.老么"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 會改變原陣例值</span></span><br><span class="line">home.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">"小花"</span>); <span class="comment">//在索引 2 開始，插入新增字串 '小花'</span></span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["0.爸爸", "1.媽媽", "小花", "2.老大", "3.老二", "4.老么"]</span></span><br><span class="line"></span><br><span class="line">home.splice(<span class="number">2</span>, <span class="number">1</span>); <span class="comment">//在索引 2 開始，刪除 1個 元素</span></span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["0.爸爸", "1.媽媽", "2.老大", "3.老二", "4.老么"]</span></span><br><span class="line"></span><br><span class="line">home.splice(<span class="number">2</span>, <span class="number">3</span>, <span class="string">"巧虎"</span>, <span class="string">"琪琪"</span>, <span class="string">"桃樂比"</span>); <span class="comment">//在索引 2 開始，刪除 3個 元素後，再新增 3個 新元素</span></span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["0.爸爸", "1.媽媽", "巧虎", "琪琪", "桃樂比"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 展開運算子( Spread Operator )</span></span><br><span class="line"><span class="keyword">const</span> addArr = [<span class="string">"巧虎"</span>, <span class="string">"琪琪"</span>, <span class="string">"桃樂比"</span>];</span><br><span class="line">home.splice(<span class="number">2</span>, <span class="number">3</span>, ...addArr); <span class="comment">//在索引 2 開始，刪除 3個 元素後，再新增 3個 新元素</span></span><br><span class="line"><span class="built_in">console</span>.log(home); <span class="comment">// ["0.爸爸", "1.媽媽", "巧虎", "琪琪", "桃樂比"]</span></span><br></pre></td></tr></table></figure><hr><h2 id="淺拷貝作法"><a href="#淺拷貝作法" class="headerlink" title="淺拷貝作法"></a>淺拷貝作法</h2><p><span id="inline-toc">1.</span> ES6 展開運算子( Spread Operator )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> copyArray = [...aArray];</span><br></pre></td></tr></table></figure><p>它也可以用來組合陣列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> bArray = [<span class="number">5</span>, <span class="number">6</span>, ...aArray, <span class="number">8</span>, <span class="number">9</span>]; <span class="comment">// [5, 6, 1, 2, 3, 8, 9]</span></span><br></pre></td></tr></table></figure><p><span id="inline-toc">2.</span> slice</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const oldArray = [1, 2, 3];</span><br><span class="line"></span><br><span class="line">const newArray = oldArray.slice(0); // [1, 2, 3]</span><br><span class="line">const newArray = oldArray.slice();  // [1, 2, 3]</span><br></pre></td></tr></table></figure><p><span id="inline-toc">3.</span> concat</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oldArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> newArray = [].concat(oldArray); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><hr><h2 id="ES6-find-與-findIndex"><a href="#ES6-find-與-findIndex" class="headerlink" title="ES6- find 與 findIndex"></a>ES6- find 與 findIndex</h2><ul><li>find =&gt; 回傳 value</li><li>findIndex =&gt; 回傳 index</li></ul><h3 id="基本寫法"><a href="#基本寫法" class="headerlink" title="基本寫法"></a>基本寫法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aArray = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">22</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// find</span></span><br><span class="line"><span class="keyword">const</span> bValue = aArray.find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">6</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bValue); <span class="comment">//回傳第一個滿足條件的「value」：7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// findIndex</span></span><br><span class="line"><span class="keyword">const</span> cIndex = aArray.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">6</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cIndex); <span class="comment">//回傳第一個滿足條件的「index」：3</span></span><br></pre></td></tr></table></figure><h3 id="進階應用"><a href="#進階應用" class="headerlink" title="進階應用"></a>進階應用</h3><p>不過當會用到 <code>find</code> 或 <code>findIndex</code> 時，表示要尋找的條件通常比較複雜一點，才能顯現他們比 <code>indexOf</code> 強大之處。</p><p><span id="inline-purple">範例 1</span></p><p>從陣列中找出符合條件的 物件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inventory = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"apples"</span>, <span class="attr">quantity</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"bananas"</span>, <span class="attr">quantity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"cherries"</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isCherries</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruit.name === <span class="string">"cherries"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// find 回傳第一個滿足條件的「value」</span></span><br><span class="line"><span class="built_in">console</span>.log(inventory.find(isCherries)); <span class="comment">// &#123; name: 'cherries', quantity: 5 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// findIndex 回傳第一個滿足條件的「index」</span></span><br><span class="line"><span class="built_in">console</span>.log(inventory.findIndex(isCherries)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><span id="inline-purple">範例 2</span></p><p>找出質數</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">while</span> (start &lt;= <span class="built_in">Math</span>.sqrt(element)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (element % start++ <span class="xml"><span class="tag">&lt; <span class="attr">1</span>) &#123;</span></span></span><br><span class="line"><span class="xml">      return false;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  return element &gt; 1;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// find 回傳第一個滿足條件的「value」</span></span><br><span class="line"><span class="xml">console.log([4, 6, 8, 12].find(isPrime)); // undefined, not found</span></span><br><span class="line"><span class="xml">console.log([4, 5, 8, 12].find(isPrime)); // 5</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// findIndex 回傳第一個滿足條件的「index」</span></span><br><span class="line"><span class="xml">console.log([4, 6, 8, 12].findIndex(isPrime)); // -1, not found</span></span><br><span class="line"><span class="xml">console.log([4, 6, 7, 12].findIndex(isPrime)); // 2</span></span><br></pre></td></tr></table></figure><hr><h2 id="ES6-includes"><a href="#ES6-includes" class="headerlink" title="ES6-includes"></a>ES6-includes</h2><p>在陣列中尋找是否<font color="red">包含</font>這個值，如果有就會回傳 true，沒有則會回傳 false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 數字</span></span><br><span class="line"><span class="keyword">const</span> numArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(numArr.includes(<span class="number">2</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字串</span></span><br><span class="line"><span class="keyword">const</span> strArr = [<span class="string">"老大"</span>, <span class="string">"老二"</span>, <span class="string">"老么"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(strArr.includes(<span class="string">"老二"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(strArr.includes(<span class="string">"小花"</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><div class="note info"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">MDN-Array</a><br><a href="https://ithelp.ithome.com.tw/articles/10193776" target="_blank" rel="noopener">ES6 陣列語法糖</a><br><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part3/array.html" target="_blank" rel="noopener">ES6學習-陣列</a><br><a href="http://es6.ruanyifeng.com/#docs/array" target="_blank" rel="noopener">数组的扩展</a><br></div>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/22/JS-Array/js_01.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;Array 複習 與 ES6 新語法&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
    <category term="ES6" scheme="hhttps://bryanhsiao.github.io/tags/ES6/"/>
    
    <category term="Array" scheme="hhttps://bryanhsiao.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>JS-立即被呼叫的函式 (IIFE)</title>
    <link href="hhttps://bryanhsiao.github.io/2021/08/22/JS-IIFE/"/>
    <id>hhttps://bryanhsiao.github.io/2021/08/22/JS-IIFE/</id>
    <published>2021-08-22T15:39:20.000Z</published>
    <updated>2021-08-22T16:27:59.752Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="/2021/08/22/JS-IIFE/js_01.png"></p><font style="font-size:20px;">立即被呼叫的函式 (Immediately Invoked Function Expression, IIFE)</font></blockquote><a id="more"></a><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 2018 iT 邦幫忙鐵人賽，看到 Kuro 大的重新認識 JavaScript 系列文，仔細的閱讀後，紀錄自己觀念不足的部份，也非常推薦給大家觀看此系列文。</p><div class="note info"><a href="https://ithelp.ithome.com.tw/users/20065504/ironman/1259?page=1" target="_blank" rel="noopener">Kuro-重新認識 JavaScript 系列</a></div><hr><h2 id="立即被呼叫的函式-IIFE"><a href="#立即被呼叫的函式-IIFE" class="headerlink" title="立即被呼叫的函式 (IIFE)"></a>立即被呼叫的函式 (IIFE)</h2><p>IIFE 的好處，就是可以<strong>減少「全域變數」的產生，同時也避免了變數名稱衝突的機會</strong>。</p><p>如果你有去看過 jQuery 的原始碼，就會發現 jQuery 也用了相同的手法將 window 與 undefined 保留起來：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 略...</span></span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="當迴圈遇到-function"><a href="#當迴圈遇到-function" class="headerlink" title="當迴圈遇到 function"></a>當迴圈遇到 function</h2><p>題目：<br>假設想透過迴圈 + setTimeout 來做到，在五秒之內，每秒鐘依序透過<font color="red">console.log</font>印出：<font color="red">0 1 2 3 4</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假設想透過迴圈 + setTimeout 來做到</span></span><br><span class="line"><span class="comment">// 每秒鐘將 i 的值 console 出來</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真的是這樣嗎？ 我們來看看執行的結果。</p><p>執行的結果是， <font color="red">console.log()</font> 會在「一秒鐘之後」同時印出「五次 <font color="red">5</font>」。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>;</span><br><span class="line"><span class="number">5</span>;</span><br><span class="line"><span class="number">5</span>;</span><br><span class="line"><span class="number">5</span>;</span><br><span class="line"><span class="number">5</span>;</span><br></pre></td></tr></table></figure><font color="red">「切分變數有效範圍的最小單位是 “function” 」</font><br><font color="red">「切分變數有效範圍的最小單位是 “function” 」</font><br><font color="red">「切分變數有效範圍的最小單位是 “function” 」</font><p>很重要，所以要再講三次。</p><p>所以我們利用 <font color="red">IIFE</font> 稍微修改一下：</p><figure class="highlight js"><figcaption><span>IIFE</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 將原本的 1000 改成 1000 * x</span></span><br><span class="line">    <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x);</span><br><span class="line">    &#125;, <span class="number">1000</span> * x);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像這樣，就可以依序印出我們要的結果囉！</p><hr><h2 id="ES6-let、const"><a href="#ES6-let、const" class="headerlink" title="ES6-let、const"></a>ES6-let、const</h2><p><font color="red">ES6</font> 以後新增了 <font color="red">let</font> 與 <font color="red">const</font>，且改以 <font color="red">{ }</font> 作為它的 Scope。</p><p>換句話說，將範例中的 for 改為 let 就可以做到保留 i 在執行迴圈當下的「值」的效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;img src=&quot;/2021/08/22/JS-IIFE/js_01.png&quot;&gt;&lt;/p&gt;
&lt;font style=&quot;font-size:20px;&quot;&gt;立即被呼叫的函式 (Immediately Invoked Function Expression, IIFE)&lt;/font&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/categories/JS/"/>
    
    
    <category term="JS" scheme="hhttps://bryanhsiao.github.io/tags/JS/"/>
    
  </entry>
  
</feed>
